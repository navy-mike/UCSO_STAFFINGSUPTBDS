$PBExportHeader$w_pat_assmts_updates.srw
forward
global type w_pat_assmts_updates from window
end type
type st_dbconnection from statictext within w_pat_assmts_updates
end type
type dw_ltrec12 from datawindow within w_pat_assmts_updates
end type
type dw_chiefs from datawindow within w_pat_assmts_updates
end type
type dw_supervisors from datawindow within w_pat_assmts_updates
end type
type dw_admin from datawindow within w_pat_assmts_updates
end type
type lb_orderby_bak from listbox within w_pat_assmts_updates
end type
type st_48 from statictext within w_pat_assmts_updates
end type
type dw_unfilled from datawindow within w_pat_assmts_updates
end type
type sle_refresh_grpids from singlelineedit within w_pat_assmts_updates
end type
type pb_restore_backup from picturebutton within w_pat_assmts_updates
end type
type st_db_identity from statictext within w_pat_assmts_updates
end type
type lb_devel from listbox within w_pat_assmts_updates
end type
type lb_col_xref from listbox within w_pat_assmts_updates
end type
type sle_case_num from singlelineedit within w_pat_assmts_updates
end type
type st_47 from statictext within w_pat_assmts_updates
end type
type pb_help from picturebutton within w_pat_assmts_updates
end type
type dw_unassigned from datawindow within w_pat_assmts_updates
end type
type dw_team_resvrs from datawindow within w_pat_assmts_updates
end type
type dw_fto from datawindow within w_pat_assmts_updates
end type
type dw_smcont from datawindow within w_pat_assmts_updates
end type
type dw_vine from datawindow within w_pat_assmts_updates
end type
type dw_emsro from datawindow within w_pat_assmts_updates
end type
type dw_em2 from datawindow within w_pat_assmts_updates
end type
type dw_em1 from datawindow within w_pat_assmts_updates
end type
type dw_rec2 from datawindow within w_pat_assmts_updates
end type
type st_46 from statictext within w_pat_assmts_updates
end type
type dw_rec1 from datawindow within w_pat_assmts_updates
end type
type dw_testrec1 from datawindow within w_pat_assmts_updates
end type
type dw_d from datawindow within w_pat_assmts_updates
end type
type sle_num_specs from singlelineedit within w_pat_assmts_updates
end type
type dw_lay_specs from datawindow within w_pat_assmts_updates
end type
type pb_refresh from picturebutton within w_pat_assmts_updates
end type
type sle_drag_drop_col from singlelineedit within w_pat_assmts_updates
end type
type st_45 from statictext within w_pat_assmts_updates
end type
type st_44 from statictext within w_pat_assmts_updates
end type
type sle_drag_from_col from singlelineedit within w_pat_assmts_updates
end type
type dw_lt_reserves from datawindow within w_pat_assmts_updates
end type
type sle_drag_to_positionid from singlelineedit within w_pat_assmts_updates
end type
type st_43 from statictext within w_pat_assmts_updates
end type
type sle_drag_from_positionid from singlelineedit within w_pat_assmts_updates
end type
type st_42 from statictext within w_pat_assmts_updates
end type
type st_41 from statictext within w_pat_assmts_updates
end type
type sle_drag_from_control from singlelineedit within w_pat_assmts_updates
end type
type st_36 from statictext within w_pat_assmts_updates
end type
type sle_icon_filenanme from singlelineedit within w_pat_assmts_updates
end type
type sle_drag_drop_mode from singlelineedit within w_pat_assmts_updates
end type
type st_35 from statictext within w_pat_assmts_updates
end type
type st_24 from statictext within w_pat_assmts_updates
end type
type sle_dragdrop_rowcount from singlelineedit within w_pat_assmts_updates
end type
type st_23 from statictext within w_pat_assmts_updates
end type
type sle_num_avail_positions from singlelineedit within w_pat_assmts_updates
end type
type st_22 from statictext within w_pat_assmts_updates
end type
type lb_1 from listbox within w_pat_assmts_updates
end type
type st_40 from statictext within w_pat_assmts_updates
end type
type sle_drag_drop_hdrtext from singlelineedit within w_pat_assmts_updates
end type
type sle_drag_from_hdrtext from singlelineedit within w_pat_assmts_updates
end type
type st_39 from statictext within w_pat_assmts_updates
end type
type st_38 from statictext within w_pat_assmts_updates
end type
type sle_dragwithin_row from singlelineedit within w_pat_assmts_updates
end type
type st_37 from statictext within w_pat_assmts_updates
end type
type sle_dragwithin_header from singlelineedit within w_pat_assmts_updates
end type
type st_34 from statictext within w_pat_assmts_updates
end type
type sle_dragwithin_text from singlelineedit within w_pat_assmts_updates
end type
type st_33 from statictext within w_pat_assmts_updates
end type
type sle_dragwithin_empno from singlelineedit within w_pat_assmts_updates
end type
type st_32 from statictext within w_pat_assmts_updates
end type
type sle_mm_object from singlelineedit within w_pat_assmts_updates
end type
type st_31 from statictext within w_pat_assmts_updates
end type
type sle_mm_dwo from singlelineedit within w_pat_assmts_updates
end type
type sle_mm_row from singlelineedit within w_pat_assmts_updates
end type
type st_30 from statictext within w_pat_assmts_updates
end type
type st_29 from statictext within w_pat_assmts_updates
end type
type st_28 from statictext within w_pat_assmts_updates
end type
type sle_mm_xpos from singlelineedit within w_pat_assmts_updates
end type
type sle_mm_ypos from singlelineedit within w_pat_assmts_updates
end type
type sle_drag_drop_empname from singlelineedit within w_pat_assmts_updates
end type
type st_27 from statictext within w_pat_assmts_updates
end type
type st_26 from statictext within w_pat_assmts_updates
end type
type sle_drag_from_empname from singlelineedit within w_pat_assmts_updates
end type
type sle_is_dragging from singlelineedit within w_pat_assmts_updates
end type
type st_25 from statictext within w_pat_assmts_updates
end type
type pb_cancel_dragdrop from picturebutton within w_pat_assmts_updates
end type
type sle_drag_within_row from singlelineedit within w_pat_assmts_updates
end type
type st_21 from statictext within w_pat_assmts_updates
end type
type st_20 from statictext within w_pat_assmts_updates
end type
type sle_drag_within_object from singlelineedit within w_pat_assmts_updates
end type
type sle_drag_within_callnum from singlelineedit within w_pat_assmts_updates
end type
type sle_drag_within_empno from singlelineedit within w_pat_assmts_updates
end type
type sle_drag_within_grpid from singlelineedit within w_pat_assmts_updates
end type
type st_19 from statictext within w_pat_assmts_updates
end type
type st_18 from statictext within w_pat_assmts_updates
end type
type st_17 from statictext within w_pat_assmts_updates
end type
type st_16 from statictext within w_pat_assmts_updates
end type
type st_15 from statictext within w_pat_assmts_updates
end type
type st_14 from statictext within w_pat_assmts_updates
end type
type sle_mmw_ypos from singlelineedit within w_pat_assmts_updates
end type
type sle_mmw_xpos from singlelineedit within w_pat_assmts_updates
end type
type st_13 from statictext within w_pat_assmts_updates
end type
type st_12 from statictext within w_pat_assmts_updates
end type
type st_11 from statictext within w_pat_assmts_updates
end type
type st_10 from statictext within w_pat_assmts_updates
end type
type st_7 from statictext within w_pat_assmts_updates
end type
type sle_drag_drop_grpid from singlelineedit within w_pat_assmts_updates
end type
type sle_drag_drop_empno from singlelineedit within w_pat_assmts_updates
end type
type sle_drag_drop_callnum from singlelineedit within w_pat_assmts_updates
end type
type sle_drag_drop_object from singlelineedit within w_pat_assmts_updates
end type
type st_6 from statictext within w_pat_assmts_updates
end type
type st_5 from statictext within w_pat_assmts_updates
end type
type sle_drag_drop_row from singlelineedit within w_pat_assmts_updates
end type
type sle_drag_from_row from singlelineedit within w_pat_assmts_updates
end type
type st_9 from statictext within w_pat_assmts_updates
end type
type st_8 from statictext within w_pat_assmts_updates
end type
type sle_drag_from_object from singlelineedit within w_pat_assmts_updates
end type
type sle_drag_from_callnum from singlelineedit within w_pat_assmts_updates
end type
type sle_drag_from_empno from singlelineedit within w_pat_assmts_updates
end type
type sle_drag_from_grpid from singlelineedit within w_pat_assmts_updates
end type
type st_4 from statictext within w_pat_assmts_updates
end type
type st_3 from statictext within w_pat_assmts_updates
end type
type st_2 from statictext within w_pat_assmts_updates
end type
type dw_lt_scc from datawindow within w_pat_assmts_updates
end type
type dw_lt_teamvine from datawindow within w_pat_assmts_updates
end type
type dw_lt_teamem from datawindow within w_pat_assmts_updates
end type
type dw_lt_fto from datawindow within w_pat_assmts_updates
end type
type dw_lt_teamabcd from datawindow within w_pat_assmts_updates
end type
type dw_c from datawindow within w_pat_assmts_updates
end type
type dw_b from datawindow within w_pat_assmts_updates
end type
type dw_a from datawindow within w_pat_assmts_updates
end type
type pb_14 from picturebutton within w_pat_assmts_updates
end type
type st_1 from statictext within w_pat_assmts_updates
end type
type ln_1 from line within w_pat_assmts_updates
end type
type ln_2 from line within w_pat_assmts_updates
end type
type ln_3 from line within w_pat_assmts_updates
end type
type ln_4 from line within w_pat_assmts_updates
end type
type ln_5 from line within w_pat_assmts_updates
end type
type ln_6 from line within w_pat_assmts_updates
end type
type ln_7 from line within w_pat_assmts_updates
end type
type ln_8 from line within w_pat_assmts_updates
end type
type ln_9 from line within w_pat_assmts_updates
end type
type ln_12 from line within w_pat_assmts_updates
end type
type ln_13 from line within w_pat_assmts_updates
end type
type ln_14 from line within w_pat_assmts_updates
end type
type ln_15 from line within w_pat_assmts_updates
end type
type ln_16 from line within w_pat_assmts_updates
end type
type ln_17 from line within w_pat_assmts_updates
end type
type ln_18 from line within w_pat_assmts_updates
end type
type ln_19 from line within w_pat_assmts_updates
end type
type ln_20 from line within w_pat_assmts_updates
end type
type ln_21 from line within w_pat_assmts_updates
end type
type ln_10 from line within w_pat_assmts_updates
end type
type ln_11 from line within w_pat_assmts_updates
end type
type r_1 from rectangle within w_pat_assmts_updates
end type
end forward

global type w_pat_assmts_updates from window
integer width = 6784
integer height = 4356
boolean titlebar = true
string title = "Patrol Assignements Updating"
boolean controlmenu = true
boolean minbox = true
boolean maxbox = true
boolean hscrollbar = true
boolean vscrollbar = true
boolean resizable = true
long backcolor = 67108864
string icon = "AppIcon!"
boolean clientedge = true
boolean center = true
st_dbconnection st_dbconnection
dw_ltrec12 dw_ltrec12
dw_chiefs dw_chiefs
dw_supervisors dw_supervisors
dw_admin dw_admin
lb_orderby_bak lb_orderby_bak
st_48 st_48
dw_unfilled dw_unfilled
sle_refresh_grpids sle_refresh_grpids
pb_restore_backup pb_restore_backup
st_db_identity st_db_identity
lb_devel lb_devel
lb_col_xref lb_col_xref
sle_case_num sle_case_num
st_47 st_47
pb_help pb_help
dw_unassigned dw_unassigned
dw_team_resvrs dw_team_resvrs
dw_fto dw_fto
dw_smcont dw_smcont
dw_vine dw_vine
dw_emsro dw_emsro
dw_em2 dw_em2
dw_em1 dw_em1
dw_rec2 dw_rec2
st_46 st_46
dw_rec1 dw_rec1
dw_testrec1 dw_testrec1
dw_d dw_d
sle_num_specs sle_num_specs
dw_lay_specs dw_lay_specs
pb_refresh pb_refresh
sle_drag_drop_col sle_drag_drop_col
st_45 st_45
st_44 st_44
sle_drag_from_col sle_drag_from_col
dw_lt_reserves dw_lt_reserves
sle_drag_to_positionid sle_drag_to_positionid
st_43 st_43
sle_drag_from_positionid sle_drag_from_positionid
st_42 st_42
st_41 st_41
sle_drag_from_control sle_drag_from_control
st_36 st_36
sle_icon_filenanme sle_icon_filenanme
sle_drag_drop_mode sle_drag_drop_mode
st_35 st_35
st_24 st_24
sle_dragdrop_rowcount sle_dragdrop_rowcount
st_23 st_23
sle_num_avail_positions sle_num_avail_positions
st_22 st_22
lb_1 lb_1
st_40 st_40
sle_drag_drop_hdrtext sle_drag_drop_hdrtext
sle_drag_from_hdrtext sle_drag_from_hdrtext
st_39 st_39
st_38 st_38
sle_dragwithin_row sle_dragwithin_row
st_37 st_37
sle_dragwithin_header sle_dragwithin_header
st_34 st_34
sle_dragwithin_text sle_dragwithin_text
st_33 st_33
sle_dragwithin_empno sle_dragwithin_empno
st_32 st_32
sle_mm_object sle_mm_object
st_31 st_31
sle_mm_dwo sle_mm_dwo
sle_mm_row sle_mm_row
st_30 st_30
st_29 st_29
st_28 st_28
sle_mm_xpos sle_mm_xpos
sle_mm_ypos sle_mm_ypos
sle_drag_drop_empname sle_drag_drop_empname
st_27 st_27
st_26 st_26
sle_drag_from_empname sle_drag_from_empname
sle_is_dragging sle_is_dragging
st_25 st_25
pb_cancel_dragdrop pb_cancel_dragdrop
sle_drag_within_row sle_drag_within_row
st_21 st_21
st_20 st_20
sle_drag_within_object sle_drag_within_object
sle_drag_within_callnum sle_drag_within_callnum
sle_drag_within_empno sle_drag_within_empno
sle_drag_within_grpid sle_drag_within_grpid
st_19 st_19
st_18 st_18
st_17 st_17
st_16 st_16
st_15 st_15
st_14 st_14
sle_mmw_ypos sle_mmw_ypos
sle_mmw_xpos sle_mmw_xpos
st_13 st_13
st_12 st_12
st_11 st_11
st_10 st_10
st_7 st_7
sle_drag_drop_grpid sle_drag_drop_grpid
sle_drag_drop_empno sle_drag_drop_empno
sle_drag_drop_callnum sle_drag_drop_callnum
sle_drag_drop_object sle_drag_drop_object
st_6 st_6
st_5 st_5
sle_drag_drop_row sle_drag_drop_row
sle_drag_from_row sle_drag_from_row
st_9 st_9
st_8 st_8
sle_drag_from_object sle_drag_from_object
sle_drag_from_callnum sle_drag_from_callnum
sle_drag_from_empno sle_drag_from_empno
sle_drag_from_grpid sle_drag_from_grpid
st_4 st_4
st_3 st_3
st_2 st_2
dw_lt_scc dw_lt_scc
dw_lt_teamvine dw_lt_teamvine
dw_lt_teamem dw_lt_teamem
dw_lt_fto dw_lt_fto
dw_lt_teamabcd dw_lt_teamabcd
dw_c dw_c
dw_b dw_b
dw_a dw_a
pb_14 pb_14
st_1 st_1
ln_1 ln_1
ln_2 ln_2
ln_3 ln_3
ln_4 ln_4
ln_5 ln_5
ln_6 ln_6
ln_7 ln_7
ln_8 ln_8
ln_9 ln_9
ln_12 ln_12
ln_13 ln_13
ln_14 ln_14
ln_15 ln_15
ln_16 ln_16
ln_17 ln_17
ln_18 ln_18
ln_19 ln_19
ln_20 ln_20
ln_21 ln_21
ln_10 ln_10
ln_11 ln_11
r_1 r_1
end type
global w_pat_assmts_updates w_pat_assmts_updates

type variables
boolean bIsDragging

pointer oldpointer 

end variables

on w_pat_assmts_updates.create
this.st_dbconnection=create st_dbconnection
this.dw_ltrec12=create dw_ltrec12
this.dw_chiefs=create dw_chiefs
this.dw_supervisors=create dw_supervisors
this.dw_admin=create dw_admin
this.lb_orderby_bak=create lb_orderby_bak
this.st_48=create st_48
this.dw_unfilled=create dw_unfilled
this.sle_refresh_grpids=create sle_refresh_grpids
this.pb_restore_backup=create pb_restore_backup
this.st_db_identity=create st_db_identity
this.lb_devel=create lb_devel
this.lb_col_xref=create lb_col_xref
this.sle_case_num=create sle_case_num
this.st_47=create st_47
this.pb_help=create pb_help
this.dw_unassigned=create dw_unassigned
this.dw_team_resvrs=create dw_team_resvrs
this.dw_fto=create dw_fto
this.dw_smcont=create dw_smcont
this.dw_vine=create dw_vine
this.dw_emsro=create dw_emsro
this.dw_em2=create dw_em2
this.dw_em1=create dw_em1
this.dw_rec2=create dw_rec2
this.st_46=create st_46
this.dw_rec1=create dw_rec1
this.dw_testrec1=create dw_testrec1
this.dw_d=create dw_d
this.sle_num_specs=create sle_num_specs
this.dw_lay_specs=create dw_lay_specs
this.pb_refresh=create pb_refresh
this.sle_drag_drop_col=create sle_drag_drop_col
this.st_45=create st_45
this.st_44=create st_44
this.sle_drag_from_col=create sle_drag_from_col
this.dw_lt_reserves=create dw_lt_reserves
this.sle_drag_to_positionid=create sle_drag_to_positionid
this.st_43=create st_43
this.sle_drag_from_positionid=create sle_drag_from_positionid
this.st_42=create st_42
this.st_41=create st_41
this.sle_drag_from_control=create sle_drag_from_control
this.st_36=create st_36
this.sle_icon_filenanme=create sle_icon_filenanme
this.sle_drag_drop_mode=create sle_drag_drop_mode
this.st_35=create st_35
this.st_24=create st_24
this.sle_dragdrop_rowcount=create sle_dragdrop_rowcount
this.st_23=create st_23
this.sle_num_avail_positions=create sle_num_avail_positions
this.st_22=create st_22
this.lb_1=create lb_1
this.st_40=create st_40
this.sle_drag_drop_hdrtext=create sle_drag_drop_hdrtext
this.sle_drag_from_hdrtext=create sle_drag_from_hdrtext
this.st_39=create st_39
this.st_38=create st_38
this.sle_dragwithin_row=create sle_dragwithin_row
this.st_37=create st_37
this.sle_dragwithin_header=create sle_dragwithin_header
this.st_34=create st_34
this.sle_dragwithin_text=create sle_dragwithin_text
this.st_33=create st_33
this.sle_dragwithin_empno=create sle_dragwithin_empno
this.st_32=create st_32
this.sle_mm_object=create sle_mm_object
this.st_31=create st_31
this.sle_mm_dwo=create sle_mm_dwo
this.sle_mm_row=create sle_mm_row
this.st_30=create st_30
this.st_29=create st_29
this.st_28=create st_28
this.sle_mm_xpos=create sle_mm_xpos
this.sle_mm_ypos=create sle_mm_ypos
this.sle_drag_drop_empname=create sle_drag_drop_empname
this.st_27=create st_27
this.st_26=create st_26
this.sle_drag_from_empname=create sle_drag_from_empname
this.sle_is_dragging=create sle_is_dragging
this.st_25=create st_25
this.pb_cancel_dragdrop=create pb_cancel_dragdrop
this.sle_drag_within_row=create sle_drag_within_row
this.st_21=create st_21
this.st_20=create st_20
this.sle_drag_within_object=create sle_drag_within_object
this.sle_drag_within_callnum=create sle_drag_within_callnum
this.sle_drag_within_empno=create sle_drag_within_empno
this.sle_drag_within_grpid=create sle_drag_within_grpid
this.st_19=create st_19
this.st_18=create st_18
this.st_17=create st_17
this.st_16=create st_16
this.st_15=create st_15
this.st_14=create st_14
this.sle_mmw_ypos=create sle_mmw_ypos
this.sle_mmw_xpos=create sle_mmw_xpos
this.st_13=create st_13
this.st_12=create st_12
this.st_11=create st_11
this.st_10=create st_10
this.st_7=create st_7
this.sle_drag_drop_grpid=create sle_drag_drop_grpid
this.sle_drag_drop_empno=create sle_drag_drop_empno
this.sle_drag_drop_callnum=create sle_drag_drop_callnum
this.sle_drag_drop_object=create sle_drag_drop_object
this.st_6=create st_6
this.st_5=create st_5
this.sle_drag_drop_row=create sle_drag_drop_row
this.sle_drag_from_row=create sle_drag_from_row
this.st_9=create st_9
this.st_8=create st_8
this.sle_drag_from_object=create sle_drag_from_object
this.sle_drag_from_callnum=create sle_drag_from_callnum
this.sle_drag_from_empno=create sle_drag_from_empno
this.sle_drag_from_grpid=create sle_drag_from_grpid
this.st_4=create st_4
this.st_3=create st_3
this.st_2=create st_2
this.dw_lt_scc=create dw_lt_scc
this.dw_lt_teamvine=create dw_lt_teamvine
this.dw_lt_teamem=create dw_lt_teamem
this.dw_lt_fto=create dw_lt_fto
this.dw_lt_teamabcd=create dw_lt_teamabcd
this.dw_c=create dw_c
this.dw_b=create dw_b
this.dw_a=create dw_a
this.pb_14=create pb_14
this.st_1=create st_1
this.ln_1=create ln_1
this.ln_2=create ln_2
this.ln_3=create ln_3
this.ln_4=create ln_4
this.ln_5=create ln_5
this.ln_6=create ln_6
this.ln_7=create ln_7
this.ln_8=create ln_8
this.ln_9=create ln_9
this.ln_12=create ln_12
this.ln_13=create ln_13
this.ln_14=create ln_14
this.ln_15=create ln_15
this.ln_16=create ln_16
this.ln_17=create ln_17
this.ln_18=create ln_18
this.ln_19=create ln_19
this.ln_20=create ln_20
this.ln_21=create ln_21
this.ln_10=create ln_10
this.ln_11=create ln_11
this.r_1=create r_1
this.Control[]={this.st_dbconnection,&
this.dw_ltrec12,&
this.dw_chiefs,&
this.dw_supervisors,&
this.dw_admin,&
this.lb_orderby_bak,&
this.st_48,&
this.dw_unfilled,&
this.sle_refresh_grpids,&
this.pb_restore_backup,&
this.st_db_identity,&
this.lb_devel,&
this.lb_col_xref,&
this.sle_case_num,&
this.st_47,&
this.pb_help,&
this.dw_unassigned,&
this.dw_team_resvrs,&
this.dw_fto,&
this.dw_smcont,&
this.dw_vine,&
this.dw_emsro,&
this.dw_em2,&
this.dw_em1,&
this.dw_rec2,&
this.st_46,&
this.dw_rec1,&
this.dw_testrec1,&
this.dw_d,&
this.sle_num_specs,&
this.dw_lay_specs,&
this.pb_refresh,&
this.sle_drag_drop_col,&
this.st_45,&
this.st_44,&
this.sle_drag_from_col,&
this.dw_lt_reserves,&
this.sle_drag_to_positionid,&
this.st_43,&
this.sle_drag_from_positionid,&
this.st_42,&
this.st_41,&
this.sle_drag_from_control,&
this.st_36,&
this.sle_icon_filenanme,&
this.sle_drag_drop_mode,&
this.st_35,&
this.st_24,&
this.sle_dragdrop_rowcount,&
this.st_23,&
this.sle_num_avail_positions,&
this.st_22,&
this.lb_1,&
this.st_40,&
this.sle_drag_drop_hdrtext,&
this.sle_drag_from_hdrtext,&
this.st_39,&
this.st_38,&
this.sle_dragwithin_row,&
this.st_37,&
this.sle_dragwithin_header,&
this.st_34,&
this.sle_dragwithin_text,&
this.st_33,&
this.sle_dragwithin_empno,&
this.st_32,&
this.sle_mm_object,&
this.st_31,&
this.sle_mm_dwo,&
this.sle_mm_row,&
this.st_30,&
this.st_29,&
this.st_28,&
this.sle_mm_xpos,&
this.sle_mm_ypos,&
this.sle_drag_drop_empname,&
this.st_27,&
this.st_26,&
this.sle_drag_from_empname,&
this.sle_is_dragging,&
this.st_25,&
this.pb_cancel_dragdrop,&
this.sle_drag_within_row,&
this.st_21,&
this.st_20,&
this.sle_drag_within_object,&
this.sle_drag_within_callnum,&
this.sle_drag_within_empno,&
this.sle_drag_within_grpid,&
this.st_19,&
this.st_18,&
this.st_17,&
this.st_16,&
this.st_15,&
this.st_14,&
this.sle_mmw_ypos,&
this.sle_mmw_xpos,&
this.st_13,&
this.st_12,&
this.st_11,&
this.st_10,&
this.st_7,&
this.sle_drag_drop_grpid,&
this.sle_drag_drop_empno,&
this.sle_drag_drop_callnum,&
this.sle_drag_drop_object,&
this.st_6,&
this.st_5,&
this.sle_drag_drop_row,&
this.sle_drag_from_row,&
this.st_9,&
this.st_8,&
this.sle_drag_from_object,&
this.sle_drag_from_callnum,&
this.sle_drag_from_empno,&
this.sle_drag_from_grpid,&
this.st_4,&
this.st_3,&
this.st_2,&
this.dw_lt_scc,&
this.dw_lt_teamvine,&
this.dw_lt_teamem,&
this.dw_lt_fto,&
this.dw_lt_teamabcd,&
this.dw_c,&
this.dw_b,&
this.dw_a,&
this.pb_14,&
this.st_1,&
this.ln_1,&
this.ln_2,&
this.ln_3,&
this.ln_4,&
this.ln_5,&
this.ln_6,&
this.ln_7,&
this.ln_8,&
this.ln_9,&
this.ln_12,&
this.ln_13,&
this.ln_14,&
this.ln_15,&
this.ln_16,&
this.ln_17,&
this.ln_18,&
this.ln_19,&
this.ln_20,&
this.ln_21,&
this.ln_10,&
this.ln_11,&
this.r_1}
end on

on w_pat_assmts_updates.destroy
destroy(this.st_dbconnection)
destroy(this.dw_ltrec12)
destroy(this.dw_chiefs)
destroy(this.dw_supervisors)
destroy(this.dw_admin)
destroy(this.lb_orderby_bak)
destroy(this.st_48)
destroy(this.dw_unfilled)
destroy(this.sle_refresh_grpids)
destroy(this.pb_restore_backup)
destroy(this.st_db_identity)
destroy(this.lb_devel)
destroy(this.lb_col_xref)
destroy(this.sle_case_num)
destroy(this.st_47)
destroy(this.pb_help)
destroy(this.dw_unassigned)
destroy(this.dw_team_resvrs)
destroy(this.dw_fto)
destroy(this.dw_smcont)
destroy(this.dw_vine)
destroy(this.dw_emsro)
destroy(this.dw_em2)
destroy(this.dw_em1)
destroy(this.dw_rec2)
destroy(this.st_46)
destroy(this.dw_rec1)
destroy(this.dw_testrec1)
destroy(this.dw_d)
destroy(this.sle_num_specs)
destroy(this.dw_lay_specs)
destroy(this.pb_refresh)
destroy(this.sle_drag_drop_col)
destroy(this.st_45)
destroy(this.st_44)
destroy(this.sle_drag_from_col)
destroy(this.dw_lt_reserves)
destroy(this.sle_drag_to_positionid)
destroy(this.st_43)
destroy(this.sle_drag_from_positionid)
destroy(this.st_42)
destroy(this.st_41)
destroy(this.sle_drag_from_control)
destroy(this.st_36)
destroy(this.sle_icon_filenanme)
destroy(this.sle_drag_drop_mode)
destroy(this.st_35)
destroy(this.st_24)
destroy(this.sle_dragdrop_rowcount)
destroy(this.st_23)
destroy(this.sle_num_avail_positions)
destroy(this.st_22)
destroy(this.lb_1)
destroy(this.st_40)
destroy(this.sle_drag_drop_hdrtext)
destroy(this.sle_drag_from_hdrtext)
destroy(this.st_39)
destroy(this.st_38)
destroy(this.sle_dragwithin_row)
destroy(this.st_37)
destroy(this.sle_dragwithin_header)
destroy(this.st_34)
destroy(this.sle_dragwithin_text)
destroy(this.st_33)
destroy(this.sle_dragwithin_empno)
destroy(this.st_32)
destroy(this.sle_mm_object)
destroy(this.st_31)
destroy(this.sle_mm_dwo)
destroy(this.sle_mm_row)
destroy(this.st_30)
destroy(this.st_29)
destroy(this.st_28)
destroy(this.sle_mm_xpos)
destroy(this.sle_mm_ypos)
destroy(this.sle_drag_drop_empname)
destroy(this.st_27)
destroy(this.st_26)
destroy(this.sle_drag_from_empname)
destroy(this.sle_is_dragging)
destroy(this.st_25)
destroy(this.pb_cancel_dragdrop)
destroy(this.sle_drag_within_row)
destroy(this.st_21)
destroy(this.st_20)
destroy(this.sle_drag_within_object)
destroy(this.sle_drag_within_callnum)
destroy(this.sle_drag_within_empno)
destroy(this.sle_drag_within_grpid)
destroy(this.st_19)
destroy(this.st_18)
destroy(this.st_17)
destroy(this.st_16)
destroy(this.st_15)
destroy(this.st_14)
destroy(this.sle_mmw_ypos)
destroy(this.sle_mmw_xpos)
destroy(this.st_13)
destroy(this.st_12)
destroy(this.st_11)
destroy(this.st_10)
destroy(this.st_7)
destroy(this.sle_drag_drop_grpid)
destroy(this.sle_drag_drop_empno)
destroy(this.sle_drag_drop_callnum)
destroy(this.sle_drag_drop_object)
destroy(this.st_6)
destroy(this.st_5)
destroy(this.sle_drag_drop_row)
destroy(this.sle_drag_from_row)
destroy(this.st_9)
destroy(this.st_8)
destroy(this.sle_drag_from_object)
destroy(this.sle_drag_from_callnum)
destroy(this.sle_drag_from_empno)
destroy(this.sle_drag_from_grpid)
destroy(this.st_4)
destroy(this.st_3)
destroy(this.st_2)
destroy(this.dw_lt_scc)
destroy(this.dw_lt_teamvine)
destroy(this.dw_lt_teamem)
destroy(this.dw_lt_fto)
destroy(this.dw_lt_teamabcd)
destroy(this.dw_c)
destroy(this.dw_b)
destroy(this.dw_a)
destroy(this.pb_14)
destroy(this.st_1)
destroy(this.ln_1)
destroy(this.ln_2)
destroy(this.ln_3)
destroy(this.ln_4)
destroy(this.ln_5)
destroy(this.ln_6)
destroy(this.ln_7)
destroy(this.ln_8)
destroy(this.ln_9)
destroy(this.ln_12)
destroy(this.ln_13)
destroy(this.ln_14)
destroy(this.ln_15)
destroy(this.ln_16)
destroy(this.ln_17)
destroy(this.ln_18)
destroy(this.ln_19)
destroy(this.ln_20)
destroy(this.ln_21)
destroy(this.ln_10)
destroy(this.ln_11)
destroy(this.r_1)
end on

event open;long ll_num_retrieved
long ll_num_inactive_group_employees

ll_num_retrieved = 0
dw_a.settransobject(sqlca)
ll_num_retrieved = dw_a.Retrieve(1)

dw_b.settransobject(sqlca)
dw_b.Retrieve(2)

dw_c.settransobject(sqlca)
ll_num_retrieved = 0
ll_num_retrieved = dw_c.Retrieve(3)

dw_d.settransobject(sqlca)
dw_d.Retrieve(4)

dw_rec1.settransobject(sqlca)
dw_rec1.Retrieve(5)

dw_rec2.settransobject(sqlca)
dw_rec2.Retrieve(6)

dw_em1.settransobject(sqlca)
dw_em1.Retrieve(8)

dw_em2.settransobject(sqlca)
dw_em2.Retrieve(9)

dw_emsro.settransobject(sqlca)
dw_emsro.Retrieve(10)

dw_vine.settransobject(sqlca)
dw_vine.Retrieve(11)

dw_smcont.settransobject(sqlca)
dw_smcont.Retrieve(12)

dw_fto.settransobject(sqlca)
ll_num_retrieved = dw_fto.Retrieve(52)
if(ll_num_retrieved = 0) then
	dw_fto.insertrow(0)
	dw_fto.setitem(1, "grpteamid", "FTO {52}")
end if

dw_team_resvrs.settransobject(sqlca);
dw_team_resvrs.Retrieve(129)

if(gs_winuser = "MIKEJ") then
	dw_unassigned.settransobject(sqlca);
	ll_num_retrieved = 0
	ll_num_retrieved = dw_unassigned.Retrieve(131)
	if(ll_num_retrieved = 0) then
		dw_unassigned.insertrow(0)
		dw_unassigned.setitem(1, "grpteamid", "UNASSIGNED {131}")
		//below code will clear out header text and row 1 contents
		//ll_num_inactive_group_employees = 0
		////
		//select count(*) into :ll_num_inactive_group_employees from sns_board_specs_others where grpid = 131 and empname is null and empno = 0 using sqlca;
		////
		//if(ll_num_inactive_group_employees >= 12) then
		//	dw_unassigned.deleterow(1)
		//end if
	end if
end if
dw_chiefs.settransobject(sqlca)
ll_num_retrieved = 0
ll_num_retrieved = dw_chiefs.Retrieve(116)
if(ll_num_retrieved = 0) then
	//dw_chiefs.insertrow(0)
	dw_chiefs.setitem(1, "grpteamid", "CHIEF DEPUTIES {116}")
end if

dw_unfilled.settransobject(sqlca)
ll_num_retrieved = 0
ll_num_retrieved = dw_unfilled.Retrieve(128)
if(ll_num_retrieved = 0) then
	dw_unfilled.insertrow(0)
	dw_unfilled.setitem(1, "grpteamid", "UNFILLED {128}")
	//below code will clear out header text and row 1 contents
	//ll_num_inactive_group_employees = 0
	////
	//select count(*) into :ll_num_inactive_group_employees from sns_board_specs_others where grpid = 128 and empname is null and empno = 0 using sqlca;
	////
	//if(ll_num_inactive_group_employees >= 12) then
	//	dw_unfilled.deleterow(1)
	//end if
end if

dw_supervisors.settransobject(sqlca);
ll_num_retrieved = 0
ll_num_retrieved = dw_supervisors.Retrieve(64)
if(ll_num_retrieved = 0) then
	dw_supervisors.insertrow(0)
	dw_supervisors.setitem(1, "grpteamid", "SUPERVISORS {64}")
end if

dw_admin.settransobject(sqlca);
ll_num_retrieved = 0
ll_num_retrieved = dw_admin.Retrieve(63)
if(ll_num_retrieved = 0) then
	dw_admin.insertrow(0)
	dw_admin.setitem(1, "grpteamid", "ADMINISTRATION {63}")
end if

//dw_lt_teamabcd.settransobject(sqlca)
//dw_lt_teamabcd.Retrieve(1)
//
//dw_lt_scc.settransobject(sqlca)
//dw_lt_scc.Retrieve(12)
//dw_ltrec12.settransobject(sqlca)
//dw_ltrec12.Retrieve(5)
//dw_lt_teamem.settransobject(sqlca);
//dw_lt_teamem.Retrieve(8)
//dw_lt_teamvine.settransobject(sqlca);
//dw_lt_teamvine.Retrieve(11)
//
//dw_lt_reserves.settransobject(sqlca)
//dw_lt_reserves.Retrieve(129)
//
dw_lay_specs.settransobject(sqlca);
ll_num_retrieved = 0
ll_num_retrieved = f_populate_dw_lay_specs(ref dw_lay_specs, "PATROL", ref sqlca)
sle_num_specs.text = string(ll_num_retrieved)
//
string ls_dbidentity
ls_dbidentity = f_get_db_identity(ref sqlca)
st_db_identity.text = ls_dbidentity

if(gs_winuser = "MIKEJ") then
	pb_restore_backup.visible = true
else
	pb_restore_backup.visible = false
end if

st_dbconnection.text = gs_dbconnection

bIsDragging = false
end event

event mousemove;sle_mmw_xpos.text = string(xpos)
sle_mmw_ypos.text = string(ypos)

end event

type st_dbconnection from statictext within w_pat_assmts_updates
integer x = 6231
integer width = 402
integer height = 64
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 16711680
long backcolor = 67108864
boolean focusrectangle = false
end type

type dw_ltrec12 from datawindow within w_pat_assmts_updates
integer x = 5015
integer y = 128
integer width = 1006
integer height = 104
integer taborder = 30
string title = "none"
string dataobject = "dw_team_lt"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event doubleclicked;//change supervisor
long ll_row 
ll_row = row
string ls_dwoname
ls_dwoname = dwo.name
if((ls_dwoname = "sns_employees_empname") or (ls_dwoname = "datawindow")) then
	//select lieutenant
	string ls_messageparm
	ls_messageparm = "116,64"
	OpenWithParm(w_add_lt, ls_messageparm)
	string ls_selected_username
	ls_selected_username = Message.StringParm //ie: WILLES-DOUGLAS      [14480]
	if(f_len_ext(ls_selected_username) > 0) then
		string ls_empno 
		ls_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
		long ll_empno
		ll_empno = f_stol(ls_empno)
		if(ll_empno > 0) then
			string ls_callnum
			string ls_empname
			integer li_pos
			li_pos = pos(ls_selected_username, "[")
			if(li_pos > 0) then
				ls_empname = trim(mid(ls_selected_username, 1, (li_pos - 1)))
			end if
			ls_callnum = ""
			//
			select callnum into :ls_callnum from sns_staffing_grps_positions2 where assgnd_empno = :ll_empno using sqlca;
			//
			if(IsNull(ls_callnum) = true) then
				ls_callnum = ""
			end if
			dw_ltrec12.setitem(ll_row, "sns_employees_empname", ls_empname)
			dw_ltrec12.setitem(ll_row, "sns_staffing_grps_positions2_callnum", ls_callnum)
			//
			update sns_bd_others_layout_specs
			set assgnd_lt = :ll_empno
			where grpid in (5,6)
			using sqlca;
			//
			if(sqlca.sqlcode <> -1) then
				//
				commit using sqlca;
				//
				dw_ltrec12.Retrieve(5)
			else
				//
				rollback using sqlca;
				//
			end if
		end if
	end if			
end if

end event

type dw_chiefs from datawindow within w_pat_assmts_updates
integer x = 2112
integer y = 2824
integer width = 1079
integer height = 428
integer taborder = 150
string title = "none"
string dataobject = "dw_team_template"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 116
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 116
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = dw_chiefs //(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;//if(bIsDragging = true) then
//	integer li_stop
//	sle_drag_drop_row.text = string(row)
//	//=======================
//	long ll_dragdrop_grpid
//	ll_dragdrop_grpid = 116
//	//=======================
//	datawindow dw_to_object
//	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
//	datawindow dw_from_object
//	long ll_from_grpid
//	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
//	if(ll_from_grpid > 0) then	
//		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
//	end if
//	datawindow dw_unassigned_object
//	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
//	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
//		string ls_errors
//		string ls_drag_from_positionid
//		string ls_dwo_name
//		long ll_to_grpid
//		string ls_grpid		
//		string ls_empname
//		long ll_empno
//		string ls_callnum
//		long ll_row_count
//		long ll_num_avail_positions
//		integer li_to_grow
//		integer li_to_gcol	
//		string ls_from_hdrtext
//		string ls_from_empname
//		long ll_from_row
//		string ls_to_hdrtext
//		string ls_to_empname
//		long ll_to_row
//		string ls_mode
//		long ll_from_empno
//		long ll_to_empno
//		long ll_to_rowcount
//		string ls_from_text
//		long ll_from_pos_id
//		long ll_from_xrefid
//		string ls_from_positionid
//		long ll_to_pos_id
//		long ll_to_xrefid
//		string ls_to_positionid
//		string ls_jobcode
//		string ls_jobtitle
//		string ls_funddept
//		string ls_addinfo
//		string ls_vehnum
//		integer li_rtn_value
//		string ls_error
//		string ls_groupname
//		integer li_case_num
//		integer li_active
//		integer li_issuper
//		integer li_isunfilled
//		integer li_pos2idshort
//		string ls_status
//		long ll_pid
//		integer li_remins_rtn
//		string ls_row
//		string ls_col
//		string ls_icon_name
//		string ls_sqlerrtext
//		string ls_from_callnum
//		integer li_commit_status
//		integer li_num_dup_callnums
//		ls_errors = ""
//		ls_icon_name = sle_icon_filenanme.text 		
//		li_remins_rtn = 0
//		ll_pid = 0
//		//---------------------------------
//		ls_dwo_name = ""
//		ll_to_grpid = 0
//		ls_grpid = ""
//		ls_empname = ""
//		ll_empno = 0
//		ls_callnum = ""
//		ll_row_count = 0
//		ll_num_avail_positions = 0
//		li_to_grow = 0
//		li_to_gcol = 0
//		ls_row = ""
//		ls_col = ""
//		ls_from_callnum = ""
//		//---------------------------------
//		ls_from_callnum = sle_drag_from_callnum.text
//		ls_dwo_name = upper(dwo.name)
//		ls_drag_from_positionid = ""
//		ls_drag_from_positionid = sle_drag_from_positionid.text
//		string ls_hdrtext
//		if(row = 0) then
//			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
//		else
//			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
//		end if
//		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
//		ll_to_grpid = f_stol(ls_grpid)		
//		string ls_dragfrom_hdrtext
//		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
//		sle_drag_drop_hdrtext.text = ls_hdrtext
//		sle_drag_drop_object.text = ls_dwo_name
//		sle_drag_drop_grpid.text = string(ll_to_grpid)
//		ll_row_count = dw_to_object.rowcount()			
//		sle_dragdrop_rowcount.text = string(ll_row_count)	
//		if(ll_to_grpid > 0) then
//			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
//			//
//			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
//			//
//			sle_num_avail_positions.text = string(ll_num_avail_positions)
//		end if		
//		sle_drag_drop_row.text = string(row)
//		sle_drag_drop_col.text = string(li_to_gcol)
////		if(ls_hdrtext = ls_dragfrom_hdrtext) then
////			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
////				//just display info and cancel drag
////				sle_drag_drop_empname.text = "INSERT"
////				dw_to_object.Drag(Cancel!)
////				bIsDragging = false		
////				sle_is_dragging.text = string(bIsDragging)				
////			else
////				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
////			end if
////		else
//			ll_empno = 0
//			ll_to_grpid = 0	
//			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
//			if(row > 0) then
//				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
//				sle_drag_drop_empname.text = ls_empname		
//				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
//				sle_drag_drop_callnum.text = ls_callnum				
//				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
//				sle_drag_drop_empno.text = string(ll_empno)
//				if(ll_empno > 0) then
//				end if //ll_empno > 0
//			else
//				sle_drag_drop_empname.text = "INSERT"
//				sle_drag_drop_empno.text = string(ll_empno)
//			end if
//			dw_to_object.Drag(Cancel!)
//			bIsDragging = false	
//			//
//			ls_from_hdrtext = ""
//			ls_from_empname = ""
//			ll_from_row = 0
//			ls_to_hdrtext = ""
//			ls_to_empname = ""
//			ll_to_row = 0
//			ls_mode = ""
//			ll_from_empno = 0
//			ll_to_empno = 0
//			ll_to_rowcount = 0
//			ls_from_text = ""
//			//
//			ls_from_text = sle_drag_from_object.text
//			ls_from_hdrtext = sle_drag_from_hdrtext.text
//			ls_from_empname = sle_drag_from_empname.text
//			ll_from_row = f_stol(sle_drag_from_row.text)
//			ls_to_hdrtext = sle_drag_drop_hdrtext.text
//			ls_to_empname = sle_drag_drop_empname.text
//			ll_to_row = row
//			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
//			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
//			ll_from_empno = f_stol(sle_drag_from_empno.text)
//			ll_to_empno = f_stol(sle_drag_drop_empno.text)
//			ll_to_rowcount = dw_to_object.rowcount()
//			//------------------- fix xrefids if needed --------------------------
//			ll_from_pos_id = 0
//			ll_from_xrefid = 0
//			ls_from_positionid = ""
//			ll_to_pos_id = 0
//			ll_to_xrefid = 0
//			ls_to_positionid = ""
//			//------------------------------
//			boolean bSkipInvalidDropCallnum
//			bSkipInvalidDropCallnum = false
//			if(ll_from_grpid = 131) then
//				if(ls_callnum <> ls_from_callnum) then
//					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
//					bSkipInvalidDropCallnum = true
//				end if
//			end if
//			//------------------------------
//			if(bSkipInvalidDropCallnum = false) then
//				//
//				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
//				//
//				sle_drag_from_positionid.text = ls_from_positionid
//				//
//				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
//				//
//				sle_drag_to_positionid.text = ls_to_positionid
//				if(f_len_ext(ls_from_positionid) >= 14) then
//					//
//					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
//					//
//				end if			
//				if(f_len_ext(ls_to_positionid) >= 14) then
//					//
//					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
//					//
//				end if
//				if(ll_from_xrefid = 0) then
//					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
//				end if
//				if(ll_to_xrefid = 0) then
//					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
//				end if
//				ls_jobcode = ""
//				ls_jobtitle = ""
//				ls_funddept = ""
//				ls_error = ""
//				if(ll_to_empno > 0) then
//					//
//					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
//					//
//				end if
//				//-------------------------------------------------------------------
//				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
//				sle_drag_drop_mode.text = ls_mode
//				if(f_len_ext(ls_mode) >= 4) then
//					ls_error = ""
//					ls_addinfo = "."
//					ls_vehnum = "."
//					ls_groupname = "PATROL"
//					li_case_num = 0				
//					li_active = 1
//					li_issuper = 0
//					li_isunfilled = 0
//					ls_col = string(li_to_gcol)
//					ls_row = string(li_to_grow)
//					long ll_fm_empno
//					string ls_fm_empname
//					string ls_fm_funddept
//					string ls_fm_title
//					long ll_fm_jobcode
//					string ls_fm_jobcode
//					string ls_fm_positionid
//					ll_fm_empno = 0
//					ls_fm_empname = ""
//					ls_fm_funddept = ""
//					ls_fm_title = ""
//					ll_fm_jobcode = 0
//					ls_fm_positionid = ""
//					if(ll_to_empno > 0) then
//						//
//						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
//						from fm.io_employee
//						where empno = 17117			
//						using sqlca;
//						//
//						if(ll_fm_jobcode > 0) then
//							ls_fm_funddept = string(ll_fm_jobcode)
//						end if
//					end if
//					//===========================
//					boolean bSuccessfulMove
//					boolean bSuccessfulRemove
//					boolean bSuccessfulInsert
//					string lsa_dd_errors[]				
//					//===========================
//	
//					string ls_from_funddept
//					string ls_from_addinfo
//					string ls_from_jobcode
//					string ls_from_jobtitle
//					integer li_num_deletes
//					integer li_num_updates		
//					integer li_inserted_status
//					ls_from_funddept = ""
//					ls_from_addinfo = ""
//					ls_from_jobcode = ""
//					ls_from_jobtitle = ""
//	
//					//
//					long ll_from_pos_exists_id
//					long ll_from_xref_exists_id
//					long ll_from_xrefmods_exists_id
//					long ll_from_emp_exists_id
//					long ll_from_xrefmods_ppos2recid
//					long ll_from_bs_specs_others_exists_id				
//					long ll_from_pos_xrefid
//					string ls_from_pos_funddept
//					string ls_from_pos_addinfo
//					string ls_from_pos_jobcode
//					string ls_from_pos_jobtitle
//					ll_from_pos_exists_id = 0              //used
//					ll_from_xref_exists_id = 0             
//					ll_from_xrefmods_exists_id = 0 
//					ll_from_emp_exists_id = 0 
//					ll_from_xrefmods_ppos2recid = 0        //used
//					ll_from_bs_specs_others_exists_id = 0 				
//					ll_from_pos_xrefid = 0                 //used
//					
//					ll_from_pos_xrefid = 0
//					ls_from_pos_funddept = ""              //used
//					ls_from_pos_addinfo = ""               //used
//					ls_from_pos_jobcode = ""               //used
//					ls_from_pos_jobtitle = ""              //used
//					//				
//					long ll_to_pos_exists_id
//					long ll_to_xref_exists_id
//					long ll_to_xrefmods_exists_id
//					long ll_to_emp_exists_id
//					long ll_to_xrefmods_ppos2recid
//					long ll_to_bs_specs_others_exists_id		
//					long ll_to_pos_xrefid
//					string ls_to_pos_funddept
//					string ls_to_pos_addinfo
//					string ls_to_pos_jobcode
//					string ls_to_pos_jobtitle
//					ll_to_pos_exists_id = 0                //used
//					ll_to_xref_exists_id = 0
//					ll_to_xrefmods_exists_id = 0
//					ll_to_emp_exists_id = 0
//					ll_to_xrefmods_ppos2recid = 0
//					ll_to_bs_specs_others_exists_id = 0
//					ll_to_pos_xrefid = 0                   //used
//					ls_to_pos_funddept = ""                //used
//					ls_to_pos_addinfo = ""                 //used
//					ls_to_pos_jobcode = ""                 //used
//					ls_to_pos_jobtitle = ""                //used
//					//collect from table variables
//					if(ll_from_empno > 0) then
//						//
//						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
//						//
//						if(ll_from_pos_exists_id > 0) then
//							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
//						end if
//						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
//						//
//						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
//						//
//						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
//						//
//						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
//						//
//					end if
//					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
//						if(f_len_ext(ls_from_positionid) > 0) then
//							//
//							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
//							//
//							if(ll_from_pos_exists_id > 0) then
//								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
//								//
//								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
//								//
//							end if
//							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
//								//
//								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
//							end if
//						end if
//						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
//							//
//							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
//							//
//						end if
//					end if					
//					
//					//collect to table variables
//					if(ll_to_empno > 0) then
//						//
//						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
//						//
//						if(ll_to_pos_exists_id > 0) then
//							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
//						end if
//						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
//						//
//						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
//						//
//						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
//						//
//						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
//						//			
//					end if	
//					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
//						if(f_len_ext(ls_to_positionid) > 0) then
//							//
//							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
//							//
//							if(ll_to_pos_exists_id > 0) then
//								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
//								//
//								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
//								//
//							end if
//							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
//								//
//								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
//							end if
//						end if
//						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
//							//
//							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
//							//
//						end if
//					end if
//					li_num_dup_callnums = 0
//					//
//					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
//					//
//					if(li_num_dup_callnums > 0) then
//						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
//						return
//					end if
//					
//					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
//					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
//					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
//					sle_case_num.text = string(li_case_num)				
//					//###############
//					//### CASE# 9 ###
//					//###############
//					if(li_case_num = 9) then
//						//-------------------------------------------------------------------------
//						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
//						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
//						//ll_from_pos_exists_id	1678
//						//ll_from_pos_xrefid	366
//						//ll_from_xrefmods_ppos2recid	1678
//						//ll_from_xref_exists_id	366
//						//ll_from_xrefmods_exists_id	366
//						//ll_from_emp_exists_id	1215
//						//ll_from_bs_specs_others_exists_id	74
//						//ll_to_pos_exists_id	638
//						//ll_to_pos_xrefid	212
//						//ll_to_xrefmods_ppos2recid	638
//						//ll_to_xref_exists_id	212
//						//ll_to_xrefmods_exists_id	212
//						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
//						//ll_to_bs_specs_others_exists_id	80
//						//-------------------------------------------------------------------------
//						//ll_dragdrop_grpid	8
//						//ll_from_grpid	8
//						//ll_from_empno	19633
//						//li_drag_drop_row	3
//						//li_drag_from_row	5
//						//li_drop_to_rowcount	10
//						//li_num_avail_rows	12
//						//ls_callnum	1J2532
//						//ls_from_callnum	1J2534
//						//li_super_lvl	
//						//ls_from_positionid	00512
//						//ls_to_positionid	00066
//   					//-------------------------------------------------------------------------
//						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
//						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
//							//--- drag from updates ---
//							//
//							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
//							//
//							li_commit_status = f_commit_rollback_record(ref sqlca)
//							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
//								//
//								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
//								//
//								li_commit_status = f_commit_rollback_record(ref sqlca)
//								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
//									//
//									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
//									//
//									f_commit_rollback_record(ref sqlca)
//								end if
//							end if
//							//--- drag to updates ---
//							//
//							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
//							//
//							li_commit_status = f_commit_rollback_record(ref sqlca)
//							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
//								//
//								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
//								//
//								li_commit_status = f_commit_rollback_record(ref sqlca)
//								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
//									//
//									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
//									//
//									f_commit_rollback_record(ref sqlca)
//								end if
//							end if
//						end if						
//						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
//						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
//							//
//							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
//							//
//							f_commit_rollback_record(ref sqlca)
//							//
//							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
//							//
//							f_commit_rollback_record(ref sqlca)							
//						end if
//					end if
//					//###############
//					//### CASE# 6 ###
//					//###############
//					if(li_case_num = 6) then
//						li_isunfilled = 1
//						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
//						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
//						//-sle_drag_from_row between 1 and 12
//						//-sle_drag_from_empno > 0
//						//-sle_drag_from_grpid > 0
//						//-mode = 'EMPTY'
//						//-sle_drag_drop_object = 'DATAWINDOW'
//						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
//						//-sle_drag_drop_empname = 'INSERT'
//						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
//						//INSERT INTO DRAG_TO_GROUP
//						//REMOVE FROM DRAG_FROM_GROUP
//						//
//						li_stop = 0
//						bSuccessfulMove = false
//						bSuccessfulRemove = false
//						bSuccessfulInsert = false					
//	
//						//===================================
//						//*** REMOVE FROM DRAG_FROM GROUP ***
//						//===================================
//						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
//						
//						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
//	
//							li_num_deletes = 0
//							li_num_updates = 0
//							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
//							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
//							//
//							if(sqlca.sqlcode <> -1) then
//								//
//								commit using sqlca;
//								//
//								li_num_deletes++
//							else
//								ls_sqlerrtext = sqlca.sqlerrtext
//								//
//								rollback using sqlca;
//								//
//								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
//								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
//							end if
//							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
//							if(ll_from_xref_exists_id > 0) then
//								//
//								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
//								//
//								if(sqlca.sqlcode <> -1) then
//									//
//									commit using sqlca;
//									//
//									li_num_deletes++
//								else
//									ls_sqlerrtext = sqlca.sqlerrtext
//									//
//									rollback using sqlca;
//									//
//									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
//									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
//								end if
//							end if
//							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
//							if(ll_from_xrefmods_exists_id > 0) then
//								//
//								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
//								//
//								if(sqlca.sqlcode <> -1) then
//									//
//									commit using sqlca;
//									//
//									li_num_deletes++
//								else
//									ls_sqlerrtext = sqlca.sqlerrtext
//									//
//									rollback using sqlca;
//									//
//									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
//									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
//								end if							
//							end if
//							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
//							if(ll_from_emp_exists_id > 0) then
//								//''
//								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
//								where id = :ll_from_emp_exists_id 
//								using sqlca;
//								//
//								if(sqlca.sqlcode <> -1) then
//									//
//									commit using sqlca;
//									//
//									li_num_updates++
//								else
//									ls_sqlerrtext = sqlca.sqlerrtext
//									//
//									rollback using sqlca;
//									//
//									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
//									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
//								end if								
//							end if
//							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
//							if(ll_from_bs_specs_others_exists_id > 0) then
//								//
//								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
//								where id = :ll_from_bs_specs_others_exists_id
//								using sqlca;
//								//
//								if(sqlca.sqlcode <> -1) then
//									//
//									commit using sqlca;
//									//
//									li_num_updates++
//								else
//									ls_sqlerrtext = sqlca.sqlerrtext
//									//
//									rollback using sqlca;
//									//
//									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
//									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
//								end if								
//							end if
//							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
//								bSuccessfulRemove = true
//							end if
//						end if
//						if(bSuccessfulRemove = true) then
//							//===================================
//							//*** INSERT INTO DRAG_TO GROUP ***
//							//===================================
//	//						li_inserted_status = 0
//	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
//	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
//	//																						ref lsa_dd_errors, ref sqlca)
//	
//							// update sns_board_specs_others
//	
//							string ls_to_callnum
//							li_num_updates = 0
//							if(ll_from_bs_specs_others_exists_id > 0) then
//								//
//								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
//								//
//								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
//								where id = :ll_from_bs_specs_others_exists_id
//								using sqlca;
//								//
//								if(sqlca.sqlcode <> -1) then
//									//
//									commit using sqlca;
//									//
//									li_num_updates++
//								else
//									ls_sqlerrtext = sqlca.sqlerrtext
//									//
//									rollback using sqlca;
//									//
//									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
//									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
//								end if								
//								li_rtn_value = 0
//								string ls_to_addinfo
//								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
//								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
//								//  0 = successful
//								// -1 = no action taken
//								// -2 = li_assgnd_empno_count > 0
//								// -3 = li_positionid_count > 0
//								// -4 = assgnd_empno not found in pos2
//								// -5 = ll_pos2idshort invalid
//								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
//								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
//								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
//								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
//								//-10 = ll_pos2idshort <0 or > 90000 
//								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
//								if(li_rtn_value >= 1) then
//									if(ll_from_emp_exists_id > 0) then
//										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
//										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
//										where id = :ll_from_emp_exists_id
//										using sqlca;
//										//
//										if(sqlca.sqlcode <> -1) then
//											//
//											commit using sqlca;
//											//
//											li_num_updates++
//										else
//											ls_sqlerrtext = sqlca.sqlerrtext
//											//
//											rollback using sqlca;
//											//
//											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
//											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
//										end if										
//										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
//											long ll_grps_resp
//											long ll_grp_super_empno
//											ll_grps_resp = 0
//											ll_grp_super_empno = 0
//											//
//											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
//											//
//											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno using sqlca;
//											//
//											if(sqlca.sqlcode <> -1) then
//												//
//												commit using sqlca;
//												//
//												li_num_updates++
//											else
//												ls_sqlerrtext = sqlca.sqlerrtext
//												//
//												rollback using sqlca;
//												//
//												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
//												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
//											end if											
//										end if //ll_to_grpid > 0
//									end if//ll_from_emp_exists_id > 0
//								end if //li_rtn_value = 0
//							end if //ll_from_bs_specs_others_exists_id > 0						
//						end if //bSuccessfulRemove = true
//					end if //li_case_num = 6
//					//###############
//					//### CASE# 8 ###
//					//###############
//					if(li_case_num = 8) then
//						li_isunfilled = 0
//						//===================================
//						//*** REMOVE FROM DRAG_FROM GROUP ***
//						//===================================
//						bSuccessfulRemove = false
//						li_rtn_value = 0
//						// 1 = successful backup
//						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
//						//-2 = insert failed
//						//-3 = remove previous backup failed
//						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
//						if(li_rtn_value = 1) then
//							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
//							if(bSuccessfulRemove = true) then
//								string lsa_parms[]
//								f_allocate_string_array(39, ref lsa_parms)
//								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
//								lsa_parms[2] = string(ll_from_emp_exists_id)
//								lsa_parms[3] = string(ll_from_pos_exists_id)
//								lsa_parms[4] = string(ll_from_pos_xrefid)
//								lsa_parms[5] = string(ll_from_xref_exists_id)
//								lsa_parms[6] = ls_empname
//								lsa_parms[7] = string(ll_from_empno)
//								lsa_parms[8] = ls_from_positionid
//								lsa_parms[9] = ls_from_funddept
//								lsa_parms[10] = ls_from_jobtitle
//								lsa_parms[11] = ls_from_jobcode
//								lsa_parms[12] = string(ll_from_grpid)
//								lsa_parms[13] = string(ll_from_row)
//								lsa_parms[14] = ls_from_pos_addinfo
//								lsa_parms[15] = ls_from_pos_funddept
//								lsa_parms[16] = ls_from_pos_jobcode
//								lsa_parms[17] = ls_from_pos_jobtitle
//								lsa_parms[18] = string(ll_to_grpid)
//								lsa_parms[19] = ls_to_positionid
//								lsa_parms[20] = string(ll_to_row)
//								lsa_parms[21] = string(ll_to_rowcount)
//								lsa_parms[22] = ls_to_empname
//								lsa_parms[23] = ls_callnum
//								lsa_parms[24] = ls_dragfrom_hdrtext
//								lsa_parms[25] = ls_empname
//								lsa_parms[26] = ls_hdrtext
//								lsa_parms[27] = ls_mode
//								lsa_parms[28] = ls_row
//								lsa_parms[29] = ""
//								lsa_parms[30] = ""
//								lsa_parms[31] = ""
//								lsa_parms[32] = ""
//								lsa_parms[33] = ""
//								lsa_parms[34] = ""
//								lsa_parms[35] = ""
//								lsa_parms[36] = ""
//								lsa_parms[37] = ""
//								lsa_parms[38] = ""
//								lsa_parms[39] = ""
//								//===================================
//								//*** INSERT INTO DRAG_TO GROUP ***
//								//===================================
//								li_inserted_status = 0
//								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
//							else
//								li_rtn_value = 0		
//								ls_errors = ""
//								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
//								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
//							end if
//						else
//							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
//						end if
//					end if
//					//###############
//					//### CASE# 2 ###
//					//###############
//					if(li_case_num = 2) then
//					
//					end if
//					if(ll_to_grpid = ll_dragdrop_grpid) then
//						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
//					else
//						string ls_refresh_grpids
//						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
//					end if
//					TriggerEvent(pb_refresh, Clicked!)	
//				end if
//				sle_is_dragging.text = string(bIsDragging)
//			end if
//		//end if
//	end if	
//end if
end event

event dragwithin;//if(bIsDragging = true) then
//	sle_is_dragging.text = string(bIsDragging)
//	sle_dragwithin_row.text = ""
//	sle_dragwithin_header.text = ""
//	sle_dragwithin_text.text = ""
//	sle_dragwithin_empno.text = ""
//	string ls_hdrtext
//	long ll_empno
//	string ls_dwoname	
//	ls_dwoname = trim(upper(dwo.name))
//	
//	//=======================
//	long ll_clicked_grpid
//	ll_clicked_grpid = 116
//	//=======================
//	datawindow dw_clicked_object
//	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
//	if(IsNull(dw_clicked_object) = false) then
//		ls_hdrtext = ""
//		ll_empno = 0	
//		string ls_empname
//		string ls_callnum
//		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
//		ll_empno = 0
//		ls_empname = ""
//		sle_drag_drop_empname.text = ls_empname
//		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
//		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
//		if(row > 0) then
//			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
//			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
//			sle_dragwithin_row.text = string(row)
//			sle_dragwithin_header.text = ls_hdrtext
//			sle_dragwithin_text.text = ls_dwoname
//			sle_dragwithin_empno.text = string(ll_empno)
//			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
//				//dragicon logic
//				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
//					if(ll_empno > 0) then
//						this.dragicon = "UserObject5!"
//						sle_icon_filenanme.text = "UserObject5!"
//					else
//						this.dragicon = "StopSign!"
//						sle_icon_filenanme.text = "StopSign1!"
//					end if
//				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
//					//if(ll_empno > 0) then
//						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
//						//sle_icon_filenanme.text = "Drop!"
//					//else
//						this.dragicon = "StopSign!"
//						sle_icon_filenanme.text = "StopSign2!"			
//					//end if
//				else
//					//this.dragicon = "StopSign!"
//					//sle_icon_filenanme.text = "StopSign3!"			
//					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
//					sle_icon_filenanme.text = "Replace!"
//				end if
//			else
//				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
//				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
//			end if
//		else
//			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
//			sle_icon_filenanme.text = "Insert!"
//			sle_dragwithin_row.text = string(row)
//			sle_dragwithin_header.text = ls_hdrtext
//			sle_dragwithin_text.text = ls_dwoname
//			sle_dragwithin_empno.text = string(ll_empno)
//		end if
//	end if
//end if
end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 116
//=======================
datawindow dw_clicked_object
dw_clicked_object = dw_chiefs //f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event retrieverow;string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 116
//=======================
datawindow dw_clicked_object
dw_clicked_object = dw_chiefs//f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if
end event

type dw_supervisors from datawindow within w_pat_assmts_updates
integer x = 3214
integer y = 2820
integer width = 1093
integer height = 1288
integer taborder = 80
string title = "Supervisors"
string dataobject = "dw_team_template"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 64
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 63
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 64
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event dragwithin;//==================
//### DRAGWITHIN ###
//==================
//dragwithin
if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 64
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 64
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event retrieverow;//===================
//### RETRIEVEROW ###
//===================
string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 64
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled,dw_unassigned,dw_supervisors,dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if
end event

type dw_admin from datawindow within w_pat_assmts_updates
integer x = 4311
integer y = 2820
integer width = 1093
integer height = 1292
integer taborder = 150
string title = "Administrators"
string dataobject = "dw_team_template"
boolean vscrollbar = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 63
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 64
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 63
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event dragwithin;//==================
//### DRAGWITHIN ###
//==================
//dragwithin
if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 63
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 63
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event retrieverow;//===================
//### RETRIEVEROW ###
//===================
string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 63
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled,dw_unassigned,dw_supervisors,dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if
end event

type lb_orderby_bak from listbox within w_pat_assmts_updates
integer x = 3081
integer y = 6228
integer width = 677
integer height = 284
integer taborder = 90
integer textsize = -8
integer weight = 700
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial Narrow"
long backcolor = 15780518
boolean vscrollbar = true
boolean sorted = false
borderstyle borderstyle = stylelowered!
end type

type st_48 from statictext within w_pat_assmts_updates
integer x = 3090
integer y = 6156
integer width = 507
integer height = 60
integer textsize = -8
integer weight = 700
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial Narrow"
long textcolor = 33554432
long backcolor = 67108864
string text = "OrderBy Temp Backup"
boolean focusrectangle = false
end type

type dw_unfilled from datawindow within w_pat_assmts_updates
integer x = 2094
integer y = 3312
integer width = 1106
integer height = 436
integer taborder = 50
string title = "none"
string dataobject = "dw_team_unassigned"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 128
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 128
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 128
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event dragwithin;//dragwithin
if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 128
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 128
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event retrieverow;string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 128
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if
end event

type sle_refresh_grpids from singlelineedit within w_pat_assmts_updates
integer x = 2149
integer y = 8
integer width = 581
integer height = 96
integer taborder = 40
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type pb_restore_backup from picturebutton within w_pat_assmts_updates
integer x = 3538
integer width = 754
integer height = 100
integer taborder = 30
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
string text = "Restore Drag-Drop Backup"
boolean originalsize = true
alignment htextalign = left!
long textcolor = 16777215
long backcolor = 16810112
end type

event clicked;//testing/devel
integer li_rtn_value
string ls_errors
li_rtn_value = 0		
ls_errors = ""
//f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, 
//                                           ll_pos_exists_id, ll_bs_specs_others_exists_id, ll_xref_exists_id, ll_xrefmods_exists_id, ll_emp_exists_id, ref sqlca)
//li_rtn_value = f_restore_board_specs_backup_tables(8, 'EAGLE MOUNTAIN 2 {9}', 'TEAM D {4}', 238, 83, 481, 0, 492, ref ls_errors, ref sqlca)
//
if(li_rtn_value <> 0) then
end if
end event

type st_db_identity from statictext within w_pat_assmts_updates
integer x = 18
integer y = 4144
integer width = 402
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 67108864
alignment alignment = center!
boolean focusrectangle = false
end type

type lb_devel from listbox within w_pat_assmts_updates
integer x = 3872
integer y = 5920
integer width = 1952
integer height = 636
integer taborder = 90
integer textsize = -8
integer weight = 700
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial Narrow"
long backcolor = 12639424
boolean vscrollbar = true
boolean sorted = false
borderstyle borderstyle = stylelowered!
end type

type lb_col_xref from listbox within w_pat_assmts_updates
integer x = 119
integer y = 5672
integer width = 859
integer height = 996
integer taborder = 120
integer textsize = -8
integer weight = 700
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial Narrow"
boolean vscrollbar = true
boolean sorted = false
string item[] = {"TEAM A|1","TEAM B|2","TEAM C|3","TEAM D|4","REC 1|5","REC 2|6","EM1|1","EM2|2","EMSRO|3","VINEYARD|4","SMCONT|5","FTO|6","RESERVES|1","CHIEF DEPUTIES|2","SUPERVISORS|3","UNASSIGNED|2"}
borderstyle borderstyle = stylelowered!
end type

event doubleclicked;//integer li_index
//li_index = index
//if(li_index >= 0) then
//	string ls_lbtext
//	ls_lbtext = lb_col_xref.text(li_index)
//	if(f_len_ext(ls_lbtext) > 0) then
//		long ll_num_retrieved
//		ll_num_retrieved = f_populate_datawindow(ref dw_specs_others, rb_all, rb_corrections, rb_patrol, rb_judicial, rb_emergsvcs, ref sqlca)
//		sle_num_others.text = string(ll_num_retrieved)
//		
//		
//	end if
//end if
end event

type sle_case_num from singlelineedit within w_pat_assmts_updates
integer x = 6208
integer y = 5476
integer width = 155
integer height = 96
integer taborder = 100
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_47 from statictext within w_pat_assmts_updates
integer x = 6025
integer y = 5492
integer width = 165
integer height = 64
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long backcolor = 28225279
string text = "Case#:"
alignment alignment = right!
boolean focusrectangle = false
end type

type pb_help from picturebutton within w_pat_assmts_updates
integer x = 1294
integer width = 206
integer height = 96
integer taborder = 30
integer textsize = -9
integer weight = 700
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string text = "Help"
boolean originalsize = true
long textcolor = 16777215
long backcolor = 33488896
end type

event clicked;open(w_assgn_help)
end event

type dw_unassigned from datawindow within w_pat_assmts_updates
integer x = 27
integer y = 4404
integer width = 1106
integer height = 1164
integer taborder = 140
string title = "none"
string dataobject = "dw_team_unassigned"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 131
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 131
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event dragwithin;//dragwithin
if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 131
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 131
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 131
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event retrieverow;string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 131
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if
end event

type dw_team_resvrs from datawindow within w_pat_assmts_updates
integer x = 96
integer y = 2960
integer width = 1079
integer height = 1168
integer taborder = 130
string title = "none"
string dataobject = "dw_team_template"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 129
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 129
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 129
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 129
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event retrieverow;string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 129
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if
end event

event dragwithin;if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 129
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

type dw_fto from datawindow within w_pat_assmts_updates
integer x = 5527
integer y = 1412
integer width = 1079
integer height = 932
integer taborder = 70
string title = "none"
string dataobject = "dw_team_template"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 52
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 52
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						else
							MessageBox("Notification", "Failed to delete. Error Rtn Value=" + string(li_del_rtn_value))
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 52
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 51
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event dragwithin;//==================
//### DRAGWITHIN ###
//==================
//dragwithin
if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 52
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

event retrieverow;//===================
//### RETRIEVEROW ###
//===================
string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 52
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if
end event

type dw_smcont from datawindow within w_pat_assmts_updates
integer x = 4425
integer y = 1412
integer width = 1093
integer height = 932
integer taborder = 60
string title = "none"
string dataobject = "dw_team_template"
boolean vscrollbar = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 12
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 12
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 12
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 12
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event dragwithin;//==================
//### DRAGWITHIN ###
//==================
//dragwithin
if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 12
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

event retrieverow;//===================
//### RETRIEVEROW ###
//===================
string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 12
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if
end event

type dw_vine from datawindow within w_pat_assmts_updates
integer x = 3333
integer y = 1408
integer width = 1074
integer height = 1348
integer taborder = 70
string title = "none"
string dataobject = "dw_team_template"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 11
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow <= li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 11
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 11
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 11
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event dragwithin;if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 11
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if

end event

event retrieverow;string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 11
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if
end event

type dw_emsro from datawindow within w_pat_assmts_updates
integer x = 2272
integer y = 1408
integer width = 1056
integer height = 1352
integer taborder = 60
string title = "none"
string dataobject = "dw_team_template"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 10
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 10
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 10
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 10
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event dragwithin;if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 10
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if

end event

event retrieverow;string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 10
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if
end event

type dw_em2 from datawindow within w_pat_assmts_updates
integer x = 1184
integer y = 1408
integer width = 1093
integer height = 1360
integer taborder = 60
string title = "none"
string dataobject = "dw_team_template"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 9
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 9
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 9
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 9
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event dragwithin;//==================
//### DRAGWITHIN ###
//==================
//dragwithin
if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 9
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

event retrieverow;//===================
//### RETRIEVEROW ###
//===================
string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 9
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if
end event

type dw_em1 from datawindow within w_pat_assmts_updates
integer x = 96
integer y = 1412
integer width = 1070
integer height = 1360
integer taborder = 50
string title = "none"
string dataobject = "dw_team_template"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 8
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 8
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 8
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 8
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event dragwithin;if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 8
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if

end event

event retrieverow;string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 8
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if
end event

type dw_rec2 from datawindow within w_pat_assmts_updates
integer x = 5509
integer y = 276
integer width = 1102
integer height = 928
integer taborder = 60
string title = "none"
string dataobject = "dw_team_template"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 6
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 6
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 6
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 6
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event dragwithin;//==================
//### DRAGWITHIN ###
//==================
//dragwithin
if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 6
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

event retrieverow;//===================
//### RETRIEVEROW ###
//===================
string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 6
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if

end event

type st_46 from statictext within w_pat_assmts_updates
integer x = 4631
integer y = 5204
integer width = 462
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tw Cen MT Condensed"
long textcolor = 255
long backcolor = 67108864
string text = "<=dw supports refresh"
boolean focusrectangle = false
end type

type dw_rec1 from datawindow within w_pat_assmts_updates
integer x = 4430
integer y = 272
integer width = 1051
integer height = 936
integer taborder = 50
string title = "none"
string dataobject = "dw_team_template"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 5
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 5
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event retrieverow;//===================
//### RETRIEVEROW ###
//===================
string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 5
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 5
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragwithin;//==================
//### DRAGWITHIN ###
//==================
//dragwithin
if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 5
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 5
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

type dw_testrec1 from datawindow within w_pat_assmts_updates
integer x = 2025
integer y = 6044
integer width = 686
integer height = 400
integer taborder = 40
string title = "none"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type dw_d from datawindow within w_pat_assmts_updates
integer x = 3342
integer y = 268
integer width = 1070
integer height = 940
integer taborder = 30
string title = "none"
string dataobject = "dw_team_d"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 4
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 4
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 4
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragwithin;//==================
//### DRAGWITHIN ###
//==================
//dragwithin
if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 4
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

event retrieverow;//===================
//### RETRIEVEROW ###
//===================
string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 4
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 4
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

type sle_num_specs from singlelineedit within w_pat_assmts_updates
integer x = 4622
integer y = 5308
integer width = 169
integer height = 96
integer taborder = 60
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
string text = "0"
borderstyle borderstyle = stylelowered!
end type

type dw_lay_specs from datawindow within w_pat_assmts_updates
integer x = 3936
integer y = 5012
integer width = 686
integer height = 400
integer taborder = 60
string title = "none"
string dataobject = "dw_layout_specs"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type pb_refresh from picturebutton within w_pat_assmts_updates
integer x = 1509
integer width = 626
integer height = 100
integer taborder = 30
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
string text = "Refresh Assignments"
boolean originalsize = true
long textcolor = 16777215
long backcolor = 32768
end type

event clicked;//pb_init_table
gi_max_rows = 42
gi_max_cols = 6
integer li_rloop
integer li_cloop
string ls_row
string ls_col
long ll_num_spec_rows
long ll_row
string ls_sql_err_text
integer li_num_processed
//------------------------
//string ls_radio_group
//ls_radio_group = f_get_active_group(rb_all, rb_corrections, rb_patrol, rb_judicial, rb_emergsvcs)
string ls_groupname
long ll_grpid
string ls_grpdesc
string ls_start_row
string ls_start_col
integer li_num_rows
integer li_num_cols
string ls_callnums
string lsa_callnums[]
integer li_num_callnums
//------------------------
integer li_col_found
integer li_iloop
string ls_callnums_inserted
string ls_lookup_callnum
string ls_lookup_callnumber_only
//------------------------
long ll_found_id
string ls_found_addinfo
string ls_found_empname
long ll_found_empno
integer li_found_super_lvl
long ll_found_assgnd_empno
//------------------------
integer li_num_inserted
integer li_num_errors
integer li_num_not_found
li_num_inserted = 0
li_num_errors = 0
li_num_not_found = 0
//------------------------
integer li_offset_row
integer li_row_group
integer li_actual_row
integer li_unfilled
li_row_group = 1
li_offset_row = 0
//------------------------
string lsa_unassigned[]
string lsa_other[]
integer li_num_unassigned
integer li_num_others
string lsa_nulls[]
string ls_unassigned_sql
string ls_other_sql
string lsa_parseoutdata[]
integer li_num_parse_items
string ls_grpid
//==============================================================
string ls_trun_sql
boolean bcontinue
integer li_num_successful_executes
string ls_trun_errors
//==============================================================
integer li_loop_num_callnums //(li_num_others + (li_num_callnums - li_num_others))) ie: (4 + (6 - 4)) = 6
integer li_num_callnums_to_process
integer li_num_others_to_process
integer li_looprow
integer li_bloop
integer li_last_nrow_inserted
//==============================================================
integer li_stop
//==============================================================
li_num_processed = 0
string ls_funddept
string ls_positionid
boolean bInsertPosSuptTables
//==============================================================
string ls_temp_positionid
ls_temp_positionid = f_get_next_temp_positionid(ref sqlca)
//==============================================================
string ls_vehnum
decimal dec_basepay
long ll_xrefid
string ls_callnum
string ls_jobcode
string ls_jobtitle
long ll_assgnd_empno
string ls_addinfo
integer li_rtn_value
string ls_error
//==============================================================
string lsa_lbxref[]
integer li_num_lbxref_items
//==============================================================
long ll_num_avail_positions
//==============================================================
string ls_empname_unfilled
ls_empname_unfilled = "*** UNFILLED ***"
integer li_num_dup_callnums
//==============================================================
//string ls_test_instring
//string ls_chars_to_trim
//ls_test_instring = "1J1151J"
//ls_chars_to_trim = "1J"
////integer li_count
////li_count = f_count_num_strings(ls_test_instring, ls_count_string)
//string ls_trim_str
//ls_trim_str = f_trimstr_multi_chars_ext(ls_test_instring, ls_chars_to_trim)
dw_lay_specs.settransobject(sqlca);
long ll_num_retrieved = 0
ll_num_retrieved = f_populate_dw_lay_specs(ref dw_lay_specs, "PATROL", ref sqlca)
sle_num_specs.text = string(ll_num_retrieved)
//==========================================================
//========= backup order by into lb_orderby_bak table ======
//==========================================================
string lsa_obbak[]
integer li_num_orderby_items
string ls_ob_sql
lb_orderby_bak.reset()
ls_ob_sql = "select grpid, callnum, orderby from sns_board_specs_others"
li_num_orderby_items = f_app_ds_populate_string_array_by_sql(ref lsa_obbak, ls_ob_sql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
integer li_oloop
string ls_oloopdata
for li_oloop = 1 to li_num_orderby_items
	ls_oloopdata = lsa_obbak[li_oloop]
	lb_orderby_bak.additem(ls_oloopdata)
next
//==========================================================
//==========================================================
//==========================================================
string lsa_grp_bak_data[]

long ll_empname_exists_id
boolean b_ok_to_insert
string ls_refresh_grpids
ls_refresh_grpids = sle_refresh_grpids.text
if(f_len_ext(ls_refresh_grpids) > 0) then
	integer li_num_commas
	li_num_commas = f_count_num_characters(ls_refresh_grpids, ",")
	if(li_num_commas <> 2) then
		ls_refresh_grpids = "," + ls_refresh_grpids + ","
	end if
	open(w_processing)
	//==============================================================
	string ls_sql_pos2_template
	ls_sql_pos2_template = "select 'POS-' || to_char(a.id) as POS, "
	ls_sql_pos2_template += "'EMP-' || to_char(b.id) as EMP, "
	ls_sql_pos2_template += "b.empname, " 
	ls_sql_pos2_template += "a.assgnd_empno, " 
	ls_sql_pos2_template += "a.funddept, " 
	ls_sql_pos2_template += "a.addinfo, " 
	ls_sql_pos2_template += "c.grpteam || ' {' || c.id || '}' as grpteamid, " 
	ls_sql_pos2_template += "b.positionid, " 
	ls_sql_pos2_template += "a.callnum, " 
	ls_sql_pos2_template += "a.positionid, "
	ls_sql_pos2_template += "'Y' as posvis, "
	ls_sql_pos2_template += "'Y' as empvis, "
	ls_sql_pos2_template += "b.super_lvl, "
	ls_sql_pos2_template += "a.id "
	ls_sql_pos2_template += "from sns_staffing_grps_positions2 a, sns_employees b, sns_staffing_groups c "
	ls_sql_pos2_template += "where b.empno = a.assgnd_empno "
	ls_sql_pos2_template += "and a.active = 1 "
	ls_sql_pos2_template += "and a.grpid = GGGGGG "
	ls_sql_pos2_template += "and c.id = a.grpid "
	ls_sql_pos2_template += "and b.active = 1 "
	ls_sql_pos2_template += "order by b.super_lvl desc, a.callnum "
	//==============================================================
	//sns_bd_others_layout_specs datawindow
	//example data...
	//id  created_dt  lupdated_dt grpid grpdesc			strow stcol numrows	numcols  callnums																								orderby groupname active
	//1	03-MAY-23	03-MAY-23	1		TEAM A			03		01		12			1			1J110,1J112,1J113,1J114,1J115,1J119															01		  PATRoL	1
	//2	03-MAY-23	03-MAY-23	2		TEAM B			03		02		12			1			1J120,1J122,1J123,1J124,1J125,1J127,1J129													02	     PATROL	1
	//3	03-MAY-23	03-MAY-23	3		TEAM C			03		03		12			1			1J130,1J132,1J133,1J134,1J135,1J137,1J139													03	     PATROL	1
	//4	03-MAY-23	03-MAY-23	4		TEAM D			03		04		12			1			1J140,1J142,1J143,1J144,1J145,1J149															04	     PATROL	1
	//5	03-MAY-23	03-MAY-23	5		REC 1				03		05		12			1			1J180,1J182,1J183,1J184,1J189																	05	     PATROL	1
	//6	03-MAY-23	03-MAY-23	6		REC 2				03		06		12			1			1J190,1J192,1J193,1J194,1J199																	06	     PATROL	1
	//7	03-MAY-23	03-MAY-23	8		EM1				17		01		12			1			1J2503,1J2531,1J2532,1J2533,1J2534,1J2535,1J2536,1J2537,1J2538						07	     PATROL	1
	//8	03-MAY-23	03-MAY-23	9		EM2				17		02		12			1			1J2504,1J2541,1J2542,1J2543,1J2544,1J2545,1J2546,1J2547,1J2548						08	     PATROL	1
	//9	03-MAY-23	03-MAY-23	10		EMSRO				17		03		12			1			1J2505,1J2521,1J2522,1J2523,1J2524															09	     PATROL	1
	//10	03-MAY-23	03-MAY-23	11		VINEYARD			17		04		12			1			1J1210,1J1211,1J1213,1J1214,1J1208,1J1221,1J1222,1J1223,1J1224						10	     PATROL	1
	//11	03-MAY-23	03-MAY-23	12		SMCONT			17		05		12			1			1J160, 1J161,1J162																				11	     PATROL	1
	//12	03-MAY-23	03-MAY-23	52		FTO				17		06		12			1			1J151,1J152,1J153,1J154,1J155,1J156															12	     PATROL	1
	//15	03-MAY-23	20-JUN-23	64		SUPERVISORS		31		04		12			1			1J10,1J11,1J12,1J1201																			15	     PATROL	1
	//14	03-MAY-23	20-JUN-23	116	CHIEF DEPUTIES	31		03		12			1			1J3,1J2501																							14	     PATROL	1
	//13	03-MAY-23	03-MAY-23	129	RESERVES			31		01		12			1			1J1801,1J1802,1J1803,1J1804,1J1805,1J1806,1J1807,1J1808,1J1811,1J1812,1J1814	13	     PATROL	1
	//16	20-JUN-23	20-JUN-23	131	UNASSIGNED		31		02		12			1			1J,1J,1J,1J,1J,1J,1J,1J,1J,1J,1J,1J															16	     PATROL	1
	//
	//================================================================
	//populate lsa_lbxref with lb_col_xref items
	//string lsa_lbxref[]
	//integer li_num_lbxref_items
	integer li_num_lb_items
	li_num_lb_items = lb_col_xref.totalitems()
	integer li_lbloop
	string ls_lbtext
	for li_lbloop = 1 to li_num_lb_items
		ls_lbtext = lb_col_xref.text(li_lbloop)
		f_add_item_to_string_array_ext(ref lsa_lbxref, ls_lbtext, true)
	next
	integer li_num_emps
	integer li_num_unfilled
	integer li_num_blanks
	li_num_emps = 0
	li_num_unfilled = 0
	li_num_blanks = 0
	string ls_loop_grpid
	//================================================================
	ll_num_spec_rows = dw_lay_specs.rowcount()
	if(ll_num_spec_rows > 0) then
		for ll_row = 1 to ll_num_spec_rows
			li_num_processed++
			ls_callnums_inserted = ""
			//-----------------
			ls_groupname = ""
			ll_grpid = 0
			ls_grpdesc = ""
			ls_start_row = ""
			ls_start_col = ""
			li_num_rows = 0
			li_num_cols = 0
			ls_callnums = ""
			li_unfilled = 0
			//-----------------
			ls_funddept = ""
			
			li_num_callnums_to_process = 0
			li_num_others_to_process = 0
			//-----------------
			li_looprow = 0
			//-----------------
			lb_devel.reset()
			//-----------------
			try
				ls_groupname = dw_lay_specs.getitemstring(ll_row, 'groupname')
				ll_grpid = dw_lay_specs.getitemnumber(ll_row, 'grpid')
				ls_grpdesc = dw_lay_specs.getitemstring(ll_row, 'grpdesc')
				ls_start_row = dw_lay_specs.getitemstring(ll_row, 'strow')
				ls_start_col = dw_lay_specs.getitemstring(ll_row, 'stcol')
				li_num_rows = dw_lay_specs.getitemnumber(ll_row, 'numrows')
				li_num_cols = dw_lay_specs.getitemnumber(ll_row, 'numcols')
				ls_callnums = dw_lay_specs.getitemstring(ll_row, 'callnums')
			catch(RunTimeError rte)
				li_stop = 9
			end try
			
			ls_loop_grpid = "," + string(ll_grpid) + ","
			
			if(pos(ls_refresh_grpids, ls_loop_grpid) > 0) then
			
				//SAVE EXISTING RECORDS FOR GRPID INTO ARRAY
				//
				//lsa_grp_bak_data
				string ls_bak_sql
				ls_bak_sql = "select id, grpid, nrow, ncol, empname, empno, callnum, issuper, isunfilled, groupname, active, positionid, orderby "
				ls_bak_sql += "from sns_board_specs_others where grpid = " + string(ll_grpid) + " order by grpid, nrow"
				integer li_num_bak_records
				li_num_bak_records = 0
				if(gb_inserted_unfilled = true) then
					li_num_bak_records = f_app_ds_populate_string_array_by_sql(ref lsa_grp_bak_data, ls_bak_sql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
					gb_inserted_unfilled = false
				end if

				//delete grpid in sns_board_specs_others
				delete from sns_board_specs_others
				where grpid = :ll_grpid
				using sqlca;
				//
				if(sqlca.sqlcode <> -1) then
					//
					commit using sqlca;
					//
					
					if((ll_grpid = 1) or (ll_grpid = 2) or (ll_grpid = 3) or (ll_grpid = 4) or (ll_grpid = 5) or (ll_grpid = 6)) then
						li_offset_row = 0
					elseif((ll_grpid = 8) or (ll_grpid = 9) or (ll_grpid = 10) or (ll_grpid = 11) or (ll_grpid = 12) or (ll_grpid = 52)) then
						li_offset_row = 14
					elseif((ll_grpid = 129) or (ll_grpid = 116) or (ll_grpid = 64) or (ll_grpid = 131)) then
						li_offset_row = 28
					end if
					if(ll_grpid > 0) then
						//
						select funddept into :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//			
					end if
					li_num_callnums = f_parseoutstring_ext(ls_callnums, ",", ref lsa_callnums)
					ls_grpid = string(ll_grpid)
					ls_other_sql = ls_sql_pos2_template
					ls_other_sql = f_replace_string_in_string(ls_other_sql, "GGGGGG", ls_grpid)
					lsa_other = lsa_nulls
					li_num_others = f_app_ds_populate_string_array_by_sql(ref lsa_other, ls_other_sql, gi_pad_len, gs_delim, gb_compress, ref sqlca)			
					li_loop_num_callnums = (li_num_others + (li_num_callnums - li_num_others))
					li_num_others_to_process = li_num_others
					li_num_callnums_to_process = li_loop_num_callnums
		
					//populate using sns_staffing_grps_positions2 table info
					string lsa_pos_info[]
					integer li_num_pos_info_items
					string ls_positions_sql
					integer li_num_blank_positions
					integer li_num_non_blank_positions
					integer li_ploop
					integer li_blank_loop
					string ls_ploopdata
					string ls_pos_empname
					long ll_pos_assgnd_empno
					string ls_pos_funddept
					string ls_pos_addinfo
					string ls_pos_grpteamid
					string ls_pos_grpid
					long ll_pos_grpid
					string ls_pos_positionid
					string ls_pos_callnum
					integer li_pos_super_lvl
					long ll_to_grpid
					string ls_inserted_callnums

					//-----------------------------
					integer li_num_def_callnums
					li_num_def_callnums = UpperBound(lsa_callnums)
					integer li_dcloop
					string ls_dcloopdata
					//-----------------------------
					ll_to_grpid = f_stol(ls_grpid)
					li_looprow = 0
					ls_groupname = "PATROL"
					ls_grpid = string(ll_grpid)
					ls_positions_sql = ls_sql_pos2_template
					ls_positions_sql = f_replace_string_in_string(ls_other_sql, "GGGGGG", ls_grpid)
					//retrieve sns_staffing_grps_positions2 currently assigned employees
					li_num_pos_info_items = f_app_ds_populate_string_array_by_sql(ref lsa_pos_info, ls_positions_sql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
					//=======================================================================================================================================
					//example: grpid = 4 / TEAM D {4} 
					//                                     POS
					//                   EMP              ASSGND POS        POS    GROUPS     EMP             POS   EMP                 EMP       POS
					//POS       EMP      EMPNAME           EMPNO FUNDDEPT  ADDINFO GRPTEAMID  POSITIONID    CALLNUM POSITIONID          SUPER_LVL ID
					//=======================================================================================================================================
					//POS-452	EMP-499	CARTER-SHAWN		16993	100-42110	140	TEAM D {4}	POSITION-00304	1J140	POSITION-00304	Y	Y	1			452
					//POS-2328	EMP-492	STEELE-AMBERLEE	17501		        	14		TEAM D {4}	POSITION-00761	1J143	POSITION-00716	Y	Y	0			2328
					//POS-226	EMP-468	ALVEY-NICHOLAS		18900	100-42110	144	TEAM D {4}	POSITION-01159	1J144	POSITION-01159	Y	Y	0			226
					//POS-1664	EMP-1255	JOHNSON-STEACEY	19742	100-42110	145	TEAM D {4}	POSITION-02630	1J145	POSITION-02630	Y	Y	0			1664
					//POS-638	EMP-520		                0	   100-42110	142	TEAM D {4}	               TBD   POSITION-00066	Y	Y	0			638
					//POS-2112	EMP-520		                0	   100-42110	.		TEAM D {4}		            TBD   POSITION-00626	Y	Y	0			2112				
					//=======================================================================================================================================
					li_num_blank_positions = (li_num_rows - li_num_pos_info_items)
					li_num_non_blank_positions = li_num_pos_info_items
					for li_ploop = 1 to li_num_non_blank_positions
						//---------------------------------------
						ls_pos_empname = ""
						ll_pos_assgnd_empno = 0
						ls_pos_funddept = ""
						ls_pos_addinfo = ""
						ls_pos_grpteamid = ""
						ls_pos_grpid = ""
						ll_pos_grpid = 0
						ls_pos_positionid = ""
						ls_pos_callnum = ""
						li_pos_super_lvl = 0
						ls_grpdesc = ""
						ls_found_empname = ""
						li_unfilled = 0
						ls_inserted_callnums = ""
						//---------------------------------------
						ls_ploopdata = lsa_pos_info[li_ploop]
						li_num_parse_items = f_parseoutstring_ext(ls_ploopdata, gs_delim, ref lsa_parseoutdata)
						if(li_num_parse_items >= 14) then
							ls_pos_empname = trim(upper(lsa_parseoutdata[3]))
							ll_pos_assgnd_empno = f_stol(lsa_parseoutdata[4])
							ls_pos_funddept = lsa_parseoutdata[5]
							ls_pos_addinfo = lsa_parseoutdata[6]
							ls_pos_grpteamid = lsa_parseoutdata[7]
							ls_pos_grpid = f_extract_bracketed_item(ls_pos_grpteamid, "{", "}", true)
							ll_pos_grpid = f_stol(ls_pos_grpid)
							ls_pos_positionid = trim(upper(lsa_parseoutdata[10]))
							ls_pos_callnum = trim(upper(lsa_parseoutdata[9]))
							li_pos_super_lvl = f_stoi(lsa_parseoutdata[13])
							if(ll_pos_grpid > 0) then
								if(ls_pos_callnum = "TBD") then
									ls_pos_callnum = ""
								end if
								
								if(f_len_ext(ls_pos_callnum) = 0) then 
									//determine next unfilled callnum
									for li_dcloop = 1 to li_num_def_callnums
										ls_dcloopdata = lsa_callnums[li_dcloop]
										if(pos(ls_callnums_inserted, ls_dcloopdata) = 0) then
											ls_pos_callnum = ls_dcloopdata
											exit
										end if
									next
								end if
								//
								select grpteam into :ls_grpdesc from sns_staffing_groups where grpname = :ls_groupname and id = :ls_pos_grpid using sqlca;
								//
								li_looprow++
								if((ll_grpid = 1) or (ll_grpid = 2) or (ll_grpid = 3) or (ll_grpid = 4) or (ll_grpid = 5) or (ll_grpid = 6)) then
									li_offset_row = 0
								elseif((ll_grpid = 8) or (ll_grpid = 9) or (ll_grpid = 10) or (ll_grpid = 11) or (ll_grpid = 12) or (ll_grpid = 52)) then
									li_offset_row = 14
								elseif((ll_grpid = 129) or (ll_grpid = 116) or (ll_grpid = 64) or (ll_grpid = 131)) then
									li_offset_row = 28
								end if						
								//---------------------------						
								li_actual_row = (li_looprow + li_offset_row)
								ls_row = f_lpad(string(li_actual_row), 2, "0")
								li_col_found = f_deter_grpdesc_colnum(ref lb_col_xref, ls_grpdesc)
								ls_col = f_lpad(string(li_col_found), 2, "0")
								//------------------------		
								if(ll_pos_assgnd_empno = 0) then
									li_unfilled = 1
								else
									li_unfilled = 0
								end if							
								if((f_len_ext(ls_pos_callnum) > 0) and (pos(ls_pos_callnum, "1J") > 0) and (li_unfilled = 1)) then
									ls_found_empname = ls_empname_unfilled //"*** UNFILLED ***"
								else
									ls_found_empname = ls_pos_empname
								end if
								//
								
								if(ll_pos_grpid = 5) then
									li_stop = 0
								end if
								//check for duplicate callnums
								li_num_dup_callnums = 0
								select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_pos_callnum using sqlca;
								//
								if(li_num_dup_callnums > 1) then
									MessageBox("Notification","Callnum " + ls_pos_callnum + " is already assigned.", Exclamation!)
									return								
								end if	
								//prevent duplicate empname's
								ls_found_empname = trim(upper(ls_found_empname))
								ll_empname_exists_id = 0
								//
								select id into :ll_empname_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_found_empname using sqlca;
								//
								b_ok_to_insert = true
								if(pos(ls_found_empname, "UNFILLED") = 0) then
									if(ll_empname_exists_id > 0) then
										b_ok_to_insert = false
									end if
								end if
								if(b_ok_to_insert = true) then									
									//
									insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active, positionid)
									values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, :ls_found_empname, :ll_pos_assgnd_empno, :ls_pos_callnum, :li_pos_super_lvl, :li_unfilled, 1, :ls_pos_positionid)
									using sqlca;
									//
									//insert#1
									//
									if(sqlca.sqlcode <> -1) then
										//
										commit using sqlca;
										//
										ls_callnums_inserted += ls_pos_callnum
										ls_callnums_inserted += ","
									else
										ls_sql_err_text = sqlca.sqlerrtext
										//
										rollback using sqlca;
										//
										li_num_errors++
									end if
								end if								
							else
								//error invalid grpid
								li_stop = 0							
							end if
						end if
					next
					if(ll_to_grpid > 0) then
						//
						select numrows into :ll_num_avail_positions	from sns_bd_others_layout_specs where grpid = :ll_to_grpid using sqlca;
						//
					end if	
					if(li_ploop <= ll_num_avail_positions) then
						for li_blank_loop = li_ploop to ll_num_avail_positions
							li_looprow++						
							//---------------------------						
							li_actual_row = (li_looprow + li_offset_row)
							ls_row = f_lpad(string(li_actual_row), 2, "0")
							li_col_found = f_deter_grpdesc_colnum(ref lb_col_xref, ls_grpdesc)
							ls_col = f_lpad(string(li_col_found), 2, "0")
							//------------------------
							//
							insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active)
							values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, '', 0, '', 0, :li_unfilled, 1)
							using sqlca;
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
							else
								ls_sql_err_text = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
							end if					
						next
					end if				
					//update lb_col_xref
					//determine index of ls_grpdesc in lsa_lbxref
					integer li_lb_index
					li_lb_index = f_does_string_exist_in_str_array(ref lsa_lbxref, ls_grpdesc, false)
					if(li_lb_index > 0) then
						ls_lbtext = lsa_lbxref[li_lb_index]
						ls_lbtext = ls_lbtext + "|" + string(li_num_emps) + "|" + string(li_num_unfilled) + "|" + string(li_num_blanks)
						lsa_lbxref[li_lb_index] = ls_lbtext
					end if
					
					if(ll_pos_grpid = 9) then
						li_stop = 0
					end if
									
					if(f_len_ext(ls_callnums_inserted) > 0) then
						//need to update records whos callnums were not inserted
						string lsa_callnums_list[]
						string lsa_callnums_inserted[]
						ls_callnums_inserted = f_trim_trailing_char(ls_callnums_inserted, ",")
						integer li_num_callnums_list_items
						integer li_num_callnums_inserted_items
						integer li_num_sorted
						integer li_callnums_to_update
						integer li_cnloop
						string ls_list_callnum
						integer li_callnum_exists
						li_num_callnums_list_items = f_parseoutstring_ext(ls_callnums, ",", ref lsa_callnums_list)
						li_num_callnums_inserted_items = f_parseoutstring_ext(ls_callnums_inserted, ",", ref lsa_callnums_inserted)
						if(li_num_callnums_inserted_items < li_num_callnums_list_items) then
							li_callnums_to_update = (li_num_callnums_list_items - li_num_callnums_inserted_items)
							if(li_callnums_to_update > 0) then
								//get list of callnums to update
								for li_cnloop = 1 to li_num_callnums_list_items
									ls_list_callnum = lsa_callnums_list[li_cnloop]
									li_callnum_exists = f_does_string_exist_in_str_array(lsa_callnums_inserted, ls_list_callnum, true)
									if(li_callnum_exists > 0) then
										lsa_callnums_list[li_cnloop] = ""
									end if
								next
							end if
							//remaining callnums in lsa_callnums_list are the ones that need to be updated
							li_num_sorted = f_sort_str_array(ref lsa_callnums_list)
							//==================================================
							//===== insert callnums not assigned into table ====
							//==================================================					
							long ll_start_update_rec_id
							long ll_start_rownum
							long ll_end_update_rec_id
							long ll_begin_grpid_record_block_id
							ll_start_update_rec_id = 0
							ll_end_update_rec_id = 0
							ll_begin_grpid_record_block_id = 0
							ll_start_rownum = 0
							//
							select id into :ll_begin_grpid_record_block_id from sns_board_specs_others where grpid = :ll_grpid order by id fetch first row only using sqlca;
							//
							select id, nrow into :ll_start_update_rec_id, :ll_start_rownum from sns_board_specs_others where grpid = :ll_grpid and empname is null order by id fetch first row only using sqlca;
							//
							select id into :ll_end_update_rec_id from sns_board_specs_others where grpid = :ll_grpid and empname is null order by id desc fetch first row only using sqlca;
							//
							if((ll_start_update_rec_id > ll_begin_grpid_record_block_id) and (ll_start_update_rec_id <= ll_end_update_rec_id) and (li_callnums_to_update > 0)) then
								string ls_cnloopdata
								integer li_num_callnums_to_insert
								integer li_num_callnums_inserted
								long ll_update_rec_id
								integer li_num_bd_updates
								integer li_num_update_errors
								integer li_num_callnums_list
								li_num_callnums_list = UpperBound(lsa_callnums_list)
								li_num_update_errors = 0
								li_num_bd_updates = 0
								ll_update_rec_id = ll_start_update_rec_id
								li_num_callnums_to_insert = li_callnums_to_update
								for li_cnloop = 1 to li_num_callnums_list
									ls_cnloopdata = lsa_callnums_list[li_cnloop]
									if(f_len_ext(ls_cnloopdata) > 0) then
										if(pos(ls_empname_unfilled, "UNFILLED") > 0) then
											//
											update sns_board_specs_others set callnum = :ls_cnloopdata, empname = :ls_empname_unfilled, isunfilled = 1 where id = :ll_update_rec_id using sqlca;
											//
										else
											//
											update sns_board_specs_others set callnum = :ls_cnloopdata, empname = :ls_empname_unfilled, isunfilled = 0 where id = :ll_update_rec_id using sqlca;
											//
										end if
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_bd_updates++
											ll_update_rec_id++
											if(ll_update_rec_id > ll_end_update_rec_id) then
												exit
											end if
										else
											//
											rollback using sqlca;
											//
											li_num_update_errors++
										end if
									end if
								next
							end if
							
							//old code
							//integer li_update_row_count
							//integer li_cnloop_count
							//li_cnloop_count = 0
							//li_num_bd_updates = 0
							//li_update_row_count = ll_start_rownum
							//for li_cnloop = 1 to li_num_callnums_list_items
							//	if(li_update_row_count < ll_num_avail_positions) then
							//		ls_list_callnum = lsa_callnums_list[li_cnloop]
							//		if(f_len_ext(ls_list_callnum) > 0) then
							//			//
							//			update sns_board_specs_others set callnum = :ls_list_callnum, empname = :ls_empname_unfilled where grpid = :ll_grpid and nrow = :li_update_row_count using sqlca;
							//			//
							//			li_num_bd_updates++
							//			li_update_row_count++
							//		end if
							//	end if
							//	li_cnloop_count++
							//next
							//if(li_num_bd_updates > 0) then
							//	//
							//	commit using sqlca;
							//	//
							//end if
							//==================================================					
							//==================================================		
						end if
					end if
					if(li_num_bak_records > 0) then
						//loop thru lsa_grp_bak_data and update *** UNFILLED *** records
						integer li_bak_loop
						string ls_bak_empname
						string ls_bak_callnum
						string ls_bak_groupname
						long ll_bak_grpid
						string lsa_bak_parseoutdata[]
						integer li_bak_num_parse_items
						string ls_bak_loopdata
						long ll_bak_update_rec_id
						integer li_bak_num_update_errors
						li_bak_num_update_errors = 0
						for li_bak_loop = 1 to li_num_bak_records
							ls_bak_loopdata = lsa_grp_bak_data[li_bak_loop]
							li_bak_num_parse_items = f_parseoutstring_ext(ls_bak_loopdata, gs_delim, ref lsa_bak_parseoutdata)
							if(li_bak_num_parse_items >= 13) then
								ls_bak_empname = lsa_bak_parseoutdata[5]
								ls_bak_callnum = lsa_bak_parseoutdata[7]
								ls_bak_groupname = lsa_bak_parseoutdata[10]
								ll_bak_grpid = f_stol(lsa_bak_parseoutdata[2])
								if((pos(ls_bak_empname, "UNFILLED") > 0) and (ll_bak_grpid > 0)) then
									if(f_len_ext(ls_bak_callnum) > 2) then
										//get next empty position from sns_board_specs_others grpid
										ll_bak_update_rec_id = 0
										//
										select id into :ll_bak_update_rec_id from sns_board_specs_others where grpid = :ll_bak_grpid and active = 1 and empname is null and empno = 0
										and callnum is null and positionid is null order by nrow, ncol fetch first row only using sqlca;
										//
										if(ll_bak_update_rec_id > 0) then
											//
											update sns_board_specs_others set empname = :ls_bak_empname, empno = 0, callnum = :ls_bak_callnum, isunfilled = 1, groupname = :ls_bak_groupname, active = 1, orderby = 0
											where id = :ll_bak_update_rec_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
											else
												ls_sql_err_text = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												li_bak_num_update_errors++
											end if
										end if
									end if
								end if
							end if
						next
						if(li_bak_num_update_errors > 0) then
							MessageBox("Notification","One or more errors in assigning UNFILLED position")					
						end if
					end if
				end if //end ls_refresh_grpids check					
			else
				//
				rollback using sqlca;
				//
			end if
		next //ll_row
	end if
	//restore orderby's
	integer li_num_ob_items
	string ls_ob_grpid
	string ls_ob_callnum
	string ls_ob_orderby
	long ll_ob_grpid
	integer li_ob_orderby
	integer li_num_ob_update_errors
	li_num_ob_update_errors = 0
	//grpid, callnum, orderby
	li_num_ob_items = lb_orderby_bak.totalitems()
	if(li_num_ob_items > 0) then
		for li_oloop = 1 to li_num_ob_items
			ls_oloopdata = lb_orderby_bak.text(li_oloop)
			li_num_parse_items = f_parseoutstring_ext(ls_oloopdata, gs_delim, ref lsa_parseoutdata)
			if(li_num_parse_items >= 3) then
				ls_ob_grpid = lsa_parseoutdata[1]
				ls_ob_callnum = lsa_parseoutdata[2]
				ls_ob_orderby = lsa_parseoutdata[3]
				ll_ob_grpid = f_stol(ls_ob_grpid)
				li_ob_orderby = f_stoi(ls_ob_orderby)
				if((ll_ob_grpid > 0) and (f_len_ext(ls_ob_callnum) > 0) and (li_ob_orderby >= 0)) then
					//
					update sns_board_specs_others set orderby = :li_ob_orderby where grpid = :ll_ob_grpid and callnum = :ls_ob_callnum using sqlca;
					//
					if(sqlca.sqlcode = -1) then
						li_num_ob_update_errors++
					end if
				end if
			end if
		next
		if(li_num_ob_update_errors = 0) then
			//
			commit using sqlca;
			//
		else
			//
			rollback using sqlca;
			//
			MessageBox("Notification","One or more errors occured restoring backup orderby values!")
		end if
	end if	
	//========================================================================================
	//reload refresh grpids data windows
	long ll_num_inactive_group_employees
	if(pos(ls_refresh_grpids, ",1,") > 0) then
		ll_num_retrieved = 0
		dw_a.settransobject(sqlca)
		ll_num_retrieved = dw_a.Retrieve(1)
	end if
	if(pos(ls_refresh_grpids, ",2,") > 0) then
		dw_b.settransobject(sqlca)
		dw_b.Retrieve(2)
	end if
	if(pos(ls_refresh_grpids, ",3,") > 0) then
		dw_c.settransobject(sqlca)
		ll_num_retrieved = 0
		ll_num_retrieved = dw_c.Retrieve(3)
	end if
	if(pos(ls_refresh_grpids, ",4,") > 0) then	
		dw_d.settransobject(sqlca)
		dw_d.Retrieve(4)
	end if
	if(pos(ls_refresh_grpids, ",5,") > 0) then	
		dw_rec1.settransobject(sqlca)
		dw_rec1.Retrieve(5)
	end if
	if(pos(ls_refresh_grpids, ",6,") > 0) then	
		dw_rec2.settransobject(sqlca)
		dw_rec2.Retrieve(6)
	end if
	if(pos(ls_refresh_grpids, ",12,") > 0) then	
		dw_smcont.settransobject(sqlca)
		dw_smcont.Retrieve(12)
	end if
	if(pos(ls_refresh_grpids, ",52,") > 0) then
		dw_fto.settransobject(sqlca)
		ll_num_retrieved = dw_fto.Retrieve(52)
		if(ll_num_retrieved = 0) then
			dw_fto.insertrow(0)
			dw_fto.setitem(1, "grpteamid", "FTO {52}")
		end if
	end if
	if(pos(ls_refresh_grpids, ",8,") > 0) then	
		dw_em1.settransobject(sqlca)
		dw_em1.Retrieve(8)
	end if
	if(pos(ls_refresh_grpids, ",9,") > 0) then	
		dw_em2.settransobject(sqlca)
		dw_em2.Retrieve(9)
	end if
	if(pos(ls_refresh_grpids, ",10,") > 0) then
		dw_emsro.settransobject(sqlca)
		dw_emsro.Retrieve(10)
	end if
	if(pos(ls_refresh_grpids, ",11,") > 0) then	
		dw_vine.settransobject(sqlca)
		dw_vine.Retrieve(11)
	end if
	if(pos(ls_refresh_grpids, ",128,") > 0) then	
		dw_unfilled.settransobject(sqlca)
		ll_num_retrieved = 0
		ll_num_retrieved = dw_unfilled.Retrieve(128)
		if(ll_num_retrieved = 0) then
			dw_unfilled.insertrow(0)
			dw_unfilled.setitem(1, "grpteamid", "UNFILLED {128}")
			//below code will clear out header text and row 1 contents
			//ll_num_inactive_group_employees = 0
			////
			//select count(*) into :ll_num_inactive_group_employees from sns_board_specs_others where grpid = 128 and empname is null and empno = 0 using sqlca;
			////
			//if(ll_num_inactive_group_employees >= 12) then
			//	dw_unfilled.deleterow(1)
			//end if
		end if
	end if	
//	dw_lt_teamabcd.settransobject(sqlca)
//	dw_lt_teamabcd.Retrieve("12 %")
//	dw_lt_teamscfto.settransobject(sqlca)
//	dw_lt_teamscfto.Retrieve("10 %")
//	dw_ltrec12.settransobject(sqlca)
//	dw_ltrec12.Retrieve("11 %")
//	dw_lt_teamem.settransobject(sqlca);
//	dw_lt_teamem.Retrieve("13 %")
//	dw_lt_teamvine.settransobject(sqlca);
//	dw_lt_teamvine.Retrieve("14 %")
	if(pos(ls_refresh_grpids, ",129,") > 0) then
		dw_team_resvrs.settransobject(sqlca);
		dw_team_resvrs.Retrieve(129)
	end if
	if(pos(ls_refresh_grpids, ",131,") > 0) then	
		dw_unassigned.settransobject(sqlca);
		ll_num_retrieved = 0
		ll_num_retrieved = dw_unassigned.Retrieve(131)
		if(ll_num_retrieved = 0) then
			dw_unassigned.insertrow(0)
			dw_unassigned.setitem(1, "grpteamid", "UNASSIGNED {131}")
			//below code will clear out header text and row 1 contents
			//ll_num_inactive_group_employees = 0
			////
			//select count(*) into :ll_num_inactive_group_employees from sns_board_specs_others where grpid = 131 and empname is null and empno = 0 using sqlca;
			////
			//if(ll_num_inactive_group_employees >= 12) then
			//	dw_unassigned.deleterow(1)
			//end if
		end if
	end if	
	//========================================================================================
	sle_refresh_grpids.text = ""
	close(w_processing)
end if

//if(f_len_ext(ls_callnums_inserted) > 0) then
//						//need to update records whos callnums were not inserted
//						string lsa_callnums_list[]
//						string lsa_callnums_inserted[]
//						ls_callnums_inserted = f_trim_trailing_char(ls_callnums_inserted, ",")
//						integer li_num_callnums_list_items
//						integer li_num_callnums_inserted_items
//						integer li_num_sorted
//						integer li_callnums_to_update
//						integer li_cnloop
//						string ls_list_callnum
//						integer li_callnum_exists
//						li_num_callnums_list_items = f_parseoutstring_ext(ls_callnums, ",", ref lsa_callnums_list)
//						li_num_callnums_inserted_items = f_parseoutstring_ext(ls_callnums_inserted, ",", ref lsa_callnums_inserted)
//						if(li_num_callnums_inserted_items < li_num_callnums_list_items) then
//							li_callnums_to_update = (li_num_callnums_list_items - li_num_callnums_inserted_items)
//							if(li_callnums_to_update > 0) then
//								//get list of callnums to update
//								for li_cnloop = 1 to li_num_callnums_list_items
//									ls_list_callnum = lsa_callnums_list[li_cnloop]
//									li_callnum_exists = f_does_string_exist_in_str_array(lsa_callnums_inserted, ls_list_callnum, true)
//									if(li_callnum_exists > 0) then
//										lsa_callnums_list[li_cnloop] = ""
//									end if
//								next
//							end if
//							//remaining callnums in lsa_callnums_list are the ones that need to be updated
//							li_num_sorted = f_sort_str_array(ref lsa_callnums_list)
//							long ll_start_update_rec_id
//							long ll_start_rownum
//							//
//							select id, nrow into :ll_start_update_rec_id, :ll_start_rownum from sns_board_specs_others where grpid = :ll_grpid and empname is null fetch first row only using sqlca;
//							//
//							integer li_update_row_count
//							integer li_num_bd_updates
//							integer li_cnloop_count
//							li_cnloop_count = 0
//							li_num_bd_updates = 0
//							li_update_row_count = ll_start_rownum
//							for li_cnloop = 1 to li_num_callnums_list_items
//								if(li_update_row_count < ll_num_avail_positions) then
//									ls_list_callnum = lsa_callnums_list[li_cnloop]
//									if(f_len_ext(ls_list_callnum) > 0) then
//										//
//										update sns_board_specs_others set callnum = :ls_list_callnum, empname = :ls_empname_unfilled where grpid = :ll_grpid and nrow = :li_update_row_count using sqlca;
//										//
//										li_num_bd_updates++
//										li_update_row_count++
//									end if
//								end if
//								li_cnloop_count++
//							next
//							if(li_num_bd_updates > 0) then
//								//
//								commit using sqlca;
//								//
//							end if
//							li_stop = 9
//						end if
//					else
//						//code below not implemented yet
//						if(ll_grpid = 131) then
//							integer li_num_positions2_131
//							//
//							select count(*) into :li_num_positions2_131 from sns_staffing_grps_positions2 where grpid = 131 using sqlca;
//							if(li_num_positions2_131 > 0) then
//							end if
//							li_stop = 131			
//						end if
//					end if //f_len_ext(ls_callnums_inserted) > 0
//	ls_trun_sql = "truncate table SNS_BOARD_SPECS_OTHERS"
//	execute immediate :ls_trun_sql using sqlca;
//	if(sqlca.sqlcode <> -1) then
//		//
//		commit using sqlca;
//		//
//		li_num_successful_executes++
//		bcontinue = true
//	else
//		ls_sql_err_text = sqlca.sqlerrtext
//		//
//		rollback using sqlca;
//		//
//		ls_trun_errors = "truncate table SNS_BOARD_SPECS_OTHERS error: " 
//		ls_trun_errors += ls_sql_err_text
//	end if
//	if(bcontinue = true) then
//		bcontinue = false
//		ls_trun_sql = "DROP SEQUENCE SNS_BOARD_SPECS_OTHERS_id"
//		execute immediate :ls_trun_sql using sqlca;
//		if(sqlca.sqlcode <> -1) then
//			//
//			commit using sqlca;
//			//
//			li_num_successful_executes++
//			bcontinue = true
//		else
//			ls_sql_err_text = sqlca.sqlerrtext
//			//
//			rollback using sqlca;
//			//
//			if(f_len_ext(ls_trun_errors) > 0) then
//				ls_trun_errors += gs_crlf
//			end if
//			ls_trun_errors += "drop sequence sns_board_specs_others_id error:"
//			ls_trun_errors += ls_sql_err_text
//		end if
//	end if
//	if(bcontinue = true) then
//		bcontinue = false
//		ls_trun_sql = "CREATE SEQUENCE SNS_BOARD_SPECS_OTHERS_id "
//		ls_trun_sql += "START WITH 1 "
//		ls_trun_sql += "INCREMENT BY 1 "
//		ls_trun_sql += "NOCACHE "
//		ls_trun_sql += "NOCYCLE"
//		execute immediate :ls_trun_sql using sqlca;
//		if(sqlca.sqlcode <> -1) then
//			//
//			commit using sqlca;
//			//
//			li_num_successful_executes++
//			bcontinue = true
//		else
//			ls_sql_err_text = sqlca.sqlerrtext
//			//
//			rollback using sqlca;
//			//
//			if(f_len_ext(ls_trun_errors) > 0) then
//				ls_trun_errors += gs_crlf
//			end if
//			ls_trun_errors += "create sequence sns_board_specs_others_id error:"
//			ls_trun_errors += ls_sql_err_text
//		end if
//	end if
//	if(bcontinue = true) then
//		bcontinue = false
//		ls_trun_sql = "create or replace trigger SNS_BOARD_SPECS_OTHERS_trig "
//		ls_trun_sql += "before insert on SNS_BOARD_SPECS_OTHERS "
//		ls_trun_sql += "for each row "
//		ls_trun_sql += "begin "
//		ls_trun_sql += "select SNS_BOARD_SPECS_OTHERS_id.nextval, sysdate, sysdate into :new.ID, :new.CREATED_DT, :new.LUPDATED_DT from dual; "
//		ls_trun_sql += "end;"
//		execute immediate :ls_trun_sql using sqlca;
//		if(sqlca.sqlcode <> -1) then
//			//
//			commit using sqlca;
//			//
//			li_num_successful_executes++
//			bcontinue = true
//		else
//			ls_sql_err_text = sqlca.sqlerrtext
//			//
//			rollback using sqlca;
//			//
//			if(f_len_ext(ls_trun_errors) > 0) then
//				ls_trun_errors += gs_crlf
//			end if
//			ls_trun_errors += "create or replace trigger SNS_BOARD_SPECS_OTHERS_trig error:"
//			ls_trun_errors += ls_sql_err_text
//		end if
//	end if
//	if(bcontinue = true) then
//		bcontinue = false
//		ls_trun_sql = "create or replace trigger SNS_BOARD_SPECS_OTHERS_trig1 "
//		ls_trun_sql += "before update on SNS_BOARD_SPECS_OTHERS "
//		ls_trun_sql += "for each row "
//		ls_trun_sql += "begin "
//		ls_trun_sql += "select sysdate into :new.lupdated_dt from dual; "
//		ls_trun_sql += "end;"
//		execute immediate :ls_trun_sql using sqlca;
//		if(sqlca.sqlcode <> -1) then
//			//
//			commit using sqlca;
//			//
//			li_num_successful_executes++
//			bcontinue = true
//		else
//			ls_sql_err_text = sqlca.sqlerrtext
//			//
//			rollback using sqlca;
//			//
//			if(f_len_ext(ls_trun_errors) > 0) then
//				ls_trun_errors += gs_crlf
//			end if
//			ls_trun_errors += "create or replace trigger SNS_BOARD_SPECS_OTHERS_trig1 error:"
//			ls_trun_errors += ls_sql_err_text
//		end if
//	end if
//	if(f_len_ext(ls_trun_errors) > 0) then
//		string ls_terror_msg
//		ls_terror_msg = "Truncate table SNS_BOARD_SPECS_OTHERS failed. Errors:" + gs_crlf
//		ls_terror_msg += ls_trun_errors
//		MessageBox("Notification", ls_terror_msg);
//	else

//
//	long ll_num_retrieved
//	ll_num_retrieved = f_populate_datawindow(ref dw_specs_others, rb_all, rb_corrections, rb_patrol, rb_judicial, rb_emergsvcs, ref sqlca)
//	sle_num_others.text = string(ll_num_retrieved)

//			if(cbx_use_pos.checked = false) then
//				if(ll_grpid <> 131) then 
//					//====================================
//					//===== ALL BUT UNASSIGNED (131) =====
//					//====================================
//					li_num_emps = 0
//					li_num_unfilled = 0
//					li_num_blanks = 0
//					for li_iloop = 1 to li_num_rows  //1 to 12
//						bInsertPosSuptTables = false
//						//---------------------------
//						ll_found_id = 0
//						ls_found_addinfo = ""
//						ls_found_empname = ""
//						ll_found_empno = 0
//						li_found_super_lvl = 0
//						ls_lookup_callnum = ""
//						ls_sql_err_text = ""			
//						//---------------------------		
//						if(li_iloop <= UpperBound(lsa_callnums)) then
//							ls_lookup_callnum = trim(upper(lsa_callnums[li_iloop]))
//						end if
//						if(li_iloop <= li_num_others_to_process) then
//							lb_devel.additem(string(li_iloop) + "-add others-filled-callnum " + ls_grpid)
//							ll_found_id = 0
//							ll_found_id = f_does_string_exist_in_str_array(lsa_other, ls_lookup_callnum, false)
//							if(ll_found_id > 0) then	
//								li_looprow++						
//								//---------------------------						
//								li_actual_row = (li_looprow + li_offset_row)
//								ls_row = f_lpad(string(li_actual_row), 2, "0")
//								li_col_found = f_deter_grpdesc_colnum(ref lb_col_xref, ls_grpdesc)
//								ls_col = f_lpad(string(li_col_found), 2, "0")
//								//------------------------
//								select a.id, a.addinfo, b.empname, b.empno, b.super_lvl, a.assgnd_empno into :ll_found_id, :ls_found_addinfo, :ls_found_empname, :ll_found_empno, :li_found_super_lvl, :ll_found_assgnd_empno
//								from sns_staffing_grps_positions2 a, sns_employees b
//								where a.grpid = :ll_grpid
//								and a.callnum = :ls_lookup_callnum
//								and b.empno = a.assgnd_empno
//								//and a.assgnd_empno = b.empno
//								using sqlca;
//								//------------------------			
//								if(ll_found_empno = 0) then
//									li_unfilled = 1
//									li_num_unfilled++
//								else
//									li_unfilled = 0
//								end if
//								if(IsNull(ls_found_empname) = false) then
//									if(f_len_ext(ls_found_empname) > 0) then
//										li_num_emps++
//									end if
//								else
//									if((f_len_ext(ls_lookup_callnum) > 0) and (pos(ls_lookup_callnum, "1J") > 0) and (li_unfilled = 1)) then
//										ls_found_empname = ls_empname_unfilled //"*** UNFILLED ***"
//									else
//										ls_found_empname = ""
//									end if
//								end if
//								
//								//
//								insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active)
//								values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, :ls_found_empname, :ll_found_empno, :ls_lookup_callnum, :li_found_super_lvl, :li_unfilled, 1)
//								using sqlca;
//								//
//								//insert#1
//								//
//								if(sqlca.sqlcode <> -1) then
//									//
//									commit using sqlca;
//									//
//									li_num_inserted++
//									if(li_unfilled = 1) then
//										bInsertPosSuptTables = true
//									end if
//								else
//									ls_sql_err_text = sqlca.sqlerrtext
//									//
//									rollback using sqlca;
//									//
//									li_num_errors++
//								end if						
//							end if
//						elseif(li_iloop <= li_num_callnums_to_process) then
//							lb_devel.additem(string(li_iloop) + "-add others-unfilled-callnum " + ls_grpid)
//							if(f_len_ext(ls_lookup_callnum) > 0) then
//								//ls_lookup_callnumber_only = f_trimstr_ext(ls_lookup_callnum, "1J", true)
//								//ls_lookup_callnumber_only = f_trimstr_multi_chars_ext(ls_lookup_callnum, "1J")
//								ls_lookup_callnumber_only = f_trimstr_multi_chars_ext(ls_lookup_callnum, "1J")
//							end if
//							//-----------------------------
//	//						select id, addinfo, assgnd_empno into :ll_found_id, :ls_found_addinfo, :ll_found_empno
//	//						from sns_staffing_grps_positions2
//	//						where grpid = :ll_grpid
//	//						and ((addinfo = :ls_lookup_callnumber_only) or (callnum = :ls_lookup_callnum))
//	//						using sqlca;
//							//-----------------------------
//							//if(ll_found_id > 0) then
//								li_looprow++						
//								//---------------------------						
//								li_actual_row = (li_looprow + li_offset_row)
//								ls_row = f_lpad(string(li_actual_row), 2, "0")
//								li_col_found = f_deter_grpdesc_colnum(ref lb_col_xref, ls_grpdesc)
//								ls_col = f_lpad(string(li_col_found), 2, "0")
//								//------------------------
//							
//								if(ll_found_empno = 0) then
//									li_unfilled = 1
//									li_num_unfilled++
//								else
//									li_unfilled = 0
//								end if
//								if(IsNull(ls_found_empname) = false) then
//									if(f_len_ext(ls_found_empname) > 0) then
//										li_num_emps++
//									end if
//								end if
//								//
//								insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active)
//								values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, :ls_empname_unfilled, 0, :ls_lookup_callnum, 0, :li_unfilled, 1)
//								using sqlca;
//								//
//								//insert#2
//								//
//								if(sqlca.sqlcode <> -1) then
//									//
//									commit using sqlca;
//									//
//									li_num_inserted++
//									if(li_unfilled = 1) then
//										bInsertPosSuptTables = true
//									end if
//								else
//									ls_sql_err_text = sqlca.sqlerrtext
//									//
//									rollback using sqlca;
//									//
//									li_num_errors++
//								end if
//							//end if							
//						else
//							lb_devel.additem(string(li_iloop) + "-add empty record " + ls_grpid)
//								li_looprow++						
//								//---------------------------						
//								li_actual_row = (li_looprow + li_offset_row)
//								ls_row = f_lpad(string(li_actual_row), 2, "0")
//								li_col_found = f_deter_grpdesc_colnum(ref lb_col_xref, ls_grpdesc)
//								ls_col = f_lpad(string(li_col_found), 2, "0")
//								//------------------------
//							
//							if(ll_found_empno = 0) then
//								li_unfilled = -1
//								li_num_blanks++
//							else
//								li_unfilled = 0
//							end if				
//							//
//							if(IsNull(ls_found_empname) = false) then
//								if(f_len_ext(ls_found_empname) > 0) then
//									li_num_emps++
//								end if
//							end if
//							insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active)
//							values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, '', 0, '', 0, :li_unfilled, 1)
//							using sqlca;
//							//
//							//insert#3
//							//
//							if(sqlca.sqlcode <> -1) then
//								//
//								commit using sqlca;
//								//
//								li_num_inserted++
//							else
//								ls_sql_err_text = sqlca.sqlerrtext
//								//
//								rollback using sqlca;
//								//
//								li_num_errors++
//							end if						
//						end if
//						//====================================
//						//insert position2 and support records
//						//=====================================
//						bInsertPosSuptTables = false
//						if(bInsertPosSuptTables = true) then
//							if(ll_grpid > 0) then
//								ls_vehnum = "."
//								dec_basepay = 0.0
//								ll_xrefid = 0
//								ls_jobcode = "TBD"
//								ls_jobtitle = "TBD"					
//								ls_callnum = ""
//								ls_addinfo = "."
//								ll_assgnd_empno = 0
//								ls_error = ""
//								li_rtn_value = 0
//								if(ll_found_empno = 0) then
//									ll_assgnd_empno = 0
//								else
//									ll_assgnd_empno = ll_found_empno
//								end if			
//								if(f_len_ext(ls_lookup_callnum) > 2) then
//									ls_callnum = ls_lookup_callnum
//								else
//									if(f_len_ext(ls_lookup_callnumber_only) > 0) then
//										ls_callnum = "1J" + ls_lookup_callnumber_only
//										ls_addinfo = ls_lookup_callnumber_only
//									end if
//								end if
//								if(f_len_ext(ls_funddept) = 0) then
//									ls_funddept = ""
//								end if
//								if(f_len_ext(ls_positionid) = 0) then
//									ls_positionid = ls_temp_positionid
//								end if
//								
//								long ll_max_pos2_id_before
//								long ll_max_pos2_id_after
//								ll_max_pos2_id_before = 0
//								ll_max_pos2_id_after = 0
//								//
//								select id into :ll_max_pos2_id_before from sns_staffing_grps_positions2 order by id desc fetch first row only using sqlca;
//								//
//								//
//								insert into sns_staffing_grps_positions2(grpid, callnum, assgnd_empno, funddept, addinfo, vehnum, positionid, jobcode, jobtitle, basepay, xrefid, active)
//								values(:ll_grpid, :ls_callnum, :ll_assgnd_empno, :ls_funddept, :ls_addinfo, :ls_vehnum, :ls_positionid, :ls_jobcode, :ls_jobtitle, :dec_basepay, :ll_xrefid, 1)
//								using sqlca;
//								//
//								if(sqlca.sqlcode <> -1) then
//									//
//									commit using sqlca;
//									//
//									
//									//
//									select id into :ll_max_pos2_id_after from sns_staffing_grps_positions2 order by id desc fetch first row only using sqlca;
//									//								
//									
//									//f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
//									li_rtn_value = f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_assgnd_empno, ls_funddept, ls_addinfo, ls_vehnum, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, true, ref ls_error, ref sqlca)
//									//
//									
//								else
//									ls_sql_err_text = sqlca.sqlerrtext
//									//
//									rollback using sqlca;
//									//
//								end if			
//							end if //ll_grpid > 0
//						end if	
//						if(li_iloop = li_num_rows) then
//							li_stop = 1
//						end if
//					next //li_iloop
//					if(li_looprow < li_num_rows) then
//						//=================
//						//insert blank rows
//						//=================
//						li_last_nrow_inserted = 0
//						//
//						select nrow into :li_last_nrow_inserted from sns_board_specs_others order by id desc fetch first row only using sqlca;
//						//
//						li_last_nrow_inserted = (li_last_nrow_inserted - li_offset_row)
//						if(li_looprow = li_last_nrow_inserted) then
//							li_looprow++
//						end if
//						//insert blank rows
//						for li_bloop = li_looprow to li_num_rows
//							//---------------------------						
//							li_actual_row = (li_bloop + li_offset_row)
//							ls_row = f_lpad(string(li_actual_row), 2, "0")
//							li_col_found = f_deter_grpdesc_colnum(ref lb_col_xref, ls_grpdesc)
//							ls_col = f_lpad(string(li_col_found), 2, "0")
//							//------------------------
//							li_unfilled = -1
//							li_num_blanks++
//							//
//							insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active)
//							values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, '', 0, '', 0, :li_unfilled, 1)
//							using sqlca;
//							//
//							if(sqlca.sqlcode <> -1) then
//								//
//								commit using sqlca;
//								//
//								li_num_inserted++
//							else
//								ls_sql_err_text = sqlca.sqlerrtext
//								//
//								rollback using sqlca;
//								//
//								li_num_errors++
//							end if						
//						next //li_bloop
//					end if
//					//MessageBox("devel","pause")
//				else
//					//============================
//					//===== UNASSIGNED (131) =====
//					//============================
//					
//					
//					
//					
//					li_stop = 0
//				end if
//			else


//			if(ll_grpid = 131) then //UNASSIGNED GROUP
//				//============================
//				//===== UNASSIGNED (131) =====
//				//============================
//				lsa_unassigned = lsa_nulls
//				li_num_unassigned = 0
//				integer li_uloop
//				//get current list of unassigned employess
//				ls_unassigned_sql = ls_sql_pos2_template
//				ls_unassigned_sql = f_replace_string_in_string(ls_unassigned_sql, "GGGGGG", ls_grpid)
////				ls_unassigned_sql = "select 'POS-' || to_char(a.id) as POS, "
////				ls_unassigned_sql += "'EMP-' || to_char(b.id) as EMP, "
////				ls_unassigned_sql += "b.empname, " 
////				ls_unassigned_sql += "a.assgnd_empno, " 
////				ls_unassigned_sql += "a.funddept, " 
////				ls_unassigned_sql += "a.addinfo, " 
////				ls_unassigned_sql += "c.grpteam || ' {' || c.id || '}' as grpteamid, " 
////				ls_unassigned_sql += "b.positionid, " 
////				ls_unassigned_sql += "a.callnum, " 
////				ls_unassigned_sql += "a.positionid, "
////				ls_unassigned_sql += "'Y' as posvis, "
////				ls_unassigned_sql += "'Y' as empvis, "
////				ls_unassigned_sql += "b.super_lvl "
////				ls_unassigned_sql += "from sns_staffing_grps_positions2 a, sns_employees b, sns_staffing_groups c "
////				ls_unassigned_sql += "where b.empno = a.assgnd_empno "
////				ls_unassigned_sql += "and a.active = 1 "
////				ls_unassigned_sql += "and a.grpid = 131 "
////				ls_unassigned_sql += "and c.id = a.grpid "
////				ls_unassigned_sql += "and b.active = 1 "
////				ls_unassigned_sql += "order by b.super_lvl desc, a.callnum "
//				li_num_unassigned = f_app_ds_populate_string_array_by_sql(ref lsa_unassigned, ls_unassigned_sql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
//				if(li_num_unassigned > 0) then
//					string ls_data
//					string ls_empname
//					string ls_callnum
//					long ll_empno
//					integer li_issuper
//					for li_uloop = 1 to ll_num_spec_rows
//						li_actual_row = (li_uloop + li_offset_row)
//						ls_row = f_lpad(string(li_actual_row), 2, "0")
//						li_col_found = f_deter_grpdesc_colnum(ref lb_col_xref, ls_grpdesc)
//						ls_col = f_lpad(string(li_col_found), 2, "0")
//						if(li_uloop <= li_num_unassigned) then
//							ls_data = lsa_unassigned[li_uloop]
//							li_num_parse_items = f_parseoutstring_ext(ls_data, gs_delim, ref lsa_parseoutdata)
//							if(li_num_parse_items >= 13) then
//								// 1        2        3          4          5        6       7                  8            9          10            11     12       13
//								//POS      EMP    EMPNAME  ASSGND_EMPNO FUNDDEPT ADDINFO GRPTEAMID        EMP_POSITIONID CALLNUM  POS2_POSITION_ID POSVIS, EMPVIS, SUPER_LVL
//								//POS-1866 EMP-47 RYAN-BRAD    16897    100-42110 115    UNASSIGNED {131} Position-00298 1J119    POSITION-00298   Y       Y       0
//								//POS-1862 EMP-34 NELSON-BROCK 17035    241-42120 119    UNASSIGNED {131} Position-01594 1J139    POSITION-01594   Y       Y       0
//								ls_empname = trim(lsa_parseoutdata[3])
//								ll_empno = f_stol(lsa_parseoutdata[4])
//								ls_callnum = trim(lsa_parseoutdata[9])
//								li_issuper = f_stoi(lsa_parseoutdata[13])
//								li_unfilled = 0
//								//
//								insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active)
//								values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, :ls_empname, :ll_empno, :ls_callnum, :li_issuper, :li_unfilled, 1)
//								using sqlca;
//								//
//							else
//								li_unfilled = 1
//								//
//								insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active)
//								values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, '', 0, '', 0, :li_unfilled, 1)
//								using sqlca;
//								//
//							end if
//							//
//							if(sqlca.sqlcode <> -1) then
//								//
//								commit using sqlca;
//								//
//								li_num_inserted++
//							else
//								ls_sql_err_text = sqlca.sqlerrtext
//								//
//								rollback using sqlca;
//								//
//								li_num_errors++
//							end if								
//						else
//							li_unfilled = 1
//							//insert blank row
//							insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active)
//							values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, '', 0, '', 0, :li_unfilled, 1)
//							using sqlca;
//							//
//							if(sqlca.sqlcode <> -1) then
//								//
//								commit using sqlca;
//								//
//								li_num_inserted++
//							else
//								ls_sql_err_text = sqlca.sqlerrtext
//								//
//								rollback using sqlca;
//								//
//								li_num_errors++
//							end if								
//						end if
//					next
//				else
//					//insert blank row record
//					for li_uloop = 1 to ll_num_spec_rows
//						li_actual_row = (li_uloop + li_offset_row)
//						ls_row = f_lpad(string(li_actual_row), 2, "0")
//						li_col_found = f_deter_grpdesc_colnum(ref lb_col_xref, ls_grpdesc)
//						ls_col = f_lpad(string(li_col_found), 2, "0")
//						li_unfilled = 1
//						//
//						insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active)
//						values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, '', 0, '', 0, :li_unfilled, 1)
//						using sqlca;
//						//
//						if(sqlca.sqlcode <> -1) then
//							//
//							commit using sqlca;
//							//
//							li_num_inserted++
//						else
//							ls_sql_err_text = sqlca.sqlerrtext
//							//
//							rollback using sqlca;
//							//
//							li_num_errors++
//						end if						
//					next
//				end if
//			else
//				//====================================
//				//===== ALL BUT UNASSIGNED (131) =====
//				//====================================
//				ls_other_sql = ls_sql_pos2_template
//				ls_other_sql = f_replace_string_in_string(ls_other_sql, "GGGGGG", ls_grpid)
//				lsa_other = lsa_nulls
//				li_num_others = f_app_ds_populate_string_array_by_sql(ref lsa_other, ls_other_sql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
//				integer li_found_index
//				//---------------------------						
//				for li_iloop = 1 to li_num_rows
//					//---------------------------
//					ll_found_id = 0
//					ls_found_addinfo = ""
//					ls_found_empname = ""
//					ll_found_empno = 0
//					li_found_super_lvl = 0
//					ls_lookup_callnum = ""
//					ls_sql_err_text = ""			
//					//---------------------------
//					li_actual_row = (li_iloop + li_offset_row)
//					ls_row = f_lpad(string(li_actual_row), 2, "0")
//					li_col_found = f_deter_grpdesc_colnum(ref lb_col_xref, ls_grpdesc)
//					ls_col = f_lpad(string(li_col_found), 2, "0")
//					if(li_iloop <= li_loop_num_callnums) then 
//						ls_lookup_callnum = trim(upper(lsa_callnums[li_iloop]))
//						ll_found_id = 0
//						ll_found_id = f_does_string_exist_in_str_array(lsa_other, ls_lookup_callnum, false)
//						if(ll_found_id > 0) then
//							//------------------------
//							select a.id, a.addinfo, b.empname, b.empno, b.super_lvl into :ll_found_id, :ls_found_addinfo, :ls_found_empname, :ll_found_empno, :li_found_super_lvl
//							from sns_staffing_grps_positions2 a, sns_employees b
//							where a.grpid = :ll_grpid
//							and a.callnum = :ls_lookup_callnum
//							and a.assgnd_empno = b.empno
//							using sqlca;
//							//------------------------						
//							if(ll_found_empno = 0) then
//								li_unfilled = 1
//							else
//								li_unfilled = 0
//							end if
//							//
//							insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active)
//							values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, :ls_found_empname, :ll_found_empno, :ls_lookup_callnum, :li_found_super_lvl, :li_unfilled, 1)
//							using sqlca;
//							//
//							if(sqlca.sqlcode <> -1) then
//								//
//								commit using sqlca;
//								//
//								li_num_inserted++
//							else
//								ls_sql_err_text = sqlca.sqlerrtext
//								//
//								rollback using sqlca;
//								//
//								li_num_errors++
//							end if
//						else
//							if(f_len_ext(ls_lookup_callnum) > 0) then
//								//ls_lookup_callnumber_only = f_trimstr_ext(ls_lookup_callnum, "1J", true)
//								//ls_lookup_callnumber_only = f_trimstr_multi_chars_ext(ls_lookup_callnum, "1J")
//								ls_lookup_callnumber_only = f_trimstr_multi_chars_ext(ls_lookup_callnum, "1J")
//							end if
//							//-----------------------------
//							select id, addinfo, assgnd_empno into :ll_found_id, :ls_found_addinfo, :ll_found_empno
//							from sns_staffing_grps_positions2
//							where grpid = :ll_grpid
//							and ((addinfo = :ls_lookup_callnumber_only) or (callnum = :ls_lookup_callnum))
//							using sqlca;
//							//-----------------------------
//							if(ll_found_id > 0) then
//								if(ll_found_empno = 0) then
//									li_unfilled = 1
//								else
//									li_unfilled = 0
//								end if
//								//
//								insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active)
//								values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, '', 0, :ls_lookup_callnum, 0, :li_unfilled, 1)
//								using sqlca;
//								//
//								if(sqlca.sqlcode <> -1) then
//									//
//									commit using sqlca;
//									//
//									li_num_inserted++
//								else
//									ls_sql_err_text = sqlca.sqlerrtext
//									//
//									rollback using sqlca;
//									//
//									li_num_errors++
//								end if
//							else
//								li_num_not_found++
//								if(ll_found_empno = 0) then
//									li_unfilled = 1
//								else
//									li_unfilled = 0
//								end if				
//								//
//								insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active)
//								values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, '', 0, '', 0, :li_unfilled, 1)
//								using sqlca;
//								//
//								if(sqlca.sqlcode <> -1) then
//									//
//									commit using sqlca;
//									//
//									li_num_inserted++
//								else
//									ls_sql_err_text = sqlca.sqlerrtext
//									//
//									rollback using sqlca;
//									//
//									li_num_errors++
//								end if								
//							end if
//						end if
//						if(f_len_ext(ls_callnums_inserted) > 0) then
//							ls_callnums_inserted += "|"
//						end if
//						ls_callnums_inserted += ls_lookup_callnum						
//					else
//						if(ll_found_empno = 0) then
//							li_unfilled = 1
//						else
//							li_unfilled = 0
//						end if				
//						//
//						insert into sns_board_specs_others(groupname, nrow, ncol, grpid, empname, empno, callnum, issuper, isunfilled, active)
//						values(:ls_groupname, :ls_row, :ls_col, :ll_grpid, '', 0, '', 0, :li_unfilled, 1)
//						using sqlca;
//						//
//						if(sqlca.sqlcode <> -1) then
//							//
//							commit using sqlca;
//							//
//							li_num_inserted++
//						else
//							ls_sql_err_text = sqlca.sqlerrtext
//							//
//							rollback using sqlca;
//							//
//							li_num_errors++
//						end if
//					end if
//				next //iloop
//			end if		
//
	/*
	select a.grpid, a.callnum, a.addinfo, a.positionid, b.empname, b.empno, b.super_lvl
	from sns_staffing_grps_positions2 a, sns_employees b
	where a.grpid = 3
	and a.callnum = '1J130'
	and a.assgnd_empno = b.empno
	grpid,callnum,addinfo,positionid,empname,empno,super_lvl
	3	1J130	130	POSITION-00988	GORDON-COLLIN	15193	1
	*/
	
	/*
	select grpid, callnum, addinfo, positionid, assgnd_empno
	from sns_staffing_grps_positions2
	where grpid = 3
	and ((addinfo = '135') or (callnum = '1J135'))
	grpid,callnum,addinfo,positionid,assgnd_empno
	3	1J135	135	POSITION-00283	0
	*/
	
	
	//long ll_exists_id
	//ls_groupname = f_get_active_group(rb_all, rb_corrections, rb_patrol, rb_judicial, rb_emergsvcs)
	//integer li_num_errors
	//for li_rloop = 1 to gi_max_rows
	//	for li_cloop = 1 to gi_max_cols
	//		ls_row = f_lpad(string(li_rloop),2,"0")
	//		ls_col = f_lpad(string(li_cloop),2,"0")
	//		ll_exists_id = 0
	//		//
	//		select id into :ll_exists_id from sns_board_specs_others where nrow = :ls_row and ncol = :ls_col using sqlca;
	//		//
	//		if(ll_exists_id = 0) then
	//			//
	//			insert into sns_board_specs_others(nrow,ncol,groupname, active)
	//			values(:ls_row, :ls_col, :ls_groupname, 0)
	//			using sqlca;
	//			//
	//			if(sqlca.sqlcode <> -1) then
	//				//
	//				commit using sqlca;
	//				//
	//			else
	//				li_num_errors++
	//				//
	//				rollback using sqlca;
	//				//
	//			end if
	//		end if
	//	next
	//next
	//sle_num_init_errors.text = string(li_num_errors)


end event

type sle_drag_drop_col from singlelineedit within w_pat_assmts_updates
integer x = 5477
integer y = 4880
integer width = 402
integer height = 96
integer taborder = 90
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_45 from statictext within w_pat_assmts_updates
integer x = 5157
integer y = 4888
integer width = 311
integer height = 76
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "drop col#:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_44 from statictext within w_pat_assmts_updates
integer x = 2601
integer y = 4892
integer width = 293
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "from col#:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_drag_from_col from singlelineedit within w_pat_assmts_updates
integer x = 2903
integer y = 4880
integer width = 402
integer height = 96
integer taborder = 80
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type dw_lt_reserves from datawindow within w_pat_assmts_updates
integer x = 119
integer y = 2820
integer width = 1015
integer height = 104
integer taborder = 60
string title = "none"
string dataobject = "dw_team_lt"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event doubleclicked;//change supervisor
long ll_row 
ll_row = row
string ls_dwoname
ls_dwoname = dwo.name
if((ls_dwoname = "sns_employees_empname") or (ls_dwoname = "datawindow")) then
	//select lieutenant
	string ls_messageparm
	ls_messageparm = "116,64"
	OpenWithParm(w_add_lt, ls_messageparm)
	string ls_selected_username
	ls_selected_username = Message.StringParm //ie: WILLES-DOUGLAS      [14480]
	if(f_len_ext(ls_selected_username) > 0) then
		string ls_empno 
		ls_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
		long ll_empno
		ll_empno = f_stol(ls_empno)
		if(ll_empno > 0) then
			string ls_callnum
			string ls_empname
			integer li_pos
			li_pos = pos(ls_selected_username, "[")
			if(li_pos > 0) then
				ls_empname = trim(mid(ls_selected_username, 1, (li_pos - 1)))
			end if
			ls_callnum = ""
			//
			select callnum into :ls_callnum from sns_staffing_grps_positions2 where assgnd_empno = :ll_empno using sqlca;
			//
			if(IsNull(ls_callnum) = true) then
				ls_callnum = ""
			end if
			dw_lt_reserves.setitem(ll_row, "sns_employees_empname", ls_empname)
			dw_lt_reserves.setitem(ll_row, "sns_staffing_grps_positions2_callnum", ls_callnum)
			//
			update sns_bd_others_layout_specs
			set assgnd_lt = :ll_empno
			where grpid in (129)
			using sqlca;
			//
			if(sqlca.sqlcode <> -1) then
				//
				commit using sqlca;
				//
				dw_lt_reserves.Retrieve(129)
			else
				//
				rollback using sqlca;
				//
			end if
		end if
	end if			
end if
end event

type sle_drag_to_positionid from singlelineedit within w_pat_assmts_updates
integer x = 5477
integer y = 5472
integer width = 535
integer height = 96
integer taborder = 100
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_43 from statictext within w_pat_assmts_updates
integer x = 4951
integer y = 5484
integer width = 507
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "Empno Positionid:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_drag_from_positionid from singlelineedit within w_pat_assmts_updates
integer x = 2903
integer y = 5476
integer width = 782
integer height = 96
integer taborder = 90
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_42 from statictext within w_pat_assmts_updates
integer x = 2377
integer y = 5488
integer width = 507
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "Empno Positionid:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_41 from statictext within w_pat_assmts_updates
integer x = 2245
integer y = 5392
integer width = 649
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "DRAG-FROM_CONTROL:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_drag_from_control from singlelineedit within w_pat_assmts_updates
integer x = 2903
integer y = 5376
integer width = 873
integer height = 96
integer taborder = 90
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_36 from statictext within w_pat_assmts_updates
integer x = 3817
integer y = 4484
integer width = 197
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "ICON:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_icon_filenanme from singlelineedit within w_pat_assmts_updates
integer x = 4023
integer y = 4472
integer width = 1120
integer height = 96
integer taborder = 110
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tw Cen MT Condensed"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_drag_drop_mode from singlelineedit within w_pat_assmts_updates
integer x = 6149
integer y = 4480
integer width = 247
integer height = 96
integer taborder = 90
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_35 from statictext within w_pat_assmts_updates
integer x = 5979
integer y = 4496
integer width = 160
integer height = 64
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long backcolor = 28225279
string text = "MODE:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_24 from statictext within w_pat_assmts_updates
integer x = 5719
integer y = 5388
integer width = 448
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "dw rowcount:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_dragdrop_rowcount from singlelineedit within w_pat_assmts_updates
integer x = 6185
integer y = 5372
integer width = 215
integer height = 96
integer taborder = 100
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_23 from statictext within w_pat_assmts_updates
integer x = 5010
integer y = 5388
integer width = 448
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "#Avail Positions:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_num_avail_positions from singlelineedit within w_pat_assmts_updates
integer x = 5477
integer y = 5372
integer width = 215
integer height = 96
integer taborder = 100
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_22 from statictext within w_pat_assmts_updates
integer x = 2254
integer y = 4244
integer width = 919
integer height = 64
integer textsize = -8
integer weight = 700
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 16711680
long backcolor = 553648127
string text = "Additional Mouse Button Functions"
boolean focusrectangle = false
end type

type lb_1 from listbox within w_pat_assmts_updates
integer x = 2258
integer y = 4320
integer width = 1047
integer height = 136
integer taborder = 30
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long backcolor = 65280
string item[] = {"1. (doubleclick super_lvl to change setting)","2. (rightclick to delete Employee or **unfilled**)"}
borderstyle borderstyle = stylelowered!
end type

type st_40 from statictext within w_pat_assmts_updates
integer x = 4933
integer y = 4600
integer width = 197
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "header"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_drag_drop_hdrtext from singlelineedit within w_pat_assmts_updates
integer x = 5152
integer y = 4576
integer width = 1248
integer height = 96
integer taborder = 90
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_drag_from_hdrtext from singlelineedit within w_pat_assmts_updates
integer x = 2505
integer y = 4576
integer width = 1326
integer height = 96
integer taborder = 80
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_39 from statictext within w_pat_assmts_updates
integer x = 2286
integer y = 4592
integer width = 197
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "header"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_38 from statictext within w_pat_assmts_updates
integer x = 3899
integer y = 4592
integer width = 411
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 25231232
string text = "dragwithinrow:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_dragwithin_row from singlelineedit within w_pat_assmts_updates
integer x = 4320
integer y = 4576
integer width = 402
integer height = 96
integer taborder = 100
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_37 from statictext within w_pat_assmts_updates
integer x = 3817
integer y = 4704
integer width = 494
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 25231232
string text = "dragwithinheader:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_dragwithin_header from singlelineedit within w_pat_assmts_updates
integer x = 4320
integer y = 4684
integer width = 402
integer height = 96
integer taborder = 110
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_34 from statictext within w_pat_assmts_updates
integer x = 3360
integer y = 4808
integer width = 411
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 25231232
string text = "dragwithintext:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_dragwithin_text from singlelineedit within w_pat_assmts_updates
integer x = 3781
integer y = 4792
integer width = 1335
integer height = 96
integer taborder = 100
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_33 from statictext within w_pat_assmts_updates
integer x = 3817
integer y = 4912
integer width = 489
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 25231232
string text = "dragwithinempno:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_dragwithin_empno from singlelineedit within w_pat_assmts_updates
integer x = 4320
integer y = 4900
integer width = 402
integer height = 96
integer taborder = 100
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_32 from statictext within w_pat_assmts_updates
integer x = 4187
integer y = 5576
integer width = 338
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 16776960
string text = "MM_OBJECT"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_mm_object from singlelineedit within w_pat_assmts_updates
integer x = 4183
integer y = 5652
integer width = 736
integer height = 96
integer taborder = 110
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_31 from statictext within w_pat_assmts_updates
integer x = 3429
integer y = 5584
integer width = 270
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 16776960
string text = "MM_DWO"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_mm_dwo from singlelineedit within w_pat_assmts_updates
integer x = 3424
integer y = 5648
integer width = 736
integer height = 96
integer taborder = 80
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_mm_row from singlelineedit within w_pat_assmts_updates
integer x = 3141
integer y = 5648
integer width = 247
integer height = 96
integer taborder = 100
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_30 from statictext within w_pat_assmts_updates
integer x = 3136
integer y = 5580
integer width = 261
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 16776960
string text = "MM-ROW"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_29 from statictext within w_pat_assmts_updates
integer x = 2597
integer y = 5584
integer width = 155
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 16776960
string text = "MM-X"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_28 from statictext within w_pat_assmts_updates
integer x = 2880
integer y = 5584
integer width = 219
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 16776960
string text = "MM-Y"
boolean focusrectangle = false
end type

type sle_mm_xpos from singlelineedit within w_pat_assmts_updates
integer x = 2601
integer y = 5648
integer width = 247
integer height = 96
integer taborder = 90
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_mm_ypos from singlelineedit within w_pat_assmts_updates
integer x = 2871
integer y = 5648
integer width = 247
integer height = 96
integer taborder = 90
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_drag_drop_empname from singlelineedit within w_pat_assmts_updates
integer x = 5477
integer y = 5272
integer width = 782
integer height = 96
integer taborder = 90
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_27 from statictext within w_pat_assmts_updates
integer x = 5157
integer y = 5288
integer width = 297
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "empname:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_26 from statictext within w_pat_assmts_updates
integer x = 2592
integer y = 5288
integer width = 297
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "empname:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_drag_from_empname from singlelineedit within w_pat_assmts_updates
integer x = 2903
integer y = 5276
integer width = 782
integer height = 96
integer taborder = 80
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_is_dragging from singlelineedit within w_pat_assmts_updates
integer x = 974
integer y = 84
integer width = 247
integer height = 96
integer taborder = 90
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_25 from statictext within w_pat_assmts_updates
integer x = 658
integer y = 96
integer width = 302
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 16777215
long backcolor = 33488896
string text = "IsDragging"
boolean focusrectangle = false
end type

type pb_cancel_dragdrop from picturebutton within w_pat_assmts_updates
integer x = 128
integer y = 80
integer width = 507
integer height = 96
integer taborder = 20
integer textsize = -9
integer weight = 700
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string text = "Cancel DragDrop"
boolean originalsize = true
long textcolor = 16777215
long backcolor = 255
end type

event clicked;integer li_rtn_value 
//2=object was moved
//1=drag was canceled
//0=drag succeeded
//-1 = control is empty
//-9 = unspecified error
boolean bCancelled
bCancelled = true
string ls_drag_from_control 
ls_drag_from_control = trim(upper(sle_drag_from_hdrtext.text))
sle_drag_from_control.text = ls_drag_from_control
if(f_len_ext(ls_drag_from_control) > 0) then
	choose case ls_drag_from_control
		case "TEAM A {1}"
			li_rtn_value = dw_a.Drag(Cancel!)		
		case "TEAM B {2}"
			li_rtn_value = dw_b.Drag(Cancel!)		
		case "TEAM C {3}"
			li_rtn_value = dw_c.Drag(Cancel!)		
		case "TEAM D {4}"
			li_rtn_value = dw_d.Drag(Cancel!)		
		case "REC 1 {5}"
			li_rtn_value = dw_rec1.Drag(Cancel!)		
		case "REC 2 {6}"
			li_rtn_value = dw_rec2.Drag(Cancel!)		
		case "EAGLE MOUNTAIN 1 {8}"
			li_rtn_value = dw_em1.Drag(Cancel!)		
		case "EAGLE MOUNTAIN 2 {9}"
			li_rtn_value = dw_em2.Drag(Cancel!)		
		case "EAGLE MOUNTAIN SRO {10}"
			li_rtn_value = dw_emsro.Drag(Cancel!)		
		case "VINEYARD-PATROL {11}"
			li_rtn_value = dw_vine.Drag(Cancel!)		
		case "SMALL CONTRACT CITIES {12}"
			li_rtn_value = dw_smcont.Drag(Cancel!)		
		case "FTO {52}"
			li_rtn_value = dw_fto.Drag(Cancel!)		
		case "RESERVES {129}"
			li_rtn_value = dw_team_resvrs.Drag(Cancel!)		
		case "UNFILLED {128}"
			li_rtn_value = dw_unfilled.Drag(Cancel!)	
		case "UNASSIGNED {131}"
			li_rtn_value = dw_unassigned.Drag(Cancel!)
		case "CHIEF DEPUTY {116}"
			li_rtn_value = dw_chiefs.Drag(Cancel!)
		case "SUPERVISOR {64}"
			li_rtn_value = dw_supervisors.Drag(Cancel!)
		case "ADMIN {63}"
			li_rtn_value = dw_admin.Drag(Cancel!)			
		case else
			if(pos(ls_drag_from_control, "SNS") = 0) then
				bCancelled = false
			end if
	end choose
end if
if(bCancelled = true) then
	sle_drag_from_hdrtext.text = ""
	sle_drag_from_object.text = ""
	sle_drag_from_row.text = ""
	sle_drag_from_grpid.text = ""
	sle_drag_from_empno.text = ""
	sle_drag_from_callnum.text = ""
	sle_drag_from_empname.text = ""

	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	
	sle_drag_drop_hdrtext.text = ""
	sle_drag_drop_object.text = ""
	sle_drag_drop_row.text = ""
	sle_drag_drop_grpid.text = ""	
	sle_drag_drop_empno.text = ""
	sle_drag_drop_callnum.text = ""
	sle_drag_drop_empname.text = ""
	
	sle_icon_filenanme.text = ""
	
	sle_drag_from_control.text = ""
	sle_drag_from_positionid.text = ""
	sle_drag_drop_mode.text = ""
	sle_num_avail_positions.text = ""
	sle_drag_to_positionid.text = ""
	sle_dragdrop_rowcount.text = ""
	sle_case_num.text = ""
	sle_drag_drop_col.text = ""

	bIsDragging = false
	sle_is_dragging.text = string(bIsDragging)
end if

end event

type sle_drag_within_row from singlelineedit within w_pat_assmts_updates
integer x = 1495
integer y = 5792
integer width = 402
integer height = 96
integer taborder = 90
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_21 from statictext within w_pat_assmts_updates
integer x = 1307
integer y = 5800
integer width = 178
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 67108864
string text = "row:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_20 from statictext within w_pat_assmts_updates
integer x = 1298
integer y = 5704
integer width = 197
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 67108864
string text = "object:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_drag_within_object from singlelineedit within w_pat_assmts_updates
integer x = 1495
integer y = 5692
integer width = 928
integer height = 96
integer taborder = 70
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_drag_within_callnum from singlelineedit within w_pat_assmts_updates
integer x = 1495
integer y = 6084
integer width = 402
integer height = 96
integer taborder = 80
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_drag_within_empno from singlelineedit within w_pat_assmts_updates
integer x = 1495
integer y = 5988
integer width = 402
integer height = 96
integer taborder = 80
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_drag_within_grpid from singlelineedit within w_pat_assmts_updates
integer x = 1495
integer y = 5892
integer width = 402
integer height = 96
integer taborder = 80
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_19 from statictext within w_pat_assmts_updates
integer x = 1248
integer y = 6096
integer width = 238
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 67108864
string text = "callnum:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_18 from statictext within w_pat_assmts_updates
integer x = 1253
integer y = 6000
integer width = 233
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 67108864
string text = "empno:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_17 from statictext within w_pat_assmts_updates
integer x = 1294
integer y = 5900
integer width = 192
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 67108864
string text = "grpid:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_16 from statictext within w_pat_assmts_updates
integer x = 1499
integer y = 5620
integer width = 475
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 67108864
string text = "drag within"
boolean focusrectangle = false
end type

type st_15 from statictext within w_pat_assmts_updates
integer x = 2295
integer y = 4696
integer width = 197
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "text:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_14 from statictext within w_pat_assmts_updates
integer x = 5467
integer y = 4500
integer width = 475
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "drag drop"
boolean focusrectangle = false
end type

type sle_mmw_ypos from singlelineedit within w_pat_assmts_updates
integer x = 3616
integer y = 4368
integer width = 247
integer height = 96
integer taborder = 80
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_mmw_xpos from singlelineedit within w_pat_assmts_updates
integer x = 3346
integer y = 4368
integer width = 247
integer height = 96
integer taborder = 90
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_13 from statictext within w_pat_assmts_updates
integer x = 3625
integer y = 4304
integer width = 219
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 16777215
long backcolor = 16711935
string text = "MM-Y"
boolean focusrectangle = false
end type

type st_12 from statictext within w_pat_assmts_updates
integer x = 3342
integer y = 4304
integer width = 155
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 16777215
long backcolor = 16711935
string text = "MM-X"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_11 from statictext within w_pat_assmts_updates
integer x = 5275
integer y = 4988
integer width = 192
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "grpid:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_10 from statictext within w_pat_assmts_updates
integer x = 5234
integer y = 5088
integer width = 233
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "empno:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_7 from statictext within w_pat_assmts_updates
integer x = 5230
integer y = 5184
integer width = 238
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "callnum:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_drag_drop_grpid from singlelineedit within w_pat_assmts_updates
integer x = 5477
integer y = 4980
integer width = 402
integer height = 96
integer taborder = 70
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_drag_drop_empno from singlelineedit within w_pat_assmts_updates
integer x = 5477
integer y = 5076
integer width = 402
integer height = 96
integer taborder = 70
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_drag_drop_callnum from singlelineedit within w_pat_assmts_updates
integer x = 5477
integer y = 5172
integer width = 402
integer height = 96
integer taborder = 70
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_drag_drop_object from singlelineedit within w_pat_assmts_updates
integer x = 5157
integer y = 4680
integer width = 1243
integer height = 96
integer taborder = 60
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_6 from statictext within w_pat_assmts_updates
integer x = 4946
integer y = 4696
integer width = 197
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "text:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_5 from statictext within w_pat_assmts_updates
integer x = 5157
integer y = 4792
integer width = 315
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "drop row#:"
alignment alignment = right!
boolean focusrectangle = false
end type

type sle_drag_drop_row from singlelineedit within w_pat_assmts_updates
integer x = 5472
integer y = 4780
integer width = 402
integer height = 96
integer taborder = 80
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_drag_from_row from singlelineedit within w_pat_assmts_updates
integer x = 2903
integer y = 4780
integer width = 402
integer height = 96
integer taborder = 70
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_9 from statictext within w_pat_assmts_updates
integer x = 2574
integer y = 4796
integer width = 320
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "from row#:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_8 from statictext within w_pat_assmts_updates
integer x = 2921
integer y = 4500
integer width = 293
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "drag from"
boolean focusrectangle = false
end type

type sle_drag_from_object from singlelineedit within w_pat_assmts_updates
integer x = 2510
integer y = 4680
integer width = 1321
integer height = 96
integer taborder = 70
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_drag_from_callnum from singlelineedit within w_pat_assmts_updates
integer x = 2903
integer y = 5176
integer width = 402
integer height = 96
integer taborder = 60
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_drag_from_empno from singlelineedit within w_pat_assmts_updates
integer x = 2903
integer y = 5080
integer width = 402
integer height = 96
integer taborder = 60
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type sle_drag_from_grpid from singlelineedit within w_pat_assmts_updates
integer x = 2903
integer y = 4984
integer width = 402
integer height = 96
integer taborder = 60
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type st_4 from statictext within w_pat_assmts_updates
integer x = 2665
integer y = 5188
integer width = 229
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "callnum:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_3 from statictext within w_pat_assmts_updates
integer x = 2665
integer y = 5092
integer width = 229
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "empno:"
alignment alignment = right!
boolean focusrectangle = false
end type

type st_2 from statictext within w_pat_assmts_updates
integer x = 2711
integer y = 4992
integer width = 183
integer height = 64
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 33554432
long backcolor = 65535
string text = "grpid:"
alignment alignment = right!
boolean focusrectangle = false
end type

type dw_lt_scc from datawindow within w_pat_assmts_updates
integer x = 4453
integer y = 1268
integer width = 1015
integer height = 104
integer taborder = 40
string title = "none"
string dataobject = "dw_team_lt"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event doubleclicked;//change supervisor
long ll_row 
ll_row = row
string ls_dwoname
ls_dwoname = dwo.name
if((ls_dwoname = "sns_employees_empname") or (ls_dwoname = "datawindow")) then
	//select lieutenant
	string ls_messageparm
	ls_messageparm = "116,64"
	OpenWithParm(w_add_lt, ls_messageparm)
	string ls_selected_username
	ls_selected_username = Message.StringParm //ie: WILLES-DOUGLAS      [14480]
	if(f_len_ext(ls_selected_username) > 0) then
		string ls_empno 
		ls_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
		long ll_empno
		ll_empno = f_stol(ls_empno)
		if(ll_empno > 0) then
			string ls_callnum
			string ls_empname
			integer li_pos
			li_pos = pos(ls_selected_username, "[")
			if(li_pos > 0) then
				ls_empname = trim(mid(ls_selected_username, 1, (li_pos - 1)))
			end if
			ls_callnum = ""
			//
			select callnum into :ls_callnum from sns_staffing_grps_positions2 where assgnd_empno = :ll_empno using sqlca;
			//
			if(IsNull(ls_callnum) = true) then
				ls_callnum = ""
			end if
			dw_lt_scc.setitem(ll_row, "sns_employees_empname", ls_empname)
			dw_lt_scc.setitem(ll_row, "sns_staffing_grps_positions2_callnum", ls_callnum)
			//
			update sns_bd_others_layout_specs
			set assgnd_lt = :ll_empno
			where grpid in (12)
			using sqlca;
			//
			if(sqlca.sqlcode <> -1) then
				//
				commit using sqlca;
				//
				dw_lt_scc.Retrieve(12)
			else
				//
				rollback using sqlca;
				//
			end if
		end if
	end if			
end if
end event

type dw_lt_teamvine from datawindow within w_pat_assmts_updates
integer x = 3374
integer y = 1268
integer width = 1006
integer height = 104
integer taborder = 20
string title = "none"
string dataobject = "dw_team_lt"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event doubleclicked;//change supervisor
long ll_row 
ll_row = row
string ls_dwoname
ls_dwoname = dwo.name
if((ls_dwoname = "sns_employees_empname") or (ls_dwoname = "datawindow")) then
	//select lieutenant
	string ls_messageparm
	ls_messageparm = "116,64"
	OpenWithParm(w_add_lt, ls_messageparm)
	string ls_selected_username
	ls_selected_username = Message.StringParm //ie: WILLES-DOUGLAS      [14480]
	if(f_len_ext(ls_selected_username) > 0) then
		string ls_empno 
		ls_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
		long ll_empno
		ll_empno = f_stol(ls_empno)
		if(ll_empno > 0) then
			string ls_callnum
			string ls_empname
			integer li_pos
			li_pos = pos(ls_selected_username, "[")
			if(li_pos > 0) then
				ls_empname = trim(mid(ls_selected_username, 1, (li_pos - 1)))
			end if
			ls_callnum = ""
			//
			select callnum into :ls_callnum from sns_staffing_grps_positions2 where assgnd_empno = :ll_empno using sqlca;
			//
			if(IsNull(ls_callnum) = true) then
				ls_callnum = ""
			end if
			dw_lt_teamvine.setitem(ll_row, "sns_employees_empname", ls_empname)
			dw_lt_teamvine.setitem(ll_row, "sns_staffing_grps_positions2_callnum", ls_callnum)
			//
			update sns_bd_others_layout_specs
			set assgnd_lt = :ll_empno
			where grpid in (11)
			using sqlca;
			//
			if(sqlca.sqlcode <> -1) then
				//
				commit using sqlca;
				//
				dw_lt_teamvine.Retrieve(11)
			else
				//
				rollback using sqlca;
				//
			end if
		end if
	end if			
end if
end event

type dw_lt_teamem from datawindow within w_pat_assmts_updates
integer x = 1202
integer y = 1276
integer width = 1006
integer height = 104
integer taborder = 20
string title = "none"
string dataobject = "dw_team_lt"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event doubleclicked;//change supervisor
long ll_row 
ll_row = row
string ls_dwoname
ls_dwoname = dwo.name
if((ls_dwoname = "sns_employees_empname") or (ls_dwoname = "datawindow")) then
	//select lieutenant
	string ls_messageparm
	ls_messageparm = "116,64"
	OpenWithParm(w_add_lt, ls_messageparm)
	string ls_selected_username
	ls_selected_username = Message.StringParm //ie: WILLES-DOUGLAS      [14480]
	if(f_len_ext(ls_selected_username) > 0) then
		string ls_empno 
		ls_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
		long ll_empno
		ll_empno = f_stol(ls_empno)
		if(ll_empno > 0) then
			string ls_callnum
			string ls_empname
			integer li_pos
			li_pos = pos(ls_selected_username, "[")
			if(li_pos > 0) then
				ls_empname = trim(mid(ls_selected_username, 1, (li_pos - 1)))
			end if
			ls_callnum = ""
			//
			select callnum into :ls_callnum from sns_staffing_grps_positions2 where assgnd_empno = :ll_empno using sqlca;
			//
			if(IsNull(ls_callnum) = true) then
				ls_callnum = ""
			end if
			dw_lt_teamem.setitem(ll_row, "sns_employees_empname", ls_empname)
			dw_lt_teamem.setitem(ll_row, "sns_staffing_grps_positions2_callnum", ls_callnum)
			//
			update sns_bd_others_layout_specs
			set assgnd_lt = :ll_empno
			where grpid in (8,9,10)
			using sqlca;
			//
			if(sqlca.sqlcode <> -1) then
				//
				commit using sqlca;
				//
				dw_lt_teamem.Retrieve(8)
			else
				//
				rollback using sqlca;
				//
			end if
		end if
	end if			
end if

end event

type dw_lt_fto from datawindow within w_pat_assmts_updates
integer x = 5522
integer y = 1264
integer width = 1010
integer height = 104
integer taborder = 20
string title = "none"
string dataobject = "dw_team_lt"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event doubleclicked;//change supervisor
long ll_row 
ll_row = row
string ls_dwoname
ls_dwoname = dwo.name
if((ls_dwoname = "sns_employees_empname") or (ls_dwoname = "datawindow")) then
	//select lieutenant
	string ls_messageparm
	ls_messageparm = "116,64"
	OpenWithParm(w_add_lt, ls_messageparm)
	string ls_selected_username
	ls_selected_username = Message.StringParm //ie: WILLES-DOUGLAS      [14480]
	if(f_len_ext(ls_selected_username) > 0) then
		string ls_empno 
		ls_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
		long ll_empno
		ll_empno = f_stol(ls_empno)
		if(ll_empno > 0) then
			string ls_callnum
			string ls_empname
			integer li_pos
			li_pos = pos(ls_selected_username, "[")
			if(li_pos > 0) then
				ls_empname = trim(mid(ls_selected_username, 1, (li_pos - 1)))
			end if
			ls_callnum = ""
			//
			select callnum into :ls_callnum from sns_staffing_grps_positions2 where assgnd_empno = :ll_empno using sqlca;
			//
			if(IsNull(ls_callnum) = true) then
				ls_callnum = ""
			end if
			dw_lt_fto.setitem(ll_row, "sns_employees_empname", ls_empname)
			dw_lt_fto.setitem(ll_row, "sns_staffing_grps_positions2_callnum", ls_callnum)
			//
			update sns_bd_others_layout_specs
			set assgnd_lt = :ll_empno
			where grpid in (52)
			using sqlca;
			//
			if(sqlca.sqlcode <> -1) then
				//
				commit using sqlca;
				//
				dw_lt_fto.Retrieve(52)
			else
				//
				rollback using sqlca;
				//
			end if
		end if
	end if			
end if
end event

type dw_lt_teamabcd from datawindow within w_pat_assmts_updates
integer x = 1751
integer y = 136
integer width = 1006
integer height = 104
integer taborder = 20
string title = "none"
string dataobject = "dw_team_lt"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event doubleclicked;//change supervisor
long ll_row 
ll_row = row
string ls_dwoname
ls_dwoname = dwo.name
if(ls_dwoname = "sns_employees_empname") then
	//select lieutenant
	string ls_messageparm
	ls_messageparm = "116,64"
	OpenWithParm(w_add_lt, ls_messageparm)
	string ls_selected_username
	ls_selected_username = Message.StringParm //ie: WILLES-DOUGLAS      [14480]
	if(f_len_ext(ls_selected_username) > 0) then
		string ls_empno 
		ls_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
		long ll_empno
		ll_empno = f_stol(ls_empno)
		if(ll_empno > 0) then
			string ls_callnum
			string ls_empname
			integer li_pos
			li_pos = pos(ls_selected_username, "[")
			if(li_pos > 0) then
				ls_empname = trim(mid(ls_selected_username, 1, (li_pos - 1)))
			end if
			ls_callnum = ""
			//
			select callnum into :ls_callnum from sns_staffing_grps_positions2 where assgnd_empno = :ll_empno using sqlca;
			//
			if(IsNull(ls_callnum) = true) then
				ls_callnum = ""
			end if
			dw_lt_teamabcd.setitem(ll_row, "sns_employees_empname", ls_empname)
			dw_lt_teamabcd.setitem(ll_row, "sns_staffing_grps_positions2_callnum", ls_callnum)
			//
			update sns_bd_others_layout_specs
			set assgnd_lt = :ll_empno
			where grpid in (1,2,3,4)
			using sqlca;
			//
			if(sqlca.sqlcode <> -1) then
				//
				commit using sqlca;
				//
				dw_lt_teamabcd.Retrieve(1)
			else
				//
				rollback using sqlca;
				//
			end if
		end if
	end if			
end if

end event

type dw_c from datawindow within w_pat_assmts_updates
event ue_mousemove_c pbm_dwnmousemove
integer x = 2263
integer y = 268
integer width = 1074
integer height = 944
integer taborder = 20
string dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
string title = "none"
string dataobject = "dw_team_c"
string icon = "C:\pbrepos\UCSO_STAFFINGSUPTBDS\res\UCSOSTAFFDROP.ico"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event retrieverow;//===================
//### RETRIEVEROW ###
//===================
string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 3
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 3
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragwithin;//dragwithin
if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 3
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 3
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 3
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 3
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

type dw_b from datawindow within w_pat_assmts_updates
integer x = 1170
integer y = 268
integer width = 1074
integer height = 944
integer taborder = 20
string dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
string title = "none"
string dataobject = "dw_team_b"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 2
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event retrieverow;//===================
//### RETRIEVEROW ###
//===================
string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 2
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 2
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event dragwithin;//==================
//### DRAGWITHIN ###
//==================
//dragwithin
if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 2
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 2
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 2
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

type dw_a from datawindow within w_pat_assmts_updates
integer x = 91
integer y = 268
integer width = 1074
integer height = 944
integer taborder = 20
string dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
string title = "none"
string dataobject = "dw_team_a"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event retrieverow;//===================
//### RETRIEVEROW ###
//===================
string ls_empname
long ll_assgnd_empno
string ls_callnum
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 1
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	ll_assgnd_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno')
	ls_callnum = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_callnum')
	ls_empname = dw_clicked_object.getitemstring(row, 'sns_board_specs_others_empname')
	if(IsNull(ls_callnum) = true) then
		ls_callnum = ""
	end if
	if((ll_assgnd_empno = 0) and (f_len_ext(ls_empname) = 0) and (f_len_ext(ls_callnum) > 0)) then
		dw_clicked_object.setitem(row, 'sns_board_specs_others_empname', '*** UNFILLED ***')
	end if
end if

end event

event doubleclicked;string ls_dwo_name
ls_dwo_name = dwo.name
integer li_stop
//======================= 
long ll_clicked_grpid
ll_clicked_grpid = 1
//=======================
boolean bAutoRefresh
bAutoRefresh = true
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
if(ls_dwo_name = "sns_board_specs_others_issuper") then  //old = sns_employees_super_lvl
		integer li_super_lvl 
		long ll_empno
		ll_empno = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_empno') //old = sns_staffing_grps_positions2_assgnd_empno
		li_super_lvl = dw_clicked_object.getitemnumber(row, 'sns_board_specs_others_issuper')
		if(li_super_lvl = 1) then
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 0)
			f_set_employees_super_lvl(0, ll_empno, ref sqlca)
		else
			dw_clicked_object.setitem(row, 'sns_board_specs_others_issuper', 1)
			f_set_employees_super_lvl(1, ll_empno, ref sqlca)		
		end if
	else
		if(ls_dwo_name = "datawindow") then
			//=======================================================
			//fm.io_employee
			long ll_fm_empno
			string ls_fm_empname
			integer li_fm_fund
			long ll_fm_dept
			string ls_fm_email
			string ls_fm_title
			long ll_fm_super_empno
			integer li_fm_fte_status
			long ll_fm_jobcode
			string ls_fm_positionid
			ll_fm_empno = 0
			ls_fm_empname = ""
			li_fm_fund = 0
			ll_fm_dept = 0
			ls_fm_email = ""
			ls_fm_title = ""
			ll_fm_super_empno = 0
			li_fm_fte_status = 0
			ll_fm_jobcode = 0
			ls_fm_positionid = ""
			//sns_employees
			long ll_emp_id
			long ll_emp_empno
			string ls_emp_empname
			long ll_emp_grpid
			integer li_emp_fund
			long ll_emp_dept
			string ls_emp_email
			string ls_emp_title
			long ll_emp_super_empno
			decimal dec_emp_fte
			string ls_emp_jobcode
			string ls_emp_positionid
			string ls_emp_depttitle
			string ls_emp_jobtitle
			string ls_emp_supervisor
			string ls_emp_grps_resp     //KILLIAN-NANCY [13517]
			ll_emp_id = 0
			ll_emp_empno = 0
			ls_emp_empname = ""
			ll_emp_grpid  = 0
			li_emp_fund = 0
			ll_emp_dept = 0
			ls_emp_email = ""
			ls_emp_title = ""
			ll_emp_super_empno = 0
			dec_emp_fte = 0.0
			ls_emp_jobcode = ""
			ls_emp_positionid = ""
			ls_emp_depttitle = ""
			ls_emp_jobtitle = ""
			ls_emp_supervisor = ""
			ls_emp_grps_resp = ""
			//sns_staffing_grps_positions2
			long ll_pos_id
			long ll_pos_assgnd_empno
			long ll_pos_grpid
			string ls_pos_callnum
			string ls_pos_funddept
			string ls_pos_addinfo
			string ls_pos_jobtitle
			string ls_pos_jobcode
			string ls_pos_positionid
			long ll_pos_xrefid		
			ll_pos_id = 0
			ll_pos_assgnd_empno = 0
			ll_pos_grpid = 0
			ls_pos_callnum = ""
			ls_pos_funddept = ""
			ls_pos_addinfo = ""
			ls_pos_jobtitle = ""
			ls_pos_jobcode = ""
			ls_pos_positionid = ""
			ll_pos_xrefid = 0		
			//=======================================================
			integer li_rtn_result		
			//add employee
			long ll_grpteamid_grpid
			string ls_groupname
			ls_groupname = dw_clicked_object.getitemstring(1, "grpteamid")
			string ls_grpid
			ls_grpid = f_extract_bracketed_item(ls_groupname, "{", "}", true)
			ll_grpteamid_grpid = f_stol(ls_grpid)
			long ll_to_grpid
			ll_to_grpid = ll_clicked_grpid
			if(ll_to_grpid > 0) then
				string ls_messageparm
				ls_messageparm = string(ll_clicked_grpid)
				OpenWithParm(w_add_user, ls_messageparm)
				string ls_selected_username
				ls_selected_username = Message.StringParm
				if(f_len_ext(ls_selected_username) > 0) then
					li_rtn_result = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_groupname, QUESTION!, YESNO!)
					if(li_rtn_result = 1) then
						long ll_add_user_empno
						ll_add_user_empno = 0
						string ls_selected_empno
						ls_selected_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
						ll_add_user_empno = f_stol(ls_selected_empno)
						if(ll_add_user_empno > 0) then
							string ls_selected_empname
							int li_epos
							li_epos = pos(ls_selected_username, "[")
							if(li_epos > 0) then
								ls_selected_empname = trim(mid(ls_selected_username, 1, (li_epos - 1)))
							end if
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
							string ls_to_callnum
							integer li_num_updates
							string ls_from_empname
							long ll_from_bs_specs_others_exists_id
							long ll_from_emp_exists_id
							long ll_from_empno
							string ls_from_positionid
							string ls_sqlerrtext
							string lsa_dd_errors[]
							integer li_rtn_value
							string ls_from_funddept
							string ls_from_jobcode
							string ls_from_jobtitle
							string ls_error
							string ls_to_positionid
							integer li_commit_rtn_value
							string ls_sql_error
							long ll_xrefmods_ppos2recid
							long ll_xref_exists_id
							long ll_xrefmods_exists_id
							long ll_emp_exists_id	
							boolean bInsertNewUser
							bInsertNewUser = false
							string lsa_avail_callnums[]
							integer li_num_avail_callnums
							string ls_csql
							//old code... ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and empname is null and callnum is not null order by nrow, ncol"
							ls_csql = "select callnum from sns_board_specs_others where grpid = " + string(ll_to_grpid) + " and instr(empname,'UNFILLED') > 0 and callnum is not null order by callnum"
							li_num_avail_callnums = f_app_ds_populate_string_array_by_sql(ref lsa_avail_callnums, ls_csql, gi_pad_len, gs_delim, gb_compress, ref sqlca)
							if(li_num_avail_callnums = 1) then
								li_rtn_result = MessageBox("Notification","Only one available callnum position available [" + lsa_avail_callnums[1] + "]. Assign new user to that callnum?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = lsa_avail_callnums[1]
									bInsertNewUser = true
								end if
							elseif(li_num_avail_callnums > 1) then
								integer li_cloop
								string ls_callnums
								for li_cloop = 1 to li_num_avail_callnums
									ls_callnums += lsa_avail_callnums[li_cloop]
									ls_callnums += ","
								next
								ls_callnums = f_trim_trailing_char(ls_callnums, ",")
								string ls_selected_callnum
								ls_selected_callnum = ""
								ls_messageparm = ls_callnums
								OpenWithParm(w_callnum_select, ls_messageparm)
								ls_selected_callnum = Message.StringParm
								if(f_len_ext(ls_selected_callnum) > 0) then
									ls_to_callnum = ls_selected_callnum
									bInsertNewUser = true							
								end if
							else
								li_rtn_result = MessageBox("Notification","There are no available unfilled positions with call numbers. Add new user anyway?", QUESTION!, YESNO!)
								if(li_rtn_result = 1) then
									ls_to_callnum = "NEW"
									bInsertNewUser = true
								end if
							end if
							if(bInsertNewUser = true) then
								string ls_selected_username_empno
								ls_selected_username_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
								ll_fm_empno = f_stol(ls_selected_username_empno)
								if(ll_fm_empno > 0) then
									//fm.io_employee
									select empname, fund, dept, email, title, super_empno, fte_status, job_code, position_id into :ls_fm_empname,:li_fm_fund,:ll_fm_dept,:ls_fm_email,
									:ls_fm_title, :ll_fm_super_empno, :li_fm_fte_status, :ll_fm_jobcode, :ls_fm_positionid
									from fm.io_employee where empno = :ll_fm_empno
									using sqlca;
									//								
									//sns_employees
									select id, empno, empname, grpid, fund, dept, email, title, super_empno, fte, jobcode, positionid, depttitle, jobtitle, supervisor, grps_resp 
									into :ll_emp_id, :ll_emp_empno, :ls_emp_empname, :ll_emp_grpid, :li_emp_fund, :ll_emp_dept, :ls_emp_email, :ls_emp_title, :ll_emp_super_empno, 
									:dec_emp_fte, :ls_emp_jobcode, :ls_emp_positionid, :ls_emp_depttitle, :ls_emp_jobtitle, :ls_emp_supervisor, :ls_emp_grps_resp	
									from sns_employees where empno = :ll_fm_empno
									using sqlca;
									//
									//sns_staffing_grps_positions2
									select id, assgnd_empno, grpid, callnum, funddept, addinfo, jobtitle, jobcode, positionid, xrefid 
									into :ll_pos_id, :ll_pos_assgnd_empno, :ll_pos_grpid, :ls_pos_callnum, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobtitle, :ls_pos_jobcode,
									:ls_pos_positionid, :ll_pos_xrefid
									from sns_staffing_grps_positions2 where assgnd_empno = :ll_fm_empno
									using sqlca;
									
									//       ls_fm_empname  ll_emp_id ll_pos_id
									//       HOLMAN, CHLOE  316       46
									//       -------------  --------- ---------
									//CASE#1 CANNOT BE BLANK  > 0       >0      
									//CASE#2 CANNOT BE BLANK  > 0       =0
									//-----------------------------------------
									//
									if((f_len_ext(ls_fm_empname) > 0) and (ll_emp_id > 0) and (ll_pos_id > 0)) then
										ls_pos_funddept = string(li_fm_fund) + "-" + string(ll_fm_dept)
										//CASE#1
										// 
										integer li_num_avail_callnums_found
										string lsa_avail_unused_callnums[]
										li_num_avail_callnums_found = f_get_avail_group_callnums(ll_clicked_grpid, ref lsa_avail_unused_callnums, ref sqlca)
										if(li_num_avail_callnums_found > 0) then
											string ls_callnum_to_assign
											ls_callnum_to_assign = ""
											if(li_num_avail_callnums_found > 1) then
												string ls_select_from_callnums
												ls_select_from_callnums = f_create_string_from_array(lsa_avail_unused_callnums, ",")
												ls_messageparm = ls_select_from_callnums
												OpenWithParm(w_callnum_select, ls_messageparm)
												ls_callnum_to_assign = Message.StringParm
											else
												ls_callnum_to_assign = lsa_avail_unused_callnums[1]
											end if
											if(f_len_ext(ls_callnum_to_assign) > 0) then
												
												li_rtn_result = MessageBox("Notification","Found available callnum " + ls_callnum_to_assign + ". Assign user to this callnum?", QUESTION!, YESNO!)
												if(li_rtn_result = 1) then
													ls_pos_addinfo = ls_callnum_to_assign
													//update tables
													// SNS_STAFFING_GRPS_POSTIIONS2
													// SNS_POS_XREF
													// SNS_POS_XREF_MODS
													ls_pos_addinfo = f_replace_string_in_string(ls_pos_addinfo, "1J", "")
													ls_pos_addinfo = trim(ls_pos_addinfo)
													integer li_pos_rtn_value
													string ls_pos_rtn_error
													//if ll_pos_id = 0 then CASE2 will be supported by following function
													//                 f_insert_pos2_support_table_records(ll_grpid, ls_callnum, ll_empno, ls_funddept, ls_addinfo, ls_vehinfo, ls_positionid, ls_jobcode, ls_jobtitle, dec_basepay, b_modify_positions2_table, ref ls_error, ref sqlca)
													li_pos_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum_to_assign, ll_fm_empno, ls_pos_funddept, ls_pos_addinfo, ".", ls_fm_positionid, string(ll_fm_jobcode), ls_fm_title, 0.0, true, ls_pos_rtn_error, ref sqlca)
													if(li_pos_rtn_value = 1) then
														//update SNS_EMPLOYEES
														string ls_fm_jobcode
														ls_fm_jobcode = string(ls_fm_jobcode)
														string ls_cost_center_descr
														long ll_grp_super_empno
														long ll_root_grp_super_empno
														//
														select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_root_grp_super_empno from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
														//
														select descr into :ls_cost_center_descr from sns_ucso_cost_centers where fund = :li_fm_fund and dept = :ll_fm_dept using sqlca;
														//
														select empname into :ls_emp_supervisor from sns_employees where empno = :ll_grp_super_empno using sqlca;
														//
														select empname into :ls_emp_grps_resp from sns_employees where empno = :ll_root_grp_super_empno using sqlca;
														//
														ls_emp_grps_resp = trim(ls_emp_grps_resp) + "     [" + string(ll_root_grp_super_empno) + "]"
														//			
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fm_fund, dept = :ll_fm_dept, title = :ls_fm_title, jobcode = :ls_fm_jobcode,
														positionid = trim(upper(:ls_fm_positionid)), depttitle = :ls_cost_center_descr, jobtitle = :ls_fm_title, supervisor = :ls_emp_supervisor,
														super_empno = :ll_grp_super_empno, grps_resp = :ls_emp_grps_resp
														where id = :ll_emp_id
														using sqlca;
														// 
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															//update tables
															// sns_board_specs_others
															// sns_bd_others_layout_specs														
															
															
															
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)													
														end if
													
													
													else
														MessageBox("Notifications","Failed to update positions support tables.")
													end if												
												end if
											else
												MessageBox("Notification","Callnum must not be blank.")
											end if
										else
											MessageBox("Notifications","All defined callnums are already assigned. You must unassign employee to free up a callnum. Then try again.");
										end if
									
									end if
									
								end if
							
								string ls_to_addinfo
								int li_apos
								li_apos = pos(ls_to_callnum, "J")
								if(li_apos > 0) then
									ls_to_addinfo = trim(mid(ls_to_callnum, (li_apos + 1)))
								else
									ls_to_addinfo = ls_to_callnum
								end if
								//to add user empno must not exist in sns_staffing_grps_positions2 table
								long ll_pos_assgnd_empno_exists_id
								//
								select id into :ll_pos_assgnd_empno_exists_id from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
								//
								li_rtn_result = 0
								if(ll_pos_assgnd_empno_exists_id > 0) then
									li_rtn_result = MessageBox("Notification","Employee " + ls_selected_empname + " already Exist/Assigned in the positions table. Move Anyway?", QUESTION!, YESNO!, 1)
								end if
								boolean bOkToMove
								if(li_rtn_result = 0) then
									bOkToMove = false
								elseif(li_rtn_result = 1) then
									bOkToMove = true
								end if
								if((ll_pos_assgnd_empno_exists_id = 0) or (bOkToMove = true)) then
								
									li_num_updates = 0
									long ll_to_bs_specs_others_exists_id
									ll_to_bs_specs_others_exists_id = 0
									//determine next avail call num to add user to
									//
									select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where callnum = :ls_to_callnum and  grpid = :ll_to_grpid using sqlca;
									//
									if((ll_to_bs_specs_others_exists_id > 0) and (ll_to_grpid > 0)) then
										//
										select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_to_bs_specs_others_exists_id using sqlca;
										//
										if(bOkToMove = false) then
										
											update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = ''
											where id = :ll_to_bs_specs_others_exists_id
											using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if								
											li_rtn_value = 0
											//  0 = successful
											// -1 = no action taken
											// -2 = li_assgnd_empno_count > 0
											// -3 = li_positionid_count > 0
											// -4 = assgnd_empno not found in pos2
											// -5 = ll_pos2idshort invalid
											// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
											// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
											// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
											// -9 = tr_sqlca sqlcode = -1 sns_group_ids
											//-10 = ll_pos2idshort <0 or > 90000 
											
											//ll_to_grpid = 3
											//ls_to_callnum = 1j132
											//ll_add_user_empno = 17545
											//ls_from_funddept = 
											//ls_to_addinfo =
											//ls_from_positionid =
											//ls_from_jobcode =
											//ls_from_jobtitle =
											
											//
											select to_char(fund) || '-' || to_char(dept), positionid, jobcode, jobtitle into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
											from sns_employees where empno = :ll_add_user_empno 
											using sqlca;
											//
											if((IsNull(ls_from_funddept) = true) or (IsNull(ls_from_positionid) = true) or (IsNull(ls_from_jobcode) = true) or (IsNull(ls_from_jobtitle) = true)) then
												//retrieve fm.io_employee data
												//
												select to_char(fund) || '-' || to_char(dept), position_id, job_code, title into :ls_from_funddept, :ls_from_positionid, :ls_from_jobcode, :ls_from_jobtitle
												from fm.io_employee where empno = :ll_add_user_empno 
												using sqlca;
												//
												if(IsNull(ls_from_funddept) = true) then
													ls_from_funddept = ""
												end if
												if(IsNull(ls_from_jobcode) = true) then
													ls_from_jobcode = ""
												end if
												if(IsNull(ls_from_jobtitle) = true) then
													ls_from_jobtitle = ""
												end if
											end if
											ls_from_positionid = trim(upper(ls_from_positionid))
											ls_from_jobtitle = trim(upper(ls_from_jobtitle))
											
											li_stop = 0
	
											if((IsNull(ls_from_funddept) = false) and (IsNull(ls_from_positionid) = false) and (IsNull(ls_from_jobcode) = false) and (IsNull(ls_from_jobtitle) = false)) then
	
												li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_add_user_empno, ls_from_funddept, ls_to_addinfo, &
																													".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, &
																													ref ls_error, ref sqlca)
												if(li_rtn_value >= 1) then
													if(ll_from_emp_exists_id > 0) then
														//update sns_board_specs_others positionid
														//
														select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
														//
														update sns_board_specs_others set positionid = :ls_to_positionid where id = :ll_to_bs_specs_others_exists_id using sqlca;
														//
													
														// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
														update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
														where id = :ll_add_user_empno
														using sqlca;
														//
														if(sqlca.sqlcode <> -1) then
															//
															commit using sqlca;
															//
															li_num_updates++
														else
															ls_sqlerrtext = sqlca.sqlerrtext
															//
															rollback using sqlca;
															//
															ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
															f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
															bAutoRefresh = false
														end if										
														if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
															long ll_grps_resp
															ll_grp_super_empno = 0
															ll_grps_resp = 0
															ll_grp_super_empno = 0
															//
															select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
															//
															update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno  where id = :ll_add_user_empno using sqlca;
															//
															if(sqlca.sqlcode <> -1) then
																//
																commit using sqlca;
																//
																li_num_updates++
															else
																ls_sqlerrtext = sqlca.sqlerrtext
																//
																rollback using sqlca;
																//
																ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
																f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
																bAutoRefresh = false
															end if											
														end if //ll_to_grpid > 0
													end if//ll_from_emp_exists_id > 0
												end if //li_rtn_value = 0
											else
												string ls_msg_text
												ls_msg_text = "One or more Null Values. Cannot add new user."
												if(ls_to_positionid = "") or (IsNull(ls_to_positionid) = true) then
													ls_msg_text += " Positionid is blank!"
												end if
												bAutoRefresh = false
												MessageBox("Notification",ls_msg_text)
											end if //check for IsNull for funddept, positionid, jobcode, jobtitle
										else
											//bOkToMove = true
											//move employee from positions2 grpid to the ll_clicked_grpid
											// sns_staffing_grps_positions2
											//  -change grpid to the move to grpid
											//  -change callnum and addinfo to new callnum
											// sns_pos_xref
											//  -change grpid to the move to group grpid
											//  -change spunitno to new callnum
											// sns_pos_xref_mods
											//  -change pgrpid to the move to group grpid
											//  -change pspunitno to new callnum
											// sns_employees
											//  -update the grpid to move to group grpid
											// sns_board_specs_others
											//  -update empname
											//  -       empno
											//  -       positionid
											//  - where callnum = selected callnum
											//example: move CARLE-JOSEPH from SPECIAL VICTIMS UNIT TO EM2
											//ll_add_user_empno = 16858
											//ll_clicked_grpid = 9
											//ls_to_callnum = "1J2550"
											//ll_to_bs_specs_others_exists_id = 88
											//ls_groupname = "EAGLE MOUNTAION 2 {9}"
											//ls_selected_callnum = "1J2550"
											//ls_selected_empname = "CARLE-JOSEPH"
											//ls_selected_empno = 16858
											//ll_pos_assgnd_empno_exists_id = 116
											string ls_new_funddept
											integer li_fund
											long ll_dept
											integer li_prev_fund
											long ll_prev_dept
											string ls_pos
											if(ll_pos_assgnd_empno_exists_id > 0) then
												//
												select positionid,jobcode,jobtitle into :ls_pos_positionid, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												select funddept into :ls_new_funddept from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
												//
												int li_tpos
												li_tpos = pos(ls_new_funddept, "-")
												if(li_tpos > 0) then
													li_fund = f_stoi(trim(mid(ls_new_funddept, 1, (li_tpos - 1))))
													ll_dept = f_stol(trim(mid(ls_new_funddept, (li_tpos + 1))))
												end if
												ll_pos_xrefid = 0
												ll_xrefmods_ppos2recid = 0
												//
												select xrefid into :ll_pos_xrefid from sns_staffing_grps_positions2 where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												if(ll_pos_xrefid > 0) then
													ll_xrefmods_ppos2recid = ll_pos_assgnd_empno_exists_id
													if(ll_xrefmods_ppos2recid > 0) then
														//
														select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_xrefmods_ppos2recid using sqlca;
														//
													end if
												end if
												//
												select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
												//
												update sns_staffing_grps_positions2 set grpid = :ll_clicked_grpid, callnum = :ls_to_callnum, addinfo = :ls_to_addinfo, funddept = :ls_new_funddept where id = :ll_pos_assgnd_empno_exists_id using sqlca;
												//
												li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
												if(li_commit_rtn_value = 1) then
													if(ll_pos_xrefid > 0) then
														//
														update sns_pos_xref set grpid = :ll_clicked_grpid, spunitno = :ls_to_callnum where id = :ll_pos_xrefid using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then
															//
															if(ll_xrefmods_exists_id > 0) then
																//
																update sns_pos_xref_mods set pgrpid = :ll_clicked_grpid, pspunitno = :ls_to_callnum where id = :ll_xrefmods_exists_id using sqlca;
																//
																li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
																if(li_commit_rtn_value = 1) then
																	//do nothing
																else
																	ls_sql_error = "Failed to update position xref mods table. Contact administrator x4008."
																end if
															end if
														else
															ls_sql_error = "Failed to update position xref table. Contact administrator x4008."
														end if
													
													end if
												else	
													ls_sql_error = "Failed to update positions table. Contact administrator x4008."
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													if(ll_emp_exists_id > 0) then
														//
														update sns_employees set prevfund = fund, prevdept = dept where id = :ll_emp_exists_id using sqlca;
														//
														update sns_employees set grpid = :ll_clicked_grpid, fund = :li_fund, dept = :ll_dept, jobcode = :ls_pos_jobcode, jobtitle = :ls_pos_jobtitle
														where id = :ll_emp_exists_id 
														using sqlca;
														//
														li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
														if(li_commit_rtn_value = 1) then														
															//do nothing
														else
															ls_sql_error = "Failed to update employees table. 	Contact administrator x4008."												
														end if
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													//
													update sns_board_specs_others set empname = :ls_selected_empname, empno = :ll_add_user_empno, positionid = :ls_pos_positionid
													where id = :ll_to_bs_specs_others_exists_id
													using sqlca;
													//
													li_commit_rtn_value = f_commit_rollback_record(ref sqlca);
													if(li_commit_rtn_value = 1) then
														//do nothing
													else
														ls_sql_error = "Failed to update board specs table. Contact administrator x4008."												
													end if
												end if
												if(f_len_ext(ls_sql_error) = 0) then
													MessageBox("Notification", "Successfully moved employee " + ls_selected_empname + " to " + ls_groupname)
												else
													MessageBox("Notification",ls_sql_error,Exclamation!)
												end if
											end if
										end if
									else
										//insert into tables
										MessageBox("Notification","insert into table code not yet coded!")
										
//										integer li_func_rtn_value
//										//collect to table variables
//										if(ll_add_user_empno > 0) then
//											long ll_pos_exists_id
//											long ll_pos_xrefid
//											long ll_pos_funddept
//											string ls_pos_funddept
//											string ls_pos_addinfo
//											string ls_pos_jobcode
//											string ls_pos_jobtitle
//											long ll_xrefmods_ppos2recid
//											long ll_xref_exists_id
//											long ll_xrefmods_exists_id
//											long ll_emp_exists_id
//											long ll_bs_specs_others_exists_id
//											//
//											select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_pos_exists_id, :ll_pos_xrefid, :ls_pos_funddept, :ls_pos_addinfo, :ls_pos_jobcode, :ls_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_add_user_empno using sqlca;
//											//
//											if(ll_pos_exists_id > 0) then
//												ll_xrefmods_ppos2recid = ll_pos_exists_id
//											else
//												
//											end if
//											//
//											select id into :ll_xref_exists_id from sns_pos_xref where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_emp_exists_id from sns_employees where empno = :ll_add_user_empno using sqlca;
//											//
//											select id into :ll_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_selected_empname and empno = :ll_add_user_empno using sqlca;
//											//	
//											if(ll_pos_exists_id = 0) then
//												//insert into sns_staffing_grps_positions2
//												//li_func_rtn_value = f_insert_pos2_support_table_records(
//												//ll_clicked_grpid, 
//												//ls_callnum, 
//												//ll_empno, 
//												//ls_funddept, 
//												//ls_addinfo, 
//												//ls_vehinfo, 
//												//ls_positionid, 
//												//ls_jobcode, 
//												//ls_jobtitle, 
//												//dec_basepay, 
//												//b_modify_positions2_table, 
//												//ref ls_error, ref sqlca)
//											end if
//											
//											
//											
//											
//											
//											
//											
//										end if
										li_stop = 0
									end if //ll_from_bs_specs_others_exists_id > 0											
								else
									MessageBox("Notification","Cannot add Employee " + ls_selected_empname + ". They already Exist/Assigned in the positions table in a different group.")
								end if
							else
								//bInsertNewUser = false code block
								bAutoRefresh = false
								MessageBox("Notification","One or more callnum preset code block failed!")
							end if //bInsertNewUser = true
							if(bAutoRefresh = true) then
								string ls_refresh_grpids
								ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
								sle_refresh_grpids.text = ls_refresh_grpids
								TriggerEvent(pb_refresh, Clicked!)							
							end if
						end if //ll_add_user_empno > 0
					end if
				end if
			end if //ll_to_grpid > 0
		end if
	end if 
end if	

end event

event dragdrop;if(bIsDragging = true) then
	integer li_stop
	sle_drag_drop_row.text = string(row)
	//=======================
	long ll_dragdrop_grpid
	ll_dragdrop_grpid = 1
	//=======================
	datawindow dw_to_object
	dw_to_object = f_getDwobjectByGrpid(ll_dragdrop_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	datawindow dw_from_object
	long ll_from_grpid
	ll_from_grpid = f_stol(sle_drag_from_grpid.text)
	if(ll_from_grpid > 0) then	
		dw_from_object = f_getDwobjectByGrpid(ll_from_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	end if
	datawindow dw_unassigned_object
	dw_unassigned_object = f_getDwobjectByGrpid(131, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if((IsValid(dw_from_object) = true) and (IsValid(dw_to_object) = true)) then
		string ls_errors
		string ls_drag_from_positionid
		string ls_dwo_name
		long ll_to_grpid
		string ls_grpid		
		string ls_empname
		long ll_empno
		string ls_callnum
		long ll_row_count
		long ll_num_avail_positions
		integer li_to_grow
		integer li_to_gcol	
		string ls_from_hdrtext
		string ls_from_empname
		long ll_from_row
		string ls_to_hdrtext
		string ls_to_empname
		long ll_to_row
		string ls_mode
		long ll_from_empno
		long ll_to_empno
		long ll_to_rowcount
		string ls_from_text
		long ll_from_pos_id
		long ll_from_xrefid
		string ls_from_positionid
		long ll_to_pos_id
		long ll_to_xrefid
		string ls_to_positionid
		string ls_jobcode
		string ls_jobtitle
		string ls_funddept
		string ls_addinfo
		string ls_vehnum
		integer li_rtn_value
		string ls_error
		string ls_groupname
		integer li_case_num
		integer li_active
		integer li_issuper
		integer li_isunfilled
		integer li_pos2idshort
		string ls_status
		long ll_pid
		integer li_remins_rtn
		string ls_row
		string ls_col
		string ls_icon_name
		string ls_sqlerrtext
		string ls_from_callnum
		integer li_commit_status
		integer li_num_dup_callnums
		ls_errors = ""
		ls_icon_name = sle_icon_filenanme.text 		
		li_remins_rtn = 0
		ll_pid = 0
		//---------------------------------
		ls_dwo_name = ""
		ll_to_grpid = 0
		ls_grpid = ""
		ls_empname = ""
		ll_empno = 0
		ls_callnum = ""
		ll_row_count = 0
		ll_num_avail_positions = 0
		li_to_grow = 0
		li_to_gcol = 0
		ls_row = ""
		ls_col = ""
		ls_from_callnum = ""
		//---------------------------------
		ls_from_callnum = sle_drag_from_callnum.text
		ls_dwo_name = upper(dwo.name)
		ls_drag_from_positionid = ""
		ls_drag_from_positionid = sle_drag_from_positionid.text
		string ls_hdrtext
		if(row = 0) then
			ls_hdrtext = dw_to_object.getitemstring(1, "grpteamid")	
		else
			ls_hdrtext = dw_to_object.getitemstring(row, "grpteamid")	
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_to_grpid = f_stol(ls_grpid)		
		string ls_dragfrom_hdrtext
		ls_dragfrom_hdrtext = sle_drag_from_hdrtext.text
		sle_drag_drop_hdrtext.text = ls_hdrtext
		sle_drag_drop_object.text = ls_dwo_name
		sle_drag_drop_grpid.text = string(ll_to_grpid)
		ll_row_count = dw_to_object.rowcount()			
		sle_dragdrop_rowcount.text = string(ll_row_count)	
		if(ll_to_grpid > 0) then
			li_to_grow = f_deterGrpidRowCol(ll_to_grpid, ll_row_count, ref li_to_gcol)
			//
			select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_to_grpid using sqlca;
			//
			sle_num_avail_positions.text = string(ll_num_avail_positions)
		end if		
		sle_drag_drop_row.text = string(row)
		sle_drag_drop_col.text = string(li_to_gcol)
//		if(ls_hdrtext = ls_dragfrom_hdrtext) then
//			if((ls_dragfrom_hdrtext = ls_hdrtext) and (ls_dwo_name = "DATAWINDOW") and (ll_dragdrop_grpid = ll_to_grpid) and (row = 0)) then
//				//just display info and cancel drag
//				sle_drag_drop_empname.text = "INSERT"
//				dw_to_object.Drag(Cancel!)
//				bIsDragging = false		
//				sle_is_dragging.text = string(bIsDragging)				
//			else
//				triggerevent(pb_cancel_dragdrop, Clicked!) //if same window as dragenter then cancel dragdrop
//			end if
//		else
			ll_empno = 0
			ll_to_grpid = 0	
			//w_main.sle_drag_drop_hdrtext.text = ls_hdrtext
			if(row > 0) then
				ls_empname = dw_to_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_drop_empname.text = ls_empname		
				ls_callnum = dw_to_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_drop_callnum.text = ls_callnum				
				ll_empno = dw_to_object.getitemnumber(row, "sns_board_specs_others_empno")
				sle_drag_drop_empno.text = string(ll_empno)
				if(ll_empno > 0) then
				end if //ll_empno > 0
			else
				sle_drag_drop_empname.text = "INSERT"
				sle_drag_drop_empno.text = string(ll_empno)
			end if
			dw_to_object.Drag(Cancel!)
			bIsDragging = false	
			//
			ls_from_hdrtext = ""
			ls_from_empname = ""
			ll_from_row = 0
			ls_to_hdrtext = ""
			ls_to_empname = ""
			ll_to_row = 0
			ls_mode = ""
			ll_from_empno = 0
			ll_to_empno = 0
			ll_to_rowcount = 0
			ls_from_text = ""
			//
			ls_from_text = sle_drag_from_object.text
			ls_from_hdrtext = sle_drag_from_hdrtext.text
			ls_from_empname = sle_drag_from_empname.text
			ll_from_row = f_stol(sle_drag_from_row.text)
			ls_to_hdrtext = sle_drag_drop_hdrtext.text
			ls_to_empname = sle_drag_drop_empname.text
			ll_to_row = row
			ll_from_grpid = f_stol(sle_drag_from_grpid.text)
			ll_to_grpid = f_stol(sle_drag_drop_grpid.text)
			ll_from_empno = f_stol(sle_drag_from_empno.text)
			ll_to_empno = f_stol(sle_drag_drop_empno.text)
			ll_to_rowcount = dw_to_object.rowcount()
			//------------------- fix xrefids if needed --------------------------
			ll_from_pos_id = 0
			ll_from_xrefid = 0
			ls_from_positionid = ""
			ll_to_pos_id = 0
			ll_to_xrefid = 0
			ls_to_positionid = ""
			//------------------------------
			boolean bSkipInvalidDropCallnum
			bSkipInvalidDropCallnum = false
			if(ll_from_grpid = 131) then
				if(ls_callnum <> ls_from_callnum) then
					MessageBox("Notification","When dragging from the 'UNASSIGNED {131}' group and the call number is not blank, then it can only be dropped on a like '** UNFILLED **' call number. Try again please!", Exclamation!)
					bSkipInvalidDropCallnum = true
				end if
			end if
			//------------------------------
			if(bSkipInvalidDropCallnum = false) then
				//
				select positionid into :ls_from_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
				//
				sle_drag_from_positionid.text = ls_from_positionid
				//
				select positionid into :ls_to_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
				//
				sle_drag_to_positionid.text = ls_to_positionid
				if(f_len_ext(ls_from_positionid) >= 14) then
					//
					select id,xrefid into :ll_from_pos_id, :ll_from_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
					//
				end if			
				if(f_len_ext(ls_to_positionid) >= 14) then
					//
					select id,xrefid into :ll_to_pos_id, :ll_to_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
					//
				end if
				if(ll_from_xrefid = 0) then
					ll_from_xrefid = f_fix_xrefid(ll_from_empno, ref sqlca)
				end if
				if(ll_to_xrefid = 0) then
					ll_to_xrefid = f_fix_xrefid(ll_to_empno, ref sqlca)
				end if
				ls_jobcode = ""
				ls_jobtitle = ""
				ls_funddept = ""
				ls_error = ""
				if(ll_to_empno > 0) then
					//
					select job_code, title into :ls_jobcode, :ls_jobtitle from fm.io_employee using sqlca;
					//
				end if
				//-------------------------------------------------------------------
				ls_mode = f_deterDragDropMode(ll_to_row, ll_to_rowcount, ll_num_avail_positions, ll_from_grpid, ll_to_grpid, ll_from_empno, ll_to_empno, ls_from_empname, ls_to_empname, ls_from_hdrtext, ls_to_hdrtext)
				sle_drag_drop_mode.text = ls_mode
				if(f_len_ext(ls_mode) >= 4) then
					ls_error = ""
					ls_addinfo = "."
					ls_vehnum = "."
					ls_groupname = "PATROL"
					li_case_num = 0				
					li_active = 1
					li_issuper = 0
					li_isunfilled = 0
					ls_col = string(li_to_gcol)
					ls_row = string(li_to_grow)
					long ll_fm_empno
					string ls_fm_empname
					string ls_fm_funddept
					string ls_fm_title
					long ll_fm_jobcode
					string ls_fm_jobcode
					string ls_fm_positionid
					ll_fm_empno = 0
					ls_fm_empname = ""
					ls_fm_funddept = ""
					ls_fm_title = ""
					ll_fm_jobcode = 0
					ls_fm_positionid = ""
					if(ll_to_empno > 0) then
						//
						select empno, empname, fund || '-' || dept as funddept, title, job_code, position_id into :ll_fm_empno, :ls_fm_empname, :ls_fm_funddept, :ls_fm_title, :ll_fm_jobcode, :ls_fm_positionid
						from fm.io_employee
						where empno = 17117			
						using sqlca;
						//
						if(ll_fm_jobcode > 0) then
							ls_fm_funddept = string(ll_fm_jobcode)
						end if
					end if
					//===========================
					boolean bSuccessfulMove
					boolean bSuccessfulRemove
					boolean bSuccessfulInsert
					string lsa_dd_errors[]				
					//===========================
	
					string ls_from_funddept
					string ls_from_addinfo
					string ls_from_jobcode
					string ls_from_jobtitle
					integer li_num_deletes
					integer li_num_updates		
					integer li_inserted_status
					ls_from_funddept = ""
					ls_from_addinfo = ""
					ls_from_jobcode = ""
					ls_from_jobtitle = ""
	
					//
					long ll_from_pos_exists_id
					long ll_from_xref_exists_id
					long ll_from_xrefmods_exists_id
					long ll_from_emp_exists_id
					long ll_from_xrefmods_ppos2recid
					long ll_from_bs_specs_others_exists_id				
					long ll_from_pos_xrefid
					string ls_from_pos_funddept
					string ls_from_pos_addinfo
					string ls_from_pos_jobcode
					string ls_from_pos_jobtitle
					ll_from_pos_exists_id = 0              //used
					ll_from_xref_exists_id = 0             
					ll_from_xrefmods_exists_id = 0 
					ll_from_emp_exists_id = 0 
					ll_from_xrefmods_ppos2recid = 0        //used
					ll_from_bs_specs_others_exists_id = 0 				
					ll_from_pos_xrefid = 0                 //used
					
					ll_from_pos_xrefid = 0
					ls_from_pos_funddept = ""              //used
					ls_from_pos_addinfo = ""               //used
					ls_from_pos_jobcode = ""               //used
					ls_from_pos_jobtitle = ""              //used
					//				
					long ll_to_pos_exists_id
					long ll_to_xref_exists_id
					long ll_to_xrefmods_exists_id
					long ll_to_emp_exists_id
					long ll_to_xrefmods_ppos2recid
					long ll_to_bs_specs_others_exists_id		
					long ll_to_pos_xrefid
					string ls_to_pos_funddept
					string ls_to_pos_addinfo
					string ls_to_pos_jobcode
					string ls_to_pos_jobtitle
					ll_to_pos_exists_id = 0                //used
					ll_to_xref_exists_id = 0
					ll_to_xrefmods_exists_id = 0
					ll_to_emp_exists_id = 0
					ll_to_xrefmods_ppos2recid = 0
					ll_to_bs_specs_others_exists_id = 0
					ll_to_pos_xrefid = 0                   //used
					ls_to_pos_funddept = ""                //used
					ls_to_pos_addinfo = ""                 //used
					ls_to_pos_jobcode = ""                 //used
					ls_to_pos_jobtitle = ""                //used
					//collect from table variables
					if(ll_from_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_from_pos_exists_id, :ll_from_pos_xrefid, :ls_from_pos_funddept, :ls_from_pos_addinfo, :ls_from_pos_jobcode, :ls_from_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_from_empno using sqlca;
						//
						if(ll_from_pos_exists_id > 0) then
							ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
						end if
						select id into :ll_from_xref_exists_id from sns_pos_xref where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_emp_exists_id from sns_employees where empno = :ll_from_empno using sqlca;
						//
						select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_from_empname and empno = :ll_from_empno using sqlca;
						//
					end if
					if((ll_from_pos_exists_id = 0) and (ll_from_pos_xrefid = 0) and (ll_from_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_from_positionid) > 0) then
							//
							select id, xrefid into :ll_from_pos_exists_id, :ll_from_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_from_positionid using sqlca;
							//
							if(ll_from_pos_exists_id > 0) then
								ll_from_xrefmods_ppos2recid = ll_from_pos_exists_id
								//
								select id into :ll_from_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_from_pos_exists_id using sqlca;
								//
							end if
							if((ll_from_xref_exists_id = 0) and (ll_from_pos_xrefid > 0)) then
								//
								select id into :ll_from_xref_exists_id from sns_pos_xref where id = :ll_from_pos_xrefid using sqlca;
							end if
						end if
						if((ll_from_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_from_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_from_grpid and callnum = :ls_from_callnum using sqlca;
							//
						end if
					end if					
					
					//collect to table variables
					if(ll_to_empno > 0) then
						//
						select id, xrefid, funddept, addinfo, jobcode, jobtitle into :ll_to_pos_exists_id, :ll_to_pos_xrefid, :ls_to_pos_funddept, :ls_to_pos_addinfo, :ls_to_pos_jobcode, :ls_to_pos_jobtitle from sns_staffing_grps_positions2 where assgnd_empno = :ll_to_empno using sqlca;
						//
						if(ll_to_pos_exists_id > 0) then
							ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
						end if
						select id into :ll_to_xref_exists_id from sns_pos_xref where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where pempno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_emp_exists_id from sns_employees where empno = :ll_to_empno using sqlca;
						//
						select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where ltrim(rtrim(upper(empname))) = :ls_to_empname and empno = :ll_to_empno using sqlca;
						//			
					end if	
					if((ll_to_pos_exists_id = 0) and (ll_to_pos_xrefid = 0) and (ll_to_bs_specs_others_exists_id = 0)) then
						if(f_len_ext(ls_to_positionid) > 0) then
							//
							select id, xrefid into :ll_to_pos_exists_id, :ll_to_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_to_positionid using sqlca;
							//
							if(ll_to_pos_exists_id > 0) then
								ll_to_xrefmods_ppos2recid = ll_to_pos_exists_id
								//
								select id into :ll_to_xrefmods_exists_id from sns_pos_xref_mods where ppos2recid = :ll_to_pos_exists_id using sqlca;
								//
							end if
							if((ll_to_xref_exists_id = 0) and (ll_to_pos_xrefid > 0)) then
								//
								select id into :ll_to_xref_exists_id from sns_pos_xref where id = :ll_to_pos_xrefid using sqlca;
							end if
						end if
						if((ll_dragdrop_grpid > 0) and (f_len_ext(ls_callnum) > 0)) then
							//
							select id into :ll_to_bs_specs_others_exists_id from sns_board_specs_others where grpid = :ll_dragdrop_grpid and callnum = :ls_callnum using sqlca;
							//
						end if
					end if
					li_num_dup_callnums = 0
					//
					select count(*) into :li_num_dup_callnums from sns_board_specs_others where callnum = :ls_callnum using sqlca;
					//
					if(li_num_dup_callnums > 0) then
						MessageBox("Notification","Call number " + ls_callnum + " Is already assigned!", Exclamation!)
						return
					end if
					
					//                                     ls_from_hdrtext      ls_from_text       ll_from_grpid       ls_from_empname         ll_from_row   ls_mode      ls_to_hdrtext       ls_dwo_name         ll_to_grpid        ls_to_empname       ll_to_row        numavailpositions     dropgrouprowcount from_empno
					//li_case_num = f_determine_case_num(ls_drag_from_header, ls_drag_from_text, ll_drag_from_grpid, ls_drag_from_empname, li_drag_from_row, ls_mode, ls_drag_drop_header, ls_drag_drop_text, ll_drag_drop_grpid, ls_drag_drop_empname, li_drag_drop_row, li_num_avail_rows, li_drop_to_rowcount, ll_from_empno)
					li_case_num = f_determine_case_num(ls_from_hdrtext, ls_from_text, ll_from_grpid, ls_from_empname, ll_from_row, ls_mode, ls_to_hdrtext, ls_dwo_name, ll_to_grpid, ls_to_empname, ll_to_row, ll_num_avail_positions, ll_row_count, ls_icon_name, ll_from_empno)
					sle_case_num.text = string(li_case_num)				
					//###############
					//### CASE# 9 ###
					//###############
					if(li_case_num = 9) then
						//-------------------------------------------------------------------------
						//MOVE DRAG_FROM_EMPNAME TO *** UNFILLED *** POSTION WITHIN SAME GROUP
						//example GABBITAS-KONNER MOVE FROM 1J2534 TO 1J2532 (UNFILLED)
						//ll_from_pos_exists_id	1678
						//ll_from_pos_xrefid	366
						//ll_from_xrefmods_ppos2recid	1678
						//ll_from_xref_exists_id	366
						//ll_from_xrefmods_exists_id	366
						//ll_from_emp_exists_id	1215
						//ll_from_bs_specs_others_exists_id	74
						//ll_to_pos_exists_id	638
						//ll_to_pos_xrefid	212
						//ll_to_xrefmods_ppos2recid	638
						//ll_to_xref_exists_id	212
						//ll_to_xrefmods_exists_id	212
						//ll_to_emp_exists_id	0 (unfilled postion han not empno)
						//ll_to_bs_specs_others_exists_id	80
						//-------------------------------------------------------------------------
						//ll_dragdrop_grpid	8
						//ll_from_grpid	8
						//ll_from_empno	19633
						//li_drag_drop_row	3
						//li_drag_from_row	5
						//li_drop_to_rowcount	10
						//li_num_avail_rows	12
						//ls_callnum	1J2532
						//ls_from_callnum	1J2534
						//li_super_lvl	
						//ls_from_positionid	00512
						//ls_to_positionid	00066
   					//-------------------------------------------------------------------------
						//swap records callnum in sns_staffing_grps_positions2 and sns_pos_xref and sns_pos_xref_mods between from -> to   to -> from
						if((ll_from_pos_exists_id > 0) and (ll_to_pos_exists_id > 0)) then
							//--- drag from updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_callnum where id = :ll_from_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_from_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_callnum where id = :ll_from_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_from_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_callnum where id = :ll_from_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
							//--- drag to updates ---
							//
							update sns_staffing_grps_positions2 set callnum = :ls_from_callnum where id = :ll_to_pos_exists_id using sqlca;
							//
							li_commit_status = f_commit_rollback_record(ref sqlca)
							if((ll_to_pos_xrefid > 0) and (li_commit_status = 1)) then
								//
								update sns_pos_xref set spunitno = :ls_from_callnum where id = :ll_to_pos_xrefid using sqlca;
								//
								li_commit_status = f_commit_rollback_record(ref sqlca)
								if((ll_to_xrefmods_exists_id > 0) and (li_commit_status = 1)) then
									//
									update sns_pos_xref_mods set pspunitno = :ls_from_callnum where id = :ll_to_xrefmods_exists_id using sqlca;
									//
									f_commit_rollback_record(ref sqlca)
								end if
							end if
						end if						
						//swap records callnums in sns_board_specs_others between from and to  from -> to   to -> from
						if((ll_from_bs_specs_others_exists_id > 0) and (ll_to_bs_specs_others_exists_id > 0)) then
							//
							update sns_board_specs_others set callnum = :ls_from_callnum where id = :ll_to_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)
							//
							update sns_board_specs_others set callnum = :ls_callnum where id = :ll_from_bs_specs_others_exists_id using sqlca;
							//
							f_commit_rollback_record(ref sqlca)							
						end if
					end if
					//###############
					//### CASE# 6 ###
					//###############
					if(li_case_num = 6) then
						li_isunfilled = 1
						//-sle_drag_from_hdrtext <> sle_drag_drop_hdrtext
						//-sle_drag_from_object = 'SNS_BOARD_SPECS_OTHERS_EMPLOYEE'
						//-sle_drag_from_row between 1 and 12
						//-sle_drag_from_empno > 0
						//-sle_drag_from_grpid > 0
						//-mode = 'EMPTY'
						//-sle_drag_drop_object = 'DATAWINDOW'
						//-sle_drag_drop_grpid > 0 and <> sle_drom_from_grpid
						//-sle_drag_drop_empname = 'INSERT'
						//-sle_dragdrop_rowcount > 0 and <= sle_num_avail_positions
						//INSERT INTO DRAG_TO_GROUP
						//REMOVE FROM DRAG_FROM_GROUP
						//
						li_stop = 0
						bSuccessfulMove = false
						bSuccessfulRemove = false
						bSuccessfulInsert = false					
	
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						//bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
						
						if((ll_from_pos_exists_id > 0) and (ll_from_bs_specs_others_exists_id > 0)) then
	
							li_num_deletes = 0
							li_num_updates = 0
							// - delete from sns_staffing_grps_positions2 where id = ll_from_pos_exists_id
							delete from sns_staffing_grps_positions2 where id = :ll_from_pos_exists_id using sqlca;
							//
							if(sqlca.sqlcode <> -1) then
								//
								commit using sqlca;
								//
								li_num_deletes++
							else
								ls_sqlerrtext = sqlca.sqlerrtext
								//
								rollback using sqlca;
								//
								ls_sqlerrtext = "delete from sns_staffing_grps_positions2 error=" + ls_sqlerrtext
								f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
							end if
							// - delete from sns_pos_xref where id = ll_from_xref_exists_id
							if(ll_from_xref_exists_id > 0) then
								//
								delete from sns_pos_xref where id = :ll_from_xref_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if
							end if
							// - delete from sns_pos_xref_mods where id = ll_from_xrefmods_exists_id
							if(ll_from_xrefmods_exists_id > 0) then
								//
								delete from sns_pos_xref_mods where id = :ll_from_xrefmods_exists_id using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_deletes++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "delete from sns_pos_xref_mods error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if							
							end if
							// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
							if(ll_from_emp_exists_id > 0) then
								//''
								update sns_employees set positionid = '', title = '', jobcode = '', jobtitle = '', supervisor = '', grps_resp = '', grpid = 0	
								where id = :ll_from_emp_exists_id 
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_employees error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							// - update sns_board_specs_others set empname = "", empno = 0, positionid = "" where id = ll_from_bs_specs_others_exists_id
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								update sns_board_specs_others set empname = '', empno = 0, positionid = ''
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
							end if
							if((li_num_deletes > 0) and (li_num_updates = 2) and (UpperBound(lsa_dd_errors) = 0)) then
								bSuccessfulRemove = true
							end if
						end if
						if(bSuccessfulRemove = true) then
							//===================================
							//*** INSERT INTO DRAG_TO GROUP ***
							//===================================
	//						li_inserted_status = 0
	//						li_inserted_status = f_insert_into_dragto_group(ll_from_bs_specs_others_exists_id, ll_from_emp_exists_id, ls_from_empname, ll_from_empno, ls_from_positionid, &
	//																						ll_to_grpid, ls_from_funddept, ls_from_jobtitle,ls_from_jobcode, ls_to_positionid, ref li_num_updates, &
	//																						ref lsa_dd_errors, ref sqlca)
	
							// update sns_board_specs_others
	
							string ls_to_callnum
							li_num_updates = 0
							if(ll_from_bs_specs_others_exists_id > 0) then
								//
								select callnum into :ls_to_callnum from sns_board_specs_others where id = :ll_from_bs_specs_others_exists_id using sqlca;
								//
								update sns_board_specs_others set empname = :ls_from_empname, empno = :ll_from_empno, positionid = :ls_from_positionid
								where id = :ll_from_bs_specs_others_exists_id
								using sqlca;
								//
								if(sqlca.sqlcode <> -1) then
									//
									commit using sqlca;
									//
									li_num_updates++
								else
									ls_sqlerrtext = sqlca.sqlerrtext
									//
									rollback using sqlca;
									//
									ls_sqlerrtext = "update to sns_board_specs_others error=" + ls_sqlerrtext
									f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
								end if								
								li_rtn_value = 0
								string ls_to_addinfo
								ls_to_addinfo = f_replace_string_in_string(ls_to_callnum, "1J", " ")
								ls_to_addinfo = f_compress_string(ls_to_addinfo, " ")
								//  0 = successful
								// -1 = no action taken
								// -2 = li_assgnd_empno_count > 0
								// -3 = li_positionid_count > 0
								// -4 = assgnd_empno not found in pos2
								// -5 = ll_pos2idshort invalid
								// -6 = tr_sqlca sqlcode = -1 sns_staffing_grps_positions2
								// -7 = tr_sqlca sqlcode = -1 sns_pos_xref
								// -8 = tr_sqlca sqlcode = -1 sns_pos_xref_mods
								// -9 = tr_sqlca sqlcode = -1 sns_group_ids
								//-10 = ll_pos2idshort <0 or > 90000 
								li_rtn_value = f_insert_pos2_support_table_records(ll_to_grpid, ls_to_callnum, ll_from_empno, ls_from_funddept, ls_to_addinfo, ".", ls_from_positionid, ls_from_jobcode, ls_from_jobtitle, 0.0, true, ref ls_error, ref sqlca)
								if(li_rtn_value >= 1) then
									if(ll_from_emp_exists_id > 0) then
										// - update sns_employees set positionid = "", title = "", jobcode = "", jobtitle = "", supervisor = 0, grps_resp = "", grpid = 0 where id = ll_from_emp_exists_id
										update sns_employees set positionid = :ls_to_positionid, title = :ls_from_jobtitle, jobcode = :ls_from_jobcode, grpid = :ll_to_grpid
										where id = :ll_from_emp_exists_id
										using sqlca;
										//
										if(sqlca.sqlcode <> -1) then
											//
											commit using sqlca;
											//
											li_num_updates++
										else
											ls_sqlerrtext = sqlca.sqlerrtext
											//
											rollback using sqlca;
											//
											ls_sqlerrtext = "update to sns_employees columns error=" + ls_sqlerrtext
											f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
										end if										
										if((ll_to_grpid > 0) and (li_num_updates >= 2)) then
											long ll_grps_resp
											long ll_grp_super_empno
											ll_grps_resp = 0
											ll_grp_super_empno = 0
											//
											select grp_super_empno, root_grp_super_empno into :ll_grp_super_empno, :ll_grps_resp from sns_staffing_groups where id = :ll_to_grpid using sqlca;
											//
											update sns_employees set grps_resp = :ll_grps_resp, supervisor = :ll_grp_super_empno where id = :ll_from_emp_exists_id using sqlca;
											//
											if(sqlca.sqlcode <> -1) then
												//
												commit using sqlca;
												//
												li_num_updates++
											else
												ls_sqlerrtext = sqlca.sqlerrtext
												//
												rollback using sqlca;
												//
												ls_sqlerrtext = "update to sns_employees grps_resp,supervisor error=" + ls_sqlerrtext
												f_add_item_to_string_array_ext(ref lsa_dd_errors, ls_sqlerrtext, false)
											end if											
										end if //ll_to_grpid > 0
									end if//ll_from_emp_exists_id > 0
								end if //li_rtn_value = 0
							end if //ll_from_bs_specs_others_exists_id > 0						
						end if //bSuccessfulRemove = true
					end if //li_case_num = 6
					//###############
					//### CASE# 8 ###
					//###############
					if(li_case_num = 8) then
						li_isunfilled = 0
						//===================================
						//*** REMOVE FROM DRAG_FROM GROUP ***
						//===================================
						bSuccessfulRemove = false
						li_rtn_value = 0
						// 1 = successful backup
						//-1 = invalid li_case_num or ls_from_hdrtext or ls_to_hdrtext
						//-2 = insert failed
						//-3 = remove previous backup failed
						li_rtn_value = f_backup_board_specs_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref sqlca)
						if(li_rtn_value = 1) then
							bSuccessfulRemove = f_remove_from_dragfrom_group(ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref lsa_dd_errors, ref li_num_deletes, ref li_num_updates, ref sqlca)
							if(bSuccessfulRemove = true) then
								string lsa_parms[]
								f_allocate_string_array(39, ref lsa_parms)
								lsa_parms[1] = string(ll_from_bs_specs_others_exists_id)
								lsa_parms[2] = string(ll_from_emp_exists_id)
								lsa_parms[3] = string(ll_from_pos_exists_id)
								lsa_parms[4] = string(ll_from_pos_xrefid)
								lsa_parms[5] = string(ll_from_xref_exists_id)
								lsa_parms[6] = ls_empname
								lsa_parms[7] = string(ll_from_empno)
								lsa_parms[8] = ls_from_positionid
								lsa_parms[9] = ls_from_funddept
								lsa_parms[10] = ls_from_jobtitle
								lsa_parms[11] = ls_from_jobcode
								lsa_parms[12] = string(ll_from_grpid)
								lsa_parms[13] = string(ll_from_row)
								lsa_parms[14] = ls_from_pos_addinfo
								lsa_parms[15] = ls_from_pos_funddept
								lsa_parms[16] = ls_from_pos_jobcode
								lsa_parms[17] = ls_from_pos_jobtitle
								lsa_parms[18] = string(ll_to_grpid)
								lsa_parms[19] = ls_to_positionid
								lsa_parms[20] = string(ll_to_row)
								lsa_parms[21] = string(ll_to_rowcount)
								lsa_parms[22] = ls_to_empname
								lsa_parms[23] = ls_callnum
								lsa_parms[24] = ls_dragfrom_hdrtext
								lsa_parms[25] = ls_empname
								lsa_parms[26] = ls_hdrtext
								lsa_parms[27] = ls_mode
								lsa_parms[28] = ls_row
								lsa_parms[29] = ""
								lsa_parms[30] = ""
								lsa_parms[31] = ""
								lsa_parms[32] = ""
								lsa_parms[33] = ""
								lsa_parms[34] = ""
								lsa_parms[35] = ""
								lsa_parms[36] = ""
								lsa_parms[37] = ""
								lsa_parms[38] = ""
								lsa_parms[39] = ""
								//===================================
								//*** INSERT INTO DRAG_TO GROUP ***
								//===================================
								li_inserted_status = 0
								li_inserted_status = f_insert_into_dragto_group(li_case_num, lsa_parms, ref li_num_updates, ref lsa_dd_errors, ref sqlca)					
							else
								li_rtn_value = 0		
								ls_errors = ""
								li_rtn_value = f_restore_board_specs_backup_tables(li_case_num, ls_from_hdrtext, ls_to_hdrtext, ll_from_pos_exists_id, ll_from_bs_specs_others_exists_id, ll_from_xref_exists_id, ll_from_xrefmods_exists_id, ll_from_emp_exists_id, ref ls_errors, ref sqlca)
								MessageBox("Notification","Drag-Drop inserts failed. Restore completed. Please Call administrator at x4008.");
							end if
						else
							MessageBox("Notification","Failed to backup board specs (f_backup_board_specs_tables). return value= " + string(li_rtn_value) + ". Please Call administrator at x4008.")
						end if
					end if
					//###############
					//### CASE# 2 ###
					//###############
					if(li_case_num = 2) then
					
					end if
					if(ll_to_grpid = ll_dragdrop_grpid) then
						sle_refresh_grpids.text = string(ll_dragdrop_grpid)
					else
						string ls_refresh_grpids
						ls_refresh_grpids = string(ll_dragdrop_grpid) + "," + string(ll_from_grpid)
					end if
					TriggerEvent(pb_refresh, Clicked!)	
				end if
				sle_is_dragging.text = string(bIsDragging)
			end if
		//end if
	end if	
end if
end event

event dragwithin;//==================
//### DRAGWITHIN ###
//==================
//dragwithin
if(bIsDragging = true) then
	sle_is_dragging.text = string(bIsDragging)
	sle_dragwithin_row.text = ""
	sle_dragwithin_header.text = ""
	sle_dragwithin_text.text = ""
	sle_dragwithin_empno.text = ""
	string ls_hdrtext
	long ll_empno
	string ls_dwoname	
	ls_dwoname = trim(upper(dwo.name))
	
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 1
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		ls_hdrtext = ""
		ll_empno = 0	
		string ls_empname
		string ls_callnum
		ls_hdrtext = trim(upper(dw_clicked_object.getitemstring(row, "grpteamid")))
		ll_empno = 0
		ls_empname = ""
		sle_drag_drop_empname.text = ls_empname
		//ls_callnum = dw_c.getitemstring(row, "sns_board_specs_others_callnum")
		//ll_empno = dw_c.getitemnumber(row, "sns_board_specs_others_empno")
		if(row > 0) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")	
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
			if(sle_drag_from_hdrtext.text <> ls_hdrtext) then
				//dragicon logic
				if(pos(ls_dwoname, "sns_board_specs_others_empname") > 0) then
					if(ll_empno > 0) then
						this.dragicon = "UserObject5!"
						sle_icon_filenanme.text = "UserObject5!"
					else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign1!"
					end if
				elseif(pos(ls_dwoname, "DATAWINDOW") > 0) then
					//if(ll_empno > 0) then
						//this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFDROP.ICO"
						//sle_icon_filenanme.text = "Drop!"
					//else
						this.dragicon = "StopSign!"
						sle_icon_filenanme.text = "StopSign2!"			
					//end if
				else
					//this.dragicon = "StopSign!"
					//sle_icon_filenanme.text = "StopSign3!"			
					this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFREPLACE.ICO"
					sle_icon_filenanme.text = "Replace!"
				end if
			else
				this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			end if
		else
			this.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFINSERT.ICO"
			sle_icon_filenanme.text = "Insert!"
			sle_dragwithin_row.text = string(row)
			sle_dragwithin_header.text = ls_hdrtext
			sle_dragwithin_text.text = ls_dwoname
			sle_dragwithin_empno.text = string(ll_empno)
		end if
	end if
end if
end event

event clicked;if(bIsDragging = false) then
	string ls_dwo_name
	string ls_hdrtext
	long ll_grpid 
	string ls_grpid	
	long ll_empno
	string ls_callnum
	string ls_empname			
	integer li_grow
	integer li_gcol
	string ls_parms
	string ls_rtn_parms
	long ll_row_count
	integer li_num_rows
	boolean bAutoRefresh
	bAutoRefresh = false
	boolean bOkToUpdate
	bOkToUpdate = true	
	string ls_refresh_grpids
	//=======================
	long ll_clicked_grpid
	ll_clicked_grpid = 1
	//=======================
	datawindow dw_clicked_object
	dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
	if(IsNull(dw_clicked_object) = false) then
		sle_drag_from_hdrtext.text = ""
		sle_drag_from_object.text = ""
		sle_drag_from_row.text = ""
		sle_drag_from_grpid.text = ""
		sle_drag_from_empno.text = ""
		sle_drag_from_callnum.text = ""
		sle_drag_from_empname.text = ""
		if(row = 0) then
			ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")
		else
			ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")
		end if
		string ls_hdrtext_short
		integer li_hpos
		li_hpos = pos(ls_hdrtext, "{")
		if(li_hpos > 0) then
			ls_hdrtext_short = trim(upper(mid(ls_hdrtext, 1, (li_hpos - 1))))
		end if
		ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
		ll_grpid = f_stol(ls_grpid)		
		ls_dwo_name = trim(upper(dwo.name)) //B_INSERT_POSITION
		sle_drag_from_row.text = string(row)
		ll_row_count = dw_clicked_object.rowcount()	
		li_grow = f_deterGrpidRowCol(ll_grpid, ll_row_count, ref li_gcol)
		//
		select numrows into :li_num_rows from sns_bd_others_layout_specs where grpid = :ll_grpid using sqlca;
		//
		ls_hdrtext_short = "/" + ls_hdrtext_short + "/"
		if((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_EMPNAME") and (pos(gs_not_allowed_to_dragdrop_hdrtexts, ls_hdrtext_short) = 0)) then
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")
			if(ll_empno > 0) then
				bIsDragging = true
				sle_drag_from_object.text = upper(dwo.name)
				sle_drag_from_hdrtext.text = ls_hdrtext
				sle_drag_from_grpid.text = string(ll_grpid)
				sle_drag_from_empno.text = string(ll_empno)
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname
				dw_clicked_object.Drag(Begin!)
				dw_clicked_object.dragicon = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
				sle_icon_filenanme.text = "\\ucfs1\apps\pix\ucso_staffing\UCSOSTAFFGRN.ICO"
			else
				bAutoRefresh = false
				ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
				sle_drag_from_callnum.text = ls_callnum
				ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
				sle_drag_from_empname.text = ls_empname				
				if(pos(ls_empname, "UNFILLED") > 0) then
					integer li_drslt
					integer li_max_names
					long ll_num_avail_positions
					li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
					if(li_drslt = 1) then
						integer li_del_rtn_value
						li_del_rtn_value = 0
						if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if
						elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
							//****************
							//**** CASE 3 ****
							//****************
							li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
							if(li_del_rtn_value = 1) then
								bAutoRefresh = true
							end if				
						end if
					end if
				end if
			end if //ll_empno > 0
		elseif((row > 0) and (ls_dwo_name = "SNS_BOARD_SPECS_OTHERS_CALLNUM")) then
			string ls_curr_calllnum
			ls_curr_calllnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
			ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
			ll_empno = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_empno")	
			integer li_curr_orderby
			li_curr_orderby = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_orderby")
			if(IsNull(li_curr_orderby) = true) then
				li_curr_orderby = 0
			end if
			long ll_record_id
			ll_record_id = dw_clicked_object.getitemnumber(row, "sns_board_specs_others_id")	
			if((ll_empno > 0) and (ll_record_id > 0)) then
				ls_parms = ls_curr_calllnum + "|" + string(ll_empno) + "|" + ls_empname + "|" + string(li_curr_orderby) + "|" + string(ll_record_id)
				OpenWithParm(w_change_callnum, ls_parms)
				ls_rtn_parms = Message.StringParm
				if(pos(ls_rtn_parms, "ERROR") > 0) then
					MessageBox("Notifcation","Call Number/Order by not changed. one or more errors occured! Call Administator with error. x4008")
					bOkToUpdate = false
				elseif(pos(ls_rtn_parms, "CANCEL") > 0) then
					bOkToUpdate = false
				end if
				if(bOkToUpdate = true) then
					dw_clicked_object.Retrieve(ll_clicked_grpid)
					bAutoRefresh = true
				end if
			end if
		else //row = 0
			if(li_grow < li_num_rows) then
				if(li_grow > ll_row_count) then 
					if(ls_dwo_name = "B_INSERT_POSITION") then
						gb_inserted_unfilled = false
						//ll_grpid||li_grow||li_gcol||ls_hdrtext||ll_row_count
						ls_parms = string(ll_grpid) + "|" + string(li_grow) + "|" + string(li_gcol) + "|" + ls_hdrtext + "|" + string(ll_row_count)
						OpenWithParm(w_insert_position, ls_parms)
						ls_rtn_parms = Message.StringParm
						dw_clicked_object.Retrieve(ll_grpid)
						gb_inserted_unfilled = true						
						bAutoRefresh = true
					end if					
				else
					if(ll_grpid > 0) then
						string ls_funddept
						string ls_groupname
						//
						select grpteam, funddept into :ls_groupname, :ls_funddept from sns_staffing_groups where id = :ll_grpid using sqlca;
						//
						string ls_row
						string ls_col
						ls_row = string(li_grow)
						ls_col = string(li_gcol)
						if(f_len_ext(ls_row) < 2) then
							ls_row = f_lpad(ls_row, 2, "0")
						end if
						if(f_len_ext(ls_col) < 2) then
							ls_col = f_lpad(ls_col, 2, "0")
						end if
						//insert unfilled position
						//f_insert_unfilled_bd_specs(ls_groupname, ls_row, ls_col, ll_grpid, ls_empname, ll_empno, ls_callnum, 0, 1, 1)
					else
						MessageBox("Notification", "Cannot insert row. Max number postions already used.")
					end if
				end if
			else
				MessageBox("Notification", "Cannot insert row. Max number postions already used.")
			end if
		end if //row > 0
		if(bAutoRefresh = true) then
			ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
			sle_refresh_grpids.text = ls_refresh_grpids
			TriggerEvent(pb_refresh, Clicked!)							
		end if
	end if //IsNull dw_clicked_object check
	
end if //bIsDragging = true

end event

event rbuttondown;//===================
//### RBUTTONDOWN ###
//===================
string ls_dwo_name
ls_dwo_name = dwo.name
boolean bAutoRefresh
//=======================
long ll_clicked_grpid
ll_clicked_grpid = 1
//=======================
datawindow dw_clicked_object
dw_clicked_object = f_getDwobjectByGrpid(ll_clicked_grpid, dw_a, dw_b, dw_c, dw_d, dw_rec1, dw_rec2, dw_em1, dw_em2, dw_emsro, dw_vine, dw_smcont, dw_fto, dw_team_resvrs, dw_unfilled, dw_unassigned, dw_supervisors, dw_admin)
if(IsNull(dw_clicked_object) = false) then
	string ls_empname
	string ls_callnum
	string ls_hdrtext
	string ls_refresh_grpids
	if(row = 0) then
		ls_hdrtext = dw_clicked_object.getitemstring(1, "grpteamid")	
	else
		ls_hdrtext = dw_clicked_object.getitemstring(row, "grpteamid")	
	end if
	string ls_grpid
	long ll_grpid
	ls_grpid = f_extract_bracketed_item(ls_hdrtext, "{","}", true)
	ll_grpid = f_stol(ls_grpid)
	long ll_num_avail_positions
	ll_num_avail_positions = 0
	if((row > 0) and (ll_grpid > 0)) then
		ls_empname = dw_clicked_object.getitemstring(row, "sns_board_specs_others_empname")
		ls_callnum = dw_clicked_object.getitemstring(row, "sns_board_specs_others_callnum")
		//
		select count(*) into :ll_num_avail_positions	from sns_board_specs_others where grpid = :ll_grpid using sqlca;
		//
		long ll_loop
		string ls_loopdata
		integer li_max_names
		li_max_names = 0
		for ll_loop = 1 to ll_num_avail_positions
			ls_loopdata = dw_clicked_object.getitemstring(ll_loop, "sns_board_specs_others_empname")
			if((pos(ls_loopdata, "UNFILLED") = 0) and (f_len_ext(ls_loopdata) > 0)) then
				li_max_names++			
			end if
		next
		//
		integer li_drslt 
		if(pos(ls_empname, "UNFILLED") = 0) then
			li_drslt = MessageBox("Question","Are you sure you want to remove " + ls_empname + " from " + gs_crlf + ls_hdrtext + " with callnum " + ls_callnum + "?", QUESTION!, YESNO!, 1)
			if(li_drslt = 1) then
				integer li_del_rtn_value
				li_del_rtn_value = 0
				if(pos(ls_empname, "UNFILLED") > 0) and (ls_callnum = "TBD") then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if
				elseif((pos(ls_empname, "UNFILLED") > 0) and (pos(ls_callnum, "1J") = 1)) then
					//****************
					//**** CASE 3 ****
					//****************
					li_del_rtn_value = f_deleteunfilledposition(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
					if(li_del_rtn_value = 1) then
						bAutoRefresh = true
					end if				
				else
					//****************
					//**** CASE 4 ****
					//****************
					if((li_max_names > 0) and (row <= ll_num_avail_positions)) then
						li_del_rtn_value = f_delete_filled_position(ref dw_clicked_object, row, dw_unassigned, ref sqlca)
						if(li_del_rtn_value = 1) then
							bAutoRefresh = true
						end if
					end if
				end if	
				if(bAutoRefresh = true) then
					ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
					sle_refresh_grpids.text = ls_refresh_grpids
					TriggerEvent(pb_refresh, Clicked!)							
				end if			
			end if
		else
			//ls_empname <> "UNFILLED"
			if(li_max_names < ll_num_avail_positions) then
				li_drslt = MessageBox("Question","Do you want to replace the *** UNFILLED *** position with a employee?", QUESTION!, YESNO!, 1)
				if(li_drslt = 1) then
					//select employee to replace *** UNFILLED *** position
					string ls_messageparm
					ls_messageparm = string(ll_clicked_grpid)
					OpenWithParm(w_add_user, ls_messageparm)
					string ls_selected_username
					ls_selected_username = Message.StringParm
					if(f_len_ext(ls_selected_username) > 0) then
						li_drslt = MessageBox("Notification","Do you want to add User " + ls_selected_username + " to group " + ls_hdrtext, QUESTION!, YESNO!)
						if(li_drslt = 1) then					
							//-------------------------------------------------------------
							long ll_boards_specs_others_id //sns_board_specs_others
							long ll_pos_id                 //sns_staffing_grps_positions2
							long ll_pos_xref_id            //sns_pos_xref
							long ll_pos_xref_mods_id       //sns_pos_xref_mods
							long ll_emp_id                 //sns_employees
							//-------------------------------------------------------------
							long ll_emp_empno
							string ls_emp_empname
							string ls_positionid
							string ls_sel_empno
							long ll_pos_grpid
							long ll_pos_xrefid
							string ls_pos_addinfo
							integer li_pos
							long ll_pos2idshort
							long ll_pos_addinfo
							string ls_fm_jobcode
							string ls_fm_jobtitle
							string ls_fm_positionid
							boolean b_skipadd
							string ls_funddept
							//-------------------------------------------------------------
							ll_boards_specs_others_id = 0
							ll_pos_id = 0
							ll_pos_xref_id = 0
							ll_pos_xref_mods_id = 0
							ll_emp_id = 0
							ll_emp_empno = 0
							ls_emp_empname = ""
							ls_positionid = ""
							ls_sel_empno = ""
							ll_pos_grpid = 0
							ll_pos_xrefid = 0
							ls_pos_addinfo = ""
							li_pos = 0
							ll_pos2idshort = 0
							ll_pos_addinfo = 0
							ls_fm_jobcode = ""
							ls_fm_jobtitle = ""
							ls_fm_positionid = ""
							b_skipadd = false
							ls_funddept = ""
							//-------------------------------------------------------------
							ls_sel_empno = f_extract_bracketed_item(ls_selected_username, "[", "]", true)
							ls_pos_addinfo = ls_callnum
							li_pos = pos(ls_callnum, "1J")
							if(li_pos > 0) then
								ls_pos_addinfo = trim(mid(ls_callnum, (li_pos + 2)))
							else
								ls_pos_addinfo = ""
							end if
							ll_emp_empno = f_stol(ls_sel_empno)
							if(ll_emp_empno > 0) then
								//
								select job_code, title into :ls_fm_jobcode, :ls_fm_jobtitle from fm.io_employee where empno = :ll_emp_empno using sqlca;
								//
								select id, positionid into :ll_boards_specs_others_id, :ls_positionid from sns_board_specs_others where grpid = :ll_clicked_grpid and callnum = :ls_callnum using sqlca;
								//
								select id, empname into :ll_emp_id, :ls_emp_empname from sns_employees where empno = :ll_emp_empno using sqlca;
								//
								if((f_len_ext(ls_funddept) = 0) or (IsNull(ls_funddept) = true)) then
									//
									select to_char(fund) || '-' || to_char(dept) into :ls_funddept from fm.io_employee where empno = :ll_emp_empno using sqlca;
									//
								end if
								if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
									//
									select positionid into :ls_positionid from sns_staffing_grps_positions2 where assgnd_empno = :ll_emp_empno using sqlca;
									//
									if((f_len_ext(ls_positionid) = 0) or (IsNull(ls_positionid) = true)) then
										//
										select position_id into :ls_positionid from fm.io_employee where empno = :ll_emp_empno using sqlca;
										//
									end if
								end if
								ls_positionid = trim(upper(ls_positionid))
								if(f_len_ext(ls_positionid) > 0) then
									li_pos = pos(ls_positionid, "-")
									if(li_pos > 0) then
										ll_pos2idshort = f_stol(mid(ls_positionid, (li_pos + 1)))								
									end if
								else
									b_skipadd = true
									bAutoRefresh = false
									MessageBox("Notification","Unable to add " + ls_emp_empname + " to group " + ls_hdrtext + ". Unable to determine POSITION ID#!")
								end if
								if(b_skipadd = false) then
									if(f_len_ext(ls_positionid) > 0) then
										//
										select id, grpid, xrefid into :ll_pos_id, :ll_pos_grpid, :ll_pos_xrefid from sns_staffing_grps_positions2 where ltrim(rtrim(upper(positionid))) = :ls_positionid using sqlca;
										//
										select id into :ll_pos_xref_id from sns_pos_xref where pos2idshort = :ll_pos2idshort using sqlca;
										//
										select id into :ll_pos_xref_mods_id from sns_pos_xref_mods where ppos2idshort = :ll_pos2idshort using sqlca;
										//
									end if
									//-------------------------------------------------------------
									// sns_staffing_grps_positions2
									//  -update grpid, callnum, addinfo, jobcode, jobtitle, assgnd_empno
									// sns_pos_xref
									//  -change grpid to the move to group grpid
									//  -change spunitno to new callnum
									// sns_pos_xref_mods
									//  -change pgrpid to the move to group grpid
									//  -change pspunitno to new callnum
									// sns_employees
									//  -update the grpid to move to group grpid
									// sns_board_specs_others
									//  -update empname
									//  -       empno
									//  -       positionid
									//  - where callnum = selected callnum											
									//-------------------------------------------------------------
									integer li_num_update_errors
									integer li_rtn_value
									string ls_error
									li_rtn_value = 0
									li_num_update_errors = 0
									if(ll_pos_id > 0) then
										//sns_staffing_grps_positions2
										//
										update sns_staffing_grps_positions2 
										set grpid = :ll_clicked_grpid, callnum = :ls_callnum, assgnd_empno = :ll_emp_empno, addinfo = :ls_pos_addinfo, jobcode = :ls_fm_jobcode, jobtitle = :ls_fm_jobtitle
										where id = :ll_pos_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										else
											li_rtn_value = 1
										end if
										//sns_pos_xref
										if(ll_pos_xref_id > 0) then
											//
											update sns_pos_xref
											set pos2recid = :ll_pos_id, empno = :ll_emp_empno, pos2idshort = :ll_pos2idshort, spunitno = :ls_callnum, grpid = :ll_clicked_grpid, status = 'A', empname = :ls_emp_empname
											where id = :ll_pos_xref_id
											using sqlca;
											//
											if(sqlca.sqlcode = -1) then
												li_num_update_errors++
											end if
											//
											if(ll_pos_xref_mods_id > 0) then
												//
												update sns_pos_xref_mods
												set ppos2recid = :ll_pos_id, pempno = :ll_emp_empno, ppos2idshort = :ll_pos2idshort, pspunitno = :ls_callnum, pgrpid = :ll_clicked_grpid
												where id = :ll_pos_xref_mods_id
												using sqlca;
												//
												if(sqlca.sqlcode = -1) then
													li_num_update_errors++
												end if
											end if
										end if
									else
										//insert into sns_staffing_grps_positions2, sns_pos_xref and sns_pos_xref_mods
										li_rtn_value = f_insert_pos2_support_table_records(ll_clicked_grpid, ls_callnum, ll_emp_empno, ls_funddept, ls_pos_addinfo, &
																	".", ls_positionid, ls_fm_jobcode, ls_fm_jobtitle, 0.0, true, &
																	ref ls_error, ref sqlca)
									end if
									if((ll_emp_id > 0) and (li_rtn_value = 1)) then
										long ll_super_empno
										string ls_grps_resp
										string ls_supervisor
										long ll_grps_resp
										//
										select empno, empname into :ll_super_empno, :ls_supervisor from sns_board_specs_others where grpid = :ll_clicked_grpid and issuper = 1 using sqlca;
										//
										select root_grp_super_empno into :ll_grps_resp from sns_staffing_groups where id = :ll_clicked_grpid using sqlca;
										//
										ls_grps_resp = string(ll_grps_resp)
										//
										update sns_employees
										set title = :ls_fm_jobtitle, jobcode = :ls_fm_jobcode, positionid = :ls_positionid, super_empno = :ll_super_empno, supervisor = :ls_supervisor, grps_resp =:ls_grps_resp, grpid = :ll_clicked_grpid
										where empno = :ll_emp_empno
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if									
									end if
									if(ll_boards_specs_others_id > 0) then
										//
										update sns_board_specs_others
										set empname = :ls_emp_empname, empno = :ll_emp_empno, isunfilled = 0
										where id = :ll_boards_specs_others_id
										using sqlca;
										//
										if(sqlca.sqlcode = -1) then
											li_num_update_errors++
										end if	
									end if
									if(li_num_update_errors = 0) then
										//
										commit using sqlca;
										//
										bAutoRefresh = true
										MessageBox("Notification","Successfully added " + ls_emp_empname + " to group " + ls_hdrtext)
									else
										//
										rollback using sqlca;
										//
										MessageBox("Notification","Failed to add " + ls_emp_empname + " to group " + ls_hdrtext + " One or more errors occured [" + string(li_num_update_errors) + "].")
										bAutoRefresh = false
									end if
								end if
								if(bAutoRefresh = true) then
									ls_refresh_grpids = "," + string(ll_clicked_grpid) + ","
									sle_refresh_grpids.text = ls_refresh_grpids
									TriggerEvent(pb_refresh, Clicked!)							
								end if
							end if //ll_emp_empno > 0
						end if //li_rtn_result = 1
					end if //f_len_ext(ls_selected_username) > 0)					
				end if //li_drslt = 1
			end if //li_max_names < ll_num_avail_positions
		end if
	end if
end if

end event

type pb_14 from picturebutton within w_pat_assmts_updates
integer width = 119
integer height = 92
integer taborder = 10
integer textsize = -8
integer weight = 700
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string text = "X"
boolean originalsize = true
long textcolor = 16777215
long backcolor = 255
end type

event clicked;close(w_pat_assmts_updates)
end event

type st_1 from statictext within w_pat_assmts_updates
integer x = 137
integer y = 12
integer width = 1198
integer height = 84
integer textsize = -12
integer weight = 700
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Tahoma"
long textcolor = 16711680
long backcolor = 553648127
string text = "Patrol Assignments Updates"
boolean focusrectangle = false
end type

type ln_1 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 110
integer beginy = 184
integer endx = 1618
integer endy = 184
end type

type ln_2 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 2866
integer beginy = 184
integer endx = 4375
integer endy = 184
end type

type ln_3 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 4398
integer beginy = 112
integer endx = 4398
integer endy = 260
end type

type ln_4 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 87
integer beginy = 104
integer endx = 87
integer endy = 252
end type

type ln_5 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 6551
integer beginy = 104
integer endx = 6551
integer endy = 252
end type

type ln_6 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 4425
integer beginy = 108
integer endx = 4425
integer endy = 256
end type

type ln_7 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 4901
integer beginy = 184
integer endx = 4471
integer endy = 184
end type

type ln_8 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 6537
integer beginy = 184
integer endx = 6107
integer endy = 184
end type

type ln_9 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 5481
integer beginy = 1236
integer endx = 5481
integer endy = 1384
end type

type ln_12 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 4434
integer beginy = 1244
integer endx = 4434
integer endy = 1392
end type

type ln_13 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 87
integer beginy = 1232
integer endx = 87
integer endy = 1380
end type

type ln_14 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 3323
integer beginy = 1232
integer endx = 3323
integer endy = 1380
end type

type ln_15 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 87
integer beginy = 104
integer endx = 87
integer endy = 252
end type

type ln_16 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 3346
integer beginy = 1228
integer endx = 3346
integer endy = 1376
end type

type ln_17 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 4416
integer beginy = 1240
integer endx = 4416
integer endy = 1388
end type

type ln_18 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 2222
integer beginy = 1320
integer endx = 3278
integer endy = 1320
end type

type ln_19 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 114
integer beginy = 1324
integer endx = 1170
integer endy = 1324
end type

type ln_20 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 1152
integer beginy = 2804
integer endx = 1152
integer endy = 2952
end type

type ln_21 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 82
integer beginy = 2792
integer endx = 82
integer endy = 2940
end type

type ln_10 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 5481
integer beginy = 1236
integer endx = 5481
integer endy = 1384
end type

type ln_11 from line within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 11
integer beginx = 6551
integer beginy = 1240
integer endx = 6551
integer endy = 1388
end type

type r_1 from rectangle within w_pat_assmts_updates
long linecolor = 33554432
integer linethickness = 4
long fillcolor = 12632256
integer x = 2066
integer y = 2788
integer width = 3383
integer height = 1356
end type

